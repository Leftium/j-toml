{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","$iterator$.ts","../../j-orderify/dist/ESM/j-orderify!meta.js","../../j-orderify/src/export.ts","../../j-orderify/dist/ESM/j-orderify!.js","types/Table.ts","types/Integer.ts","$options$.ts","../../j-regexp/dist/ESM/j-regexp!meta.js","../../j-regexp/src/export.ts","../../j-regexp/dist/ESM/j-regexp!.js","types/Datetime.ts","types/Float.ts","$regexps$.ts","types/String.ts","parse/on-the-spot.ts","parse/x-feature.ts","parse/level-loop.ts","parse/.ts","install.ts","default.ts"],
	"sourcesContent":
		[
			"export default '0.5.81';",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\n//import * as $options$ from './$options$';\n\n\nconst NONE :string[] = [];\nlet sourceLines :string[] = NONE;\nlet lastLineIndex :number = -1;\nlet lineIndex :number = -1;\n\nfunction noop (lineRest :string) :string { return ''; }\nnoop.previous = noop;\n\nexport let stacks_length = 0;\nlet last :typeof noop = noop;\n\n\nexport function could () :void {\n\tif ( sourceLines!==NONE ) { throw Error('Inner error: parsing in parsing.'); }\n}\n\nconst EOL = /\\r?\\n/;\nexport function todo (source :string) :void {\n\tsourceLines = source.split(EOL);\n\tlastLineIndex = sourceLines.length-1;\n\tlineIndex = -1;\n\tstacks_length = 0;\n\tlast = noop;\n}\n\nexport const next = () :string => sourceLines[++lineIndex];\n\nexport const rest = () :boolean => lineIndex!==lastLineIndex;\n\nexport const mark = () :number => lineIndex;\n\nexport function must (message :string, startIndex :number) :string {\n\tlineIndex===lastLineIndex\n\t&& throws(SyntaxError(message+' is not close until the end of the file, which started from line '+( startIndex+1 )+': '+sourceLines[startIndex]));\n\treturn sourceLines[++lineIndex];\n}\n\nexport const where = () :string => 'line '+( lineIndex+1 )+': '+sourceLines[lineIndex];\n\nexport function done () :void {\n\tsourceLines = NONE;\n\tlast = noop;\n}\n\n\nexport function stacks_pop () :typeof noop {\n\tconst item :typeof noop = last;\n\tlast = last.previous;\n\t--stacks_length;\n\treturn item;\n}\n\nexport function stacks_push (item :typeof noop) :void {\n\titem.previous = last;\n\tlast = item;\n\t++stacks_length;\n}\n\nexport function stacks_insertBeforeLast (item :typeof noop) {\n\titem.previous = last.previous;\n\tlast.previous = item;\n\t++stacks_length;\n}\n\n\nexport function throws (error :FriendlyError) :never {\n\tif ( sourceLines!==NONE ) {\n\t\terror.lineIndex = lineIndex;\n\t\terror.lineNumber = lineIndex+1;\n\t\t//done();\n\t\t//$options$.clear();\n\t}\n\tthrow error;\n}\n\ndeclare class FriendlyError extends Error {\n\tlineIndex? :number;\n\tlineNumber? :number;\n}\n",
			"/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.7.1\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */",
			"import version from './version?text';\nexport { version };\n\nimport WeakMap from '.WeakMap';\nimport Object from '.Object';\nimport create from '.Object.create';\nimport Set from '.Set';\nimport Proxy from '.Proxy';\nimport defineProperty from '.Reflect.defineProperty';\nimport deleteProperty from '.Reflect.deleteProperty';\nimport ownKeys from '.Reflect.ownKeys';\n\nconst ownKeysKeepers = new WeakMap;\n\nconst handlers :object = create(null, {\n\tdefineProperty: {\n\t\tvalue (target :object, key :string | symbol, descriptor :PropertyDescriptor) {\n\t\t\tif ( defineProperty(target, key, descriptor) ) {\n\t\t\t\townKeysKeepers.get(target).add(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\tdeleteProperty: {\n\t\tvalue (target :object, key :string | symbol) {\n\t\t\tif ( deleteProperty(target, key) ) {\n\t\t\t\townKeysKeepers.get(target).delete(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\townKeys: {\n\t\tvalue (target :object) :( string | symbol )[] {\n\t\t\treturn [...ownKeysKeepers.get(target)];\n\t\t}\n\t},\n});\n\nexport const orderify = (object :object) :object => {\n\townKeysKeepers.set(object, new Set(ownKeys(object)));\n\treturn new Proxy(object, handlers);\n};\n\nexport class Orderified extends null {\n\tconstructor () {\n\t\tconst object :Orderified = create(prototype);\n\t\townKeysKeepers.set(object, new Set);\n\t\treturn new Proxy(object, handlers);\n\t}\n}\n\nconst prototype = /*#__PURE__*/ function () {\n\tdelete Orderified.prototype.constructor;\n\tObject.freeze(Orderified.prototype);\n\treturn Orderified.prototype;\n}();\n\nexport default {\n\tversion,\n\torderify,\n\tOrderified,\n\tget default () { return this; },\n};\n",
			"import './j-orderify!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-orderify */",
			"import { orderify } from '@ltd/j-orderify';\n\nimport create from '.Object.create';\n\nexport function Table () :void { }\nexport const OrderedTable = function Table (this :object) :object { return orderify(this); };\nexport type Table = typeof Table | typeof OrderedTable;\n\nOrderedTable.prototype = Table.prototype = create(null);\n\nexport const isTable = (value :any) :boolean => value instanceof Table;\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\n\nimport * as $iterator$ from '../$iterator$';\nimport * as $options$ from '../$options$';\n\nconst INTEGER = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)$/;\nconst XOB_INTEGER = /^\\+?0(?:x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*)$/;\nconst UNDERSCORES_SIGN = /_|^[-+]/g;\n\nexport const NumberInteger = (literal :string) :number => {\n\tINTEGER.test(literal)\n\t|| $options$.xob && XOB_INTEGER.test(literal)\n\t|| $iterator$.throws(SyntaxError('Invalid Integer '+literal+' at '+$iterator$.where()));\n\tconst number = literal.startsWith('-')\n\t\t? -literal.replace(UNDERSCORES_SIGN, '')\n\t\t: +literal.replace(UNDERSCORES_SIGN, '');\n\t$options$.allowLonger\n\t|| isSafeInteger(number)\n\t|| $iterator$.throws(RangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes '+literal+' meet at '+$iterator$.where()));\n\treturn number;\n};\n\nexport const BigIntInteger = (literal :string) :bigint => {\n\tINTEGER.test(literal)\n\t|| $options$.xob && XOB_INTEGER.test(literal)\n\t|| $iterator$.throws(SyntaxError('Invalid Integer '+literal+' at '+$iterator$.where()));\n\tlet bigInt :bigint = BigInt(literal.replace(UNDERSCORES_SIGN, ''));\n\tif ( literal.startsWith('-') ) { bigInt = -bigInt; }\n\t$options$.allowLonger\n\t|| -9223372036854775808n<=bigInt && bigInt<=9223372036854775807n// ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n\t|| $iterator$.throws(RangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes '+literal+' meet at '+$iterator$.where()));\n\treturn bigInt;\n};\n\nexport const DependInteger = (literal :string) => {\n\tconst bigInt :bigint = BigIntInteger(literal);\n\treturn $options$.IntegerMin<=bigInt && bigInt<=$options$.IntegerMax ? +( bigInt+'' ) : bigInt;\n};\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport Proxy from '.Proxy';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from './types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from './types/Integer';\nimport * as $iterator$ from './$iterator$';\n\n/* options */\n\nexport let useWhatToJoinMultiLineString :string;\nexport let IntegerDepends :Function, IntegerMin :number, IntegerMax :number;\n\n/* xOptions */\n\ntype as = (array :any[]) => any[];\n\nexport let moreDatetime :boolean;\nexport let ctrl7F :boolean;\nexport let nonEmptyKey :boolean;\nexport let xob :boolean;\nexport let sFloat :boolean;\nexport let TableDepends :Table;\nexport let openable :boolean;\nexport let allowLonger :boolean;\nexport let enableNull :boolean;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma :boolean;\nexport let enableInterpolationString :boolean;\nexport let asNulls :as, asStrings :as, asTables :as, asArrays :as, asBooleans :as, asFloats :as, asIntegers :as;\nexport let asOffsetDateTimes :as, asLocalDateTimes :as, asLocalDates :as, asLocalTimes :as;\nlet processor :Function | null;\n\n/* xOptions.mix */\n\nexport const unType = (array :any[]) :any[] => array;\nexport const {\n\tasInlineArrayOfNulls,\n\tasInlineArrayOfStrings,\n\tasInlineArrayOfTables,\n\tasInlineArrayOfArrays,\n\tasInlineArrayOfBooleans,\n\tasInlineArrayOfFloats,\n\tasInlineArrayOfIntegers,\n\tasInlineArrayOfOffsetDateTimes,\n\tasInlineArrayOfLocalDateTimes,\n\tasInlineArrayOfLocalDates,\n\tasInlineArrayOfLocalTimes,\n} = <{ [each :string] :as }><object>new Proxy(new WeakMap, {\n\tget: (arrayTypes) => function typify (array :any[]) :any[] {\n\t\tif ( arrayTypes.has(array) ) {\n\t\t\tarrayTypes.get(array)===typify\n\t\t\t|| $iterator$.throws(TypeError('Types in array must be same. Check '+$iterator$.where()));\n\t\t}\n\t\telse { arrayTypes.set(array, typify); }\n\t\treturn array;\n\t}\n});\n\n/* xOptions.new */\n\ntype each = { table :object, key :string, tag :string } | { array :any[], index :number, tag :string } | { table :object, key :string, array :object[], index :number, tag :string };\nlet collection :each[] = [];\nfunction collect_on (each :each) :void { collection.push(each); }\nfunction collect_off (each :each) :never { throw $iterator$.throws(SyntaxError($iterator$.where())); }\nexport let collect :typeof collect_off | typeof collect_on = collect_off;\nexport function process () {\n\tlet index = collection.length;\n\tif ( index ) {\n\t\t$iterator$.done();\n\t\tconst process = <Function>processor;\n\t\tconst queue = collection;\n\t\tprocessor = null;\n\t\tcollection = [];\n\t\twhile ( index-- ) { process(<each>queue.pop()); }\n\t}\n}\n\n/* use & clear */\n\nexport function clear () :void {\n\tprocessor = null;\n\tcollection.length = 0;\n}\n\nexport function use (specificationVersion, multiLineJoiner :string, useBigInt :boolean | number, xOptions) :void {\n\tif ( specificationVersion!==0.5 && specificationVersion!==0.4 ) { throw Error('TOML.parse(,specificationVersion)'); }\n\tif ( typeof <unknown>multiLineJoiner!=='string' ) { throw TypeError('TOML.parse(,,multiLineJoiner)'); }\n\tif ( useBigInt===true ) { IntegerDepends = BigIntInteger; }\n\telse if ( useBigInt===false ) { IntegerDepends = NumberInteger; }\n\telse {\n\t\tif ( typeof useBigInt!=='number' ) { throw TypeError('TOML.parse(,,,useBigInt)'); }\n\t\tif ( !isSafeInteger(useBigInt) ) { throw RangeError('TOML.parse(...useBigInt)'); }\n\t\tIntegerDepends = DependInteger;\n\t\tif ( useBigInt>=0 ) {\n\t\t\tIntegerMax = useBigInt;\n\t\t\tIntegerMin = -useBigInt;\n\t\t}\n\t\telse {\n\t\t\tIntegerMin = useBigInt;\n\t\t\tIntegerMax = -useBigInt-1;\n\t\t}\n\t}\n\tuseWhatToJoinMultiLineString = multiLineJoiner;\n\tmoreDatetime = ctrl7F = xob = sFloat = specificationVersion===0.5;\n\tnonEmptyKey = openable = specificationVersion===0.4;\n\tlet typify :boolean;\n\tif ( xOptions===null ) {\n\t\tTableDepends = Table;\n\t\tallowLonger = enableNull = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = false;\n\t\tprocessor = null;\n\t\ttypify = true;\n\t}\n\telse {\n\t\tTableDepends = xOptions.order ? OrderedTable : Table;\n\t\tallowLonger = !!xOptions.longer;\n\t\tenableNull = !!xOptions.null;\n\t\tallowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!xOptions.multi;\n\t\tenableInterpolationString = !!xOptions.ins;\n\t\ttypify = !xOptions.mix;\n\t\tprocessor = xOptions.new || null;\n\t\tif ( processor ) {\n\t\t\tif ( typeof processor!=='function' ) { throw TypeError('TOML.parse(,,,,xOptions.tag)'); }\n\t\t\tif ( typify ) { throw Error('TOML.parse(,,,,xOptions) xOptions.tag needs xOptions.mix to be true'); }\n\t\t\tcollect = collect_on;\n\t\t}\n\t\telse { collect = collect_off; }\n\t}\n\tif ( typify ) {\n\t\tasNulls = asInlineArrayOfNulls;\n\t\tasStrings = asInlineArrayOfStrings;\n\t\tasTables = asInlineArrayOfTables;\n\t\tasArrays = asInlineArrayOfArrays;\n\t\tasBooleans = asInlineArrayOfBooleans;\n\t\tasFloats = asInlineArrayOfFloats;\n\t\tasIntegers = asInlineArrayOfIntegers;\n\t\tasOffsetDateTimes = asInlineArrayOfOffsetDateTimes;\n\t\tasLocalDateTimes = asInlineArrayOfLocalDateTimes;\n\t\tasLocalDates = asInlineArrayOfLocalDates;\n\t\tasLocalTimes = asInlineArrayOfLocalTimes;\n\t}\n\telse {\n\t\tasNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = unType;\n\t}\n}\n",
			"/*!\n * 模块名称：@ltd/j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。\n   　　　　　More readable way for creating RegExp.\n * 模块版本：1.1.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */",
			"import version from './version?text';\nexport { version };\n\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw, substitutions) :string {\n\tvar source :string = raw[0];\n\tfor ( var length :number = substitutions.length, index :number = 0; index<length; ) {\n\t\tvar substitution :string | RegExp = substitutions[index];\n\t\tsource += ( typeof substitution==='string' ? substitution : substitution.source )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nfunction newRegExp (template :TemplateStringsArray, ...substitutions :( string | RegExp )[]) :RegExp;\nfunction newRegExp (template :TemplateStringsArray) :RegExp {\n\treturn RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\nexport { newRegExp };\n\nexport function NewRegExp (flags :string) :typeof newRegExp {\n\treturn function newRegExp (template :TemplateStringsArray) :RegExp {\n\t\treturn RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t};\n}\n\nvar jRegExp = {\n\tnewRegExp: newRegExp,\n\tNewRegExp: NewRegExp,\n\tversion: version\n};\njRegExp['default'] = jRegExp;\nexport default jRegExp;\n",
			"import './j-regexp!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-regexp */",
			"import { newRegExp } from '@ltd/j-regexp';\n\nimport SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport WeakMap from '.WeakMap';\nimport Date from '.Date';\n\nimport * as $iterator$ from '../$iterator$';\n\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\n\nconst YMD = newRegExp`\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t(?:0[13578]|1[02])-${_31_}\n\t|\n\t\t(?:0[469]|11)-${_30_}\n\t|\n\t\t02-${_29_}\n\t)`;\n\nconst HMS_ = newRegExp`\n\t${_23_}:${_59_}:${_59_}(?:\\.\\d+)?`;\n\nexport const OFFSET = /(?:Z|[+-]\\d\\d:\\d\\d)$/;\n\nexport const OFFSET_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t${OFFSET}`;\n\nexport const LOCAL_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t$`;\n\nexport const LOCAL_DATE = newRegExp`\n\t^\n\t${YMD}\n\t$`;\n\nexport const LOCAL_TIME = newRegExp`\n\t^\n\t${HMS_}\n\t$`;\n\nconst literal_cache = new WeakMap;\nconst value_cache = new WeakMap;\n\nclass Datetime extends Date {\n\tconstructor (expression :string, literal :string) {\n\t\tsuper(expression);\n\t\tliteral_cache.set(this, literal);\n\t\tvalue_cache.set(this, this.getTime());\n\t}\n\t// Date.prototype.toJSON => toISOString\n\ttoISOString (this :Datetime) :string {\n\t\tif ( this.getTime()===value_cache.get(this) ) { return literal_cache.get(this); }\n\t\tthrow Error('Datetime value has been modified.');\n\t}\n}\n\nexport class OffsetDateTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tOFFSET_DATETIME.test(literal)\n\t\t|| $iterator$.throws(SyntaxError('Invalid Offset Date-Time '+literal+' at '+$iterator$.where()));\n\t\tsuper(literal.replace(' ', 'T'), literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index).replace(OFFSET, '') : '';\n\t}\n}\n\nexport class LocalDateTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_DATETIME.test(literal)\n\t\t|| $iterator$.throws(SyntaxError('Invalid Local Date-Time '+literal+' at '+$iterator$.where()));\n\t\tsuper(literal.replace(' ', 'T')+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}\n\nexport class LocalDate extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_DATE.test(literal)\n\t\t|| $iterator$.throws(SyntaxError('Invalid Local Date '+literal+' at '+$iterator$.where()));\n\t\tsuper(literal+'T00:00:00.000Z', literal);\n\t}\n\tget '.' () { return ''; }\n}\n\nexport class LocalTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_TIME.test(literal)\n\t\t|| $iterator$.throws(SyntaxError('Invalid Local Time '+literal+' at '+$iterator$.where()));\n\t\tsuper('1970-01-01T'+literal+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport isFinite from '.isFinite';\n//import Infinity from '.Infinity';\n//import NaN from '.NaN';\n\nimport * as $options$ from '../$options$';\nimport * as $iterator$ from '../$iterator$';\n\nconst FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nconst FLOAT_NOT_INTEGER = /[.eE]/;\nconst UNDERSCORES = /_/g;\n\nexport const Float = (literal :string) :number => {\n\tif ( FLOAT.test(literal) && FLOAT_NOT_INTEGER.test(literal) ) {\n\t\tif ( $options$.sFloat ) { return +literal.replace(UNDERSCORES, ''); }\n\t\telse {\n\t\t\tconst number = +literal.replace(UNDERSCORES, '');\n\t\t\tisFinite(number) || $iterator$.throws(RangeError('Float can not be as big as Infinity before TOML v0.5, like '+literal+' at '+$iterator$.where()));\n\t\t\treturn number;\n\t\t}\n\t}\n\t//if ( $options$.sFloat ) {\n\t//\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n\t//\tif ( literal==='-inf' ) { return -Infinity; }\n\t//\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n\t//}\n\tthrow $iterator$.throws(SyntaxError('Invalid Float '+literal+' at '+$iterator$.where()));\n};\n",
			"import { newRegExp } from '@ltd/j-regexp';\n\nimport SyntaxError from '.SyntaxError';\n\nimport * as $options$ from './$options$';\nimport * as $iterator$ from './$iterator$';\n\n/* nested (readable) */\n\nconst Whitespace = /[ \\t]/;\n\nexport const PRE_WHITESPACE = newRegExp`\n\t^${Whitespace}+`;\n\nexport const VALUE_REST = newRegExp`\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n\nexport const LITERAL_STRING = newRegExp`\n\t^\n\t'([^']*)'\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const MULTI_LINE_LITERAL_STRING = newRegExp`\n\t^\n\t([^]*?)\n\t'''\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const SYM_WHITESPACE = newRegExp`\n\t^\n\t[^]\n\t${Whitespace}*`;\n\n\nconst Tag = /[^()\\\\\"'`\\r\\n\\u2028\\u2029]+/;\n\nexport const KEY_VALUE_PAIR = newRegExp`\n\t^\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t=\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t(\n\t\t[^ \\t#]\n\t\t[^]*\n\t)\n\t$`;\n\nexport const _VALUE_PAIR = newRegExp`\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^ \\t#][^]*)\n\t$`;\n\nexport const TAG_REST = newRegExp`\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n\n/* optimized (avoid overflow or lost) */\n\nconst MULTI_LINE_BASIC_STRING :RegExp = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0 (_ :string) :string {\n\tfor ( let _0 :string = ''; ; ) {\n\t\tif ( _==='' ) { return _0; }\n\t\tconst $ :RegExpExecArray | null = MULTI_LINE_BASIC_STRING.exec(_);\n\t\tif ( $===null ) { return _0; }\n\t\t_0 += $[0];\n\t\t_ = _.slice($[0].length);\n\t}\n}\n\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER :RegExp = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER :RegExp = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test (_ :string) :boolean {\n\treturn _.replace($options$.ctrl7F ? ESCAPED_EXCLUDE_CONTROL_CHARACTER : ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER, '')==='';\n}\n\nconst BASIC_STRING :RegExp = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nconst BASIC_STRING_LESSER :RegExp = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec (_2 :string) :{ 1 :string, 2 :string } {\n\tconst basic_string = $options$.ctrl7F ? BASIC_STRING : BASIC_STRING_LESSER;\n\t_2 = _2.slice(1);\n\tfor ( let _1 :string = ''; ; ) {\n\t\tconst $ :RegExpExecArray | null = basic_string.exec(_2);\n\t\tif ( $===null ) {\n\t\t\t_2.startsWith('\"') || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\treturn { 1: _1, 2: _2.replace(SYM_WHITESPACE, '') };\n\t\t}\n\t\t_1 += $[0];\n\t\t_2 = _2.slice($[0].length);\n\t}\n}\n\nconst BARE_KEY :RegExp = /^[\\w-]+/;\nconst LITERAL_KEY :RegExp = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst LITERAL_KEY_LESSER :RegExp = /^'[^'\\x00-\\x08\\x0B-\\x1F]*'/;\nconst DOT_KEY :RegExp = /^[ \\t]*\\.[ \\t]*/;\n\nexport function TABLE_DEFINITION_exec_groups (_ :string) :{ $_asArrayItem$$ :boolean, keys :string, tagInner :string, $$asArrayItem$_ :boolean, tagOuter :string } {\n\tconst $_asArrayItem$$ :boolean = _.charAt(1)==='[';\n\t_ = _.slice($_asArrayItem$$ ? 2 : 1).replace(PRE_WHITESPACE, '');\n\tconst keys :string = getKeys(_);\n\t_ = _.slice(keys.length).replace(PRE_WHITESPACE, '');\n\tlet tagInner :string = '';\n\tif ( _.startsWith('(') ) { ( { 1: tagInner, 2: _ } = TAG_REST.exec(_) || $iterator$.throws(SyntaxError($iterator$.where())) ); }\n\t_.startsWith(']') || $iterator$.throws(SyntaxError($iterator$.where()));\n\tconst $$asArrayItem$_ :boolean = _.charAt(1)===']';\n\t_ = _.slice($$asArrayItem$_ ? 2 : 1).replace(PRE_WHITESPACE, '');\n\tlet tagOuter :string = '';\n\tif ( _.startsWith('(') ) { ( { 1: tagOuter, 2: _ } = TAG_REST.exec(_) || $iterator$.throws(SyntaxError($iterator$.where())) ); }\n\t_==='' || _.startsWith('#') || $iterator$.throws(SyntaxError($iterator$.where()));\n\treturn { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter };\n}\n\nexport function KEY_VALUE_PAIR_exec_groups (_ :string) :{ left :string, tagLeft :string, tagRight :string, right :string } {\n\tconst _1 :string = getKeys(_);\n\tconst $ :RegExpExecArray = KEY_VALUE_PAIR.exec(_.slice(_1.length)) || $iterator$.throws(SyntaxError($iterator$.where()));\n\treturn { left: _1, tagLeft: $[1] || '', tagRight: $[2] || '', right: $[3] };\n}\n\nfunction getKeys (_ :string) :string {\n\tconst literal_key = $options$.ctrl7F ? LITERAL_KEY : LITERAL_KEY_LESSER;\n\tfor ( let keys :string = ''; ; ) {\n\t\tif ( _.startsWith('\"') ) {\n\t\t\t_ = _.slice(1);\n\t\t\tfor ( let key :string = '\"'; ; ) {\n\t\t\t\tconst $ :RegExpExecArray | null = BASIC_STRING.exec(_);\n\t\t\t\tif ( $===null ) {\n\t\t\t\t\t_.startsWith('\"') || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\t\t\t_ = _.slice(1);\n\t\t\t\t\tkeys += key+'\"';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_ = _.slice($[0].length);\n\t\t\t\tkey += $[0];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst key :string = ( ( _.startsWith('\\'') ? literal_key : BARE_KEY ).exec(_) || $iterator$.throws(SyntaxError($iterator$.where())) )[0];\n\t\t\t_ = _.slice(key.length);\n\t\t\tkeys += key;\n\t\t}\n\t\tconst $ :RegExpExecArray | null = DOT_KEY.exec(_);\n\t\tif ( $===null ) { return keys; }\n\t\t_ = _.slice($[0].length);\n\t\tkeys += $[0];\n\t}\n}\n",
			"import RangeError from '.RangeError';\nimport parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\n\nimport * as $iterator$ from '../$iterator$';\nimport * as $options$ from '../$options$';\n\nconst ESCAPE_ALIAS = { '\\\\': '\\\\', '\"': '\"', b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\n\nconst ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"btnfr])|u(.{4})|U(.{8}))/g;\nconst ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?: *(\\n)[ \\n]*|([\\\\\"btnfr])|u([^]{4})|U([^]{8}))/g;\n\ntype __btnfr = '\\\\' | '\"' | 'b' | 'b' | 'n' | 'f' | 'r' | undefined;\n\nconst unEscapeSingleLine = (match :string, p1 :__btnfr, p2 :string | undefined, p3 :string | undefined) :string => {\n\tif ( p1 ) { return ESCAPE_ALIAS[p1]; }\n\tconst codePoint :number = parseInt(p2 || <string>p3, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& $iterator$.throws(RangeError('Invalid Unicode Scalar '+( p2 ? '\\\\u'+p2 : '\\\\U'+p3 )+' at '+$iterator$.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nconst unEscapeMultiLine = (match :string, p1 :'\\n' | undefined, p2 :__btnfr, p3 :string | undefined, p4 :string | undefined) :string => {\n\tif ( match==='\\n' ) { return $options$.useWhatToJoinMultiLineString; }\n\tif ( p1 ) { return ''; }\n\tif ( p2 ) { return ESCAPE_ALIAS[p2]; }\n\tconst codePoint :number = parseInt(p3 || <string>p4, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& $iterator$.throws(RangeError('Invalid Unicode Scalar '+( p3 ? '\\\\u'+p3 : '\\\\U'+p4 )+' at '+$iterator$.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nexport const BasicString = (literal :string) :string => literal.replace(ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\n\nexport const MultiLineBasicString = (literal :string) :string => literal.replace(ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);\n",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport isArray from '.Array.isArray';\nimport WeakSet from '.WeakSet';\nimport * as $iterator$ from '../$iterator$';\nimport { isTable } from '../types/Table';\nimport { BasicString, MultiLineBasicString } from '../types/String';\nimport * as $options$ from '../$options$';\nimport * as $regexps$ from '../$regexps$';\n\nexport const sealedInline = new WeakSet;\nconst openTables = new WeakSet;\nconst openedTables = new WeakSet;\n\nconst KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\n\nexport function appendTable (table :object, key_key :string, asArrayItem :boolean, tag :string) :object {\n\tconst leadingKeys :string[] = parseKeys(key_key);\n\tconst finalKey :string = leadingKeys.pop();\n\ttable = prepareTable(table, leadingKeys);\n\tlet lastTable :object;\n\tif ( asArrayItem ) {\n\t\tlet arrayOfTables :object[];\n\t\tif ( finalKey in table ) { sealedInline.has(arrayOfTables = table[finalKey]) && $iterator$.throws(Error('Trying to push Table to non-ArrayOfTables value at '+$iterator$.where())); }\n\t\telse { arrayOfTables = table[finalKey] = []; }\n\t\ttag && $options$.collect({ table, key: finalKey, array: arrayOfTables, index: arrayOfTables.length, tag });\n\t\tarrayOfTables.push(lastTable = new $options$.TableDepends);\n\t}\n\telse {\n\t\tif ( finalKey in table ) {\n\t\t\t$options$.openable && openTables.has(lastTable = table[finalKey]) && !openedTables.has(lastTable) || $iterator$.throws(Error('Duplicate Table definition at '+$iterator$.where()));\n\t\t\topenTables.delete(lastTable);\n\t\t}\n\t\telse {\n\t\t\ttable[finalKey] = lastTable = new $options$.TableDepends;\n\t\t\t$options$.openable && openedTables.add(lastTable);\n\t\t}\n\t\ttag && $options$.collect({ table, key: finalKey, tag });\n\t}\n\treturn lastTable;\n}\n\nexport function parseKeys (key_key :string) :string[] {\n\tconst keys :RegExpMatchArray = key_key.match(KEYS);\n\tfor ( let index :number = keys.length; index--; ) {\n\t\tconst key :string = keys[index];\n\t\tif ( key.startsWith('\\'') ) { keys[index] = key.slice(1, -1); }\n\t\telse if ( key.startsWith('\"') ) { keys[index] = BasicString(key.slice(1, -1)); }\n\t}\n\tif ( $options$.nonEmptyKey ) {\n\t\tfor ( let index :number = keys.length; index--; ) {\n\t\t\tkeys[index] || $iterator$.throws(SyntaxError('Empty key is not allowed before TOML v0.4, which at '+$iterator$.where()));\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction prepareTable (table :object, keys :string[]) :object {\n\tconst { length } :string[] = keys;\n\tlet index :number = 0;\n\twhile ( index<length ) {\n\t\tconst key :string = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tif ( isTable(table) ) {\n\t\t\t\tsealedInline.has(table) && $iterator$.throws(Error('Trying to define table through static Inline Object at '+$iterator$.where()));\n\t\t\t}\n\t\t\telse if ( isArray(table) ) {\n\t\t\t\tsealedInline.has(table) && $iterator$.throws(Error('Trying to append value to static Inline Array at '+$iterator$.where()));\n\t\t\t\t// @ts-ignore\n\t\t\t\ttable = table[table.length-1];\n\t\t\t}\n\t\t\telse { $iterator$.throws(Error('Trying to define table through non-Table value at '+$iterator$.where())); }\n\t\t}\n\t\telse {\n\t\t\topenTables.add(table = table[key] = new $options$.TableDepends);\n\t\t\twhile ( index<length ) { openTables.add(table = table[keys[index++]] = new $options$.TableDepends); }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function prepareInlineTable (table :object, keys :string[]) :object {\n\tconst { length } :string[] = keys;\n\tlet index :number = 0;\n\twhile ( index<length ) {\n\t\tconst key :string = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tisTable(table) || $iterator$.throws(Error('Trying to assign property through non-Table value at '+$iterator$.where()));\n\t\t\tsealedInline.has(table) && $iterator$.throws(Error('Trying to assign property through static Inline Object at '+$iterator$.where()));\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new $options$.TableDepends;\n\t\t\twhile ( index<length ) { table = table[keys[index++]] = new $options$.TableDepends; }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function assignLiteralString (table :object, finalKey :string, literal :string) :string {\n\tlet $ :RegExpExecArray;\n\tif ( literal.charAt(1)!=='\\'' || literal.charAt(2)!=='\\'' ) {\n\t\t$ = $regexps$.LITERAL_STRING.exec(literal) || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\t$ = $regexps$.MULTI_LINE_LITERAL_STRING.exec(literal);\n\tif ( $ ) {\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tif ( literal ) {\n\t\tcheckLiteralString(literal);\n\t\tliteral += $options$.useWhatToJoinMultiLineString;\n\t}\n\tconst start :number = $iterator$.mark();\n\tfor ( ; ; ) {\n\t\tconst line :string = $iterator$.must('Literal String', start);\n\t\t$ = $regexps$.MULTI_LINE_LITERAL_STRING.exec(line);\n\t\tif ( $ ) {\n\t\t\ttable[finalKey] = literal+checkLiteralString($[1]);\n\t\t\treturn $[2];\n\t\t}\n\t\tliteral += line+$options$.useWhatToJoinMultiLineString;\n\t}\n}\n\nconst CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nconst CONTROL_CHARACTER_EXCLUDE_TAB_LESSER = /[\\x00-\\x08\\x0B-\\x1F]/;\nfunction checkLiteralString (literal :string) :string {\n\t( $options$.ctrl7F ? CONTROL_CHARACTER_EXCLUDE_TAB : CONTROL_CHARACTER_EXCLUDE_TAB_LESSER ).test(literal) && $iterator$.throws(SyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+$iterator$.where()));\n\treturn literal;\n}\n\nexport function assignBasicString (table :object, finalKey :string, literal :string) :string {\n\tif ( literal.charAt(1)!=='\"' || literal.charAt(2)!=='\"' ) {\n\t\tconst $ = $regexps$.BASIC_STRING_exec(literal);\n\t\ttable[finalKey] = BasicString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\tconst $ = $regexps$.MULTI_LINE_BASIC_STRING_exec_0(literal);\n\tif ( literal.startsWith('\"\"\"', $.length) ) {\n\t\t$regexps$.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\ttable[finalKey] = MultiLineBasicString($);\n\t\treturn literal.slice($.length+3).replace($regexps$.PRE_WHITESPACE, '');\n\t}\n\tif ( literal ) {\n\t\tliteral += '\\n';\n\t\t$regexps$.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || $iterator$.throws(SyntaxError($iterator$.where()));\n\t}\n\tconst start :number = $iterator$.mark();\n\tfor ( ; ; ) {\n\t\tlet line :string = $iterator$.must('Basic String', start);\n\t\tconst $ = $regexps$.MULTI_LINE_BASIC_STRING_exec_0(line);\n\t\tif ( line.startsWith('\"\"\"', $.length) ) {\n\t\t\t$regexps$.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\ttable[finalKey] = MultiLineBasicString(literal+$);\n\t\t\treturn line.slice($.length+3).replace($regexps$.PRE_WHITESPACE, '');\n\t\t}\n\t\tline += '\\n';\n\t\t$regexps$.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\tliteral += line;\n\t}\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport * as $iterator$ from '../$iterator$';\nimport * as $options$ from '../$options$';\nimport * as $regexps$ from '../$regexps$';\n\nconst DELIMITER_CHECK = /[^`]/;\n\nexport function assignInterpolationString (table :object, finalKey :string, delimiter :string) :string {\n\t$options$.enableInterpolationString || $iterator$.throws(SyntaxError($iterator$.where()));\n\tDELIMITER_CHECK.test(delimiter) && $iterator$.throws(SyntaxError('Interpolation String opening tag incorrect at '+$iterator$.where()));\n\tlet string :string;\n\tlet lineRest :string;\n\t{\n\t\tconst literals :string[] = [];\n\t\tfor ( const start :number = $iterator$.mark(); ; ) {\n\t\t\tconst literal :string = $iterator$.must('Interpolation String', start);\n\t\t\tif ( literal.startsWith(delimiter) ) {\n\t\t\t\tlineRest = literal.slice(delimiter.length).replace($regexps$.PRE_WHITESPACE, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tliterals.push(literal);\n\t\t}\n\t\tstring = literals.join('\\n');\n\t}\n\ttable[finalKey] = string;\n\treturn lineRest;\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport * as $iterator$ from '../$iterator$';\nimport { OffsetDateTime, LocalDateTime, LocalDate, LocalTime, OFFSET } from '../types/Datetime';\nimport { Float } from '../types/Float';\nimport * as $options$ from '../$options$';\nimport * as $regexps$ from '../$regexps$';\nimport { sealedInline, appendTable, parseKeys, prepareInlineTable, assignLiteralString, assignBasicString } from './on-the-spot';\nimport { assignInterpolationString } from './x-feature';\n\nexport default function Root () {\n\tconst rootTable :object = new $options$.TableDepends;\n\tlet lastSectionTable :object = rootTable;\n\twhile ( $iterator$.rest() ) {\n\t\tconst line :string = $iterator$.next().replace($regexps$.PRE_WHITESPACE, '');\n\t\tif ( line==='' ) { }\n\t\telse if ( line.startsWith('#') ) { }\n\t\telse if ( line.startsWith('[') ) {\n\t\t\tconst { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter } = $regexps$.TABLE_DEFINITION_exec_groups(line);\n\t\t\t$_asArrayItem$$===$$asArrayItem$_ || $iterator$.throws(SyntaxError('Square brackets of table define statement not match at '+$iterator$.where()));\n\t\t\ttagInner && tagOuter && $iterator$.throws(SyntaxError('Tag for table define statement can not both in and out, which at '+$iterator$.where()));\n\t\t\tlastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, tagOuter || tagInner);\n\t\t}\n\t\telse {\n\t\t\tlet rest :string = assign(lastSectionTable, line);\n\t\t\twhile ( $iterator$.stacks_length ) { rest = $iterator$.stacks_pop()(rest); }\n\t\t\trest==='' || rest.startsWith('#') || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t}\n\t}\n\treturn rootTable;\n};\n\nfunction assign (lastInlineTable_array :object | any[], lineRest :string) :string {\n\tlet left :string;\n\tlet tagLeft :string;\n\tlet tagRight :string;\n\t( { left, tagLeft, tagRight, right: lineRest } = $regexps$.KEY_VALUE_PAIR_exec_groups(lineRest) );\n\tconst leadingKeys :string[] = parseKeys(left);\n\tconst finalKey :string = leadingKeys.pop();\n\tconst table :object = prepareInlineTable(lastInlineTable_array, leadingKeys);\n\tfinalKey in table && $iterator$.throws(Error('Duplicate property definition at '+$iterator$.where()));\n\ttagLeft && $options$.collect({ table, key: finalKey, tag: tagLeft });\n\ttagRight && $options$.collect({ table, key: finalKey, tag: tagRight });\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\t$iterator$.stacks_push(lineRest => equalInlineTable(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\t$iterator$.stacks_push(lineRest => equalInlineArray(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal :string;\n\t( { 1: literal, 2: lineRest } = $regexps$.VALUE_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\tif ( lineRest.startsWith('(') ) {\n\t\ttagRight && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t( { 1: tagRight, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t$options$.collect({ table, key: finalKey, tag: tagRight });\n\t}\n\tif ( $options$.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\ttable[finalKey] = Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\ttable[finalKey] = -Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\ttable[finalKey] = NaN;\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( OFFSET.test(literal) ) {\n\t\t\t\ttable[finalKey] = new OffsetDateTime(literal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\t\ttable[finalKey] = new LocalDateTime(literal);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\ttable[finalKey] = new LocalTime(literal);\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\ttable[finalKey] = new LocalDate(literal);\n\t\treturn lineRest;\n\t}\n\ttable[finalKey] =\n\t\tliteral==='true' ? true : literal==='false' ? false :\n\t\t\t\tliteral.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ? Float(literal) :\n\t\t\t\t\t$options$.enableNull && literal==='null' ? null :\n\t\t\t\t\t\t$options$.IntegerDepends(literal);\n\treturn lineRest;\n}\n\nfunction push (lastInlineTable_array :object | any[], lineRest :string) :string {\n\tlet alreadyBefore = lineRest.startsWith('(');\n\tlet tag :string;\n\tif ( alreadyBefore ) {\n\t\t( { 1: tag, 2: lineRest } = $regexps$._VALUE_PAIR.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t$options$.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n\t}\n\tconst lastIndex :string = ''+lastInlineTable_array.length;\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString($options$.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString($options$.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString($options$.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t\t\t$options$.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\t$iterator$.stacks_push(lineRest => equalInlineTable($options$.asTables(lastInlineTable_array), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\t$iterator$.stacks_push(lineRest => equalInlineArray($options$.asArrays(lastInlineTable_array), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal :string;\n\t( { 1: literal, 2: lineRest } = $regexps$.VALUE_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\tif ( lineRest.startsWith('(') ) {\n\t\talreadyBefore && $iterator$.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+$iterator$.where()));\n\t\t( { 1: tag, 2: lineRest } = $regexps$.TAG_REST.exec(lineRest) || $iterator$.throws(SyntaxError($iterator$.where())) );\n\t\t$options$.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n\t}\n\tif ( $options$.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\t$options$.asFloats(lastInlineTable_array).push(Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\t$options$.asFloats(lastInlineTable_array).push(-Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\t$options$.asFloats(lastInlineTable_array).push(NaN);\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( OFFSET.test(literal) ) {\n\t\t\t\t$options$.asOffsetDateTimes(lastInlineTable_array).push(new OffsetDateTime(literal));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\t\t$options$.asLocalDateTimes(lastInlineTable_array).push(new LocalDateTime(literal));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\t$options$.asLocalTimes(lastInlineTable_array).push(new LocalTime(literal));\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\t$options$.moreDatetime || $iterator$.throws(SyntaxError($iterator$.where()));\n\t\t$options$.asLocalDates(lastInlineTable_array).push(new LocalDate(literal));\n\t\treturn lineRest;\n\t}\n\tif ( literal==='true' ) { $options$.asBooleans(lastInlineTable_array).push(true); }\n\telse if ( literal==='false' ) { $options$.asBooleans(lastInlineTable_array).push(false); }\n\telse if ( literal.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ) {\n\t\t$options$.asFloats(lastInlineTable_array).push(Float(literal));\n\t}\n\telse if ( $options$.enableNull && literal==='null' ) { $options$.asNulls(lastInlineTable_array).push(null); }\n\telse { $options$.asIntegers(lastInlineTable_array).push($options$.IntegerDepends(literal)); }\n\treturn lineRest;\n}\n\nfunction equalInlineTable (table :object, finalKey :string, lineRest :string) :string {\n\tconst inlineTable :object = table[finalKey] = new $options$.TableDepends;\n\tsealedInline.add(inlineTable);\n\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');\n\tif ( $options$.allowInlineTableMultiLineAndTrailingCommaEvenNoComma ) {\n\t\tconst start :number = $iterator$.mark();\n\t\tconst length = $iterator$.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = $iterator$.must('Inline Table', start).replace($regexps$.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( $iterator$.stacks_length>length ) {\n\t\t\t\t\t$iterator$.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = $iterator$.must('Inline Table', start).replace($regexps$.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace($regexps$.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = $iterator$.must('Inline Table', start).replace($regexps$.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t}(lineRest);\n\t}\n\telse {\n\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t( lineRest==='' || lineRest.startsWith('#') ) && $iterator$.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+$iterator$.where()));\n\t\tconst length = $iterator$.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( $iterator$.stacks_length>length ) {\n\t\t\t\t\t$iterator$.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\t\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');//\n\t\t\t\t\t\t\tlineRest.startsWith('}') && $iterator$.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+$iterator$.where()));//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && $iterator$.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+$iterator$.where()));//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\t\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');\n\t\t\t\t\tlineRest.startsWith('}') && $iterator$.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+$iterator$.where()));\n\t\t\t\t}\n\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && $iterator$.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+$iterator$.where()));\n\t\t\t}\n\t\t}(lineRest);\n\t}\n}\n\nfunction equalInlineArray (table :object, finalKey :string, lineRest :string) :string {\n\tconst inlineArray :any[] = table[finalKey] = [];\n\tsealedInline.add(inlineArray);\n\tconst start :number = $iterator$.mark();\n\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');\n\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\tlineRest = $iterator$.must('Inline Array', start).replace($regexps$.PRE_WHITESPACE, '');\n\t}\n\tif ( lineRest.startsWith(']') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\tconst length = $iterator$.stacks_length;\n\treturn function callee (lineRest) {\n\t\tfor ( ; ; ) {\n\t\t\tlineRest = push(inlineArray, lineRest);\n\t\t\tif ( $iterator$.stacks_length>length ) {\n\t\t\t\t$iterator$.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t//\n\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\tlineRest = $iterator$.must('Inline Array', start).replace($regexps$.PRE_WHITESPACE, '');//\n\t\t\t\t\t}//\n\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = $iterator$.must('Inline Array', start).replace($regexps$.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t}//\n\t\t\t\t\telse {//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\t$iterator$.throws(SyntaxError($iterator$.where()));//\n\t\t\t\t\t}//\n\t\t\t\t\t//\n\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t});\n\t\t\t\treturn lineRest;\n\t\t\t}\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = $iterator$.must('Inline Array', start).replace($regexps$.PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\tlineRest = lineRest.replace($regexps$.SYM_WHITESPACE, '');\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = $iterator$.must('Inline Array', start).replace($regexps$.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace($regexps$.SYM_WHITESPACE, ''); }\n\t\t\t\t$iterator$.throws(SyntaxError($iterator$.where()));\n\t\t\t}\n\t\t}\n\t}(lineRest);\n}\n",
			"import Error from '.Error';\nimport TypeError from '.TypeError';\nimport isBuffer from '.Buffer.isBuffer';\nimport from from '.Buffer.from';\nimport * as $iterator$ from '../$iterator$';\nimport * as $options$ from '../$options$';\nimport Root from '../parse/level-loop';\n\nconst BOM = /^\\uFEFF/;\nconst NON_SCALAR = /[\\uD800-\\uDFFF]/u;// \\u{10FFFF}- > \\uFFFD\n\nexport default function parse (\n\tsourceContent :Buffer | string,\n\tspecificationVersion :0.5 | 0.4,\n\tmultiLineJoiner :string,\n\tuseBigInt :boolean | number = true,\n\txOptions                    = null\n) :object {\n\t$iterator$.could();\n\tif ( isBuffer(sourceContent) ) {\n\t\tconst buffer :Buffer = sourceContent;\n\t\tsourceContent = buffer.toString();\n\t\tif ( !from(buffer).equals(buffer) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any unknown code point.'); }\n\t\tsourceContent = sourceContent.replace(BOM, '');\n\t}\n\tif ( typeof sourceContent!=='string' ) { throw TypeError('TOML.parse(sourceContent)'); }\n\tif ( NON_SCALAR.test(sourceContent) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any uncoupled UCS-4 character code.'); }\n\ttry {\n\t\t$options$.use(specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t\t$iterator$.todo(sourceContent);\n\t\ttry {\n\t\t\tconst rootTable = Root();\n\t\t\t$options$.process();\n\t\t\treturn rootTable;\n\t\t}\n\t\tfinally { $iterator$.done(); }\n\t}\n\tfinally { $options$.clear(); }\n};\n",
			"import TypeError from '.TypeError';\nimport Promise from '.Promise';\nimport parse from './parse/';\n\nexport default function install (\n\treadFile :(path :string) => Buffer | Promise<Buffer>,\n\tspecificationVersion :0.5 | 0.4,\n\tmultiLineJoiner :string,\n\tuseBigInt :boolean | number = true,\n\txOptions                    = null\n) {\n\tif ( typeof readFile!=='function' ) { throw TypeError('TOML.install(readFile)'); }\n\tparse('', specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\trequire.extensions['.toml'] = function require_toml (module, filename :string) :void {\n\t\tconst sourceContent = readFile(filename);\n\t\tmodule.exports = sourceContent instanceof Promise\n\t\t\t? sourceContent.then(onFulfilled)\n\t\t\t: parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t};\n\tfunction onFulfilled (sourceContent :Buffer) :object {\n\t\treturn parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t}\n};\n",
			"import version from './version?text';\nimport parse from './parse/';\nimport install from './install';\n\nconst TOML = {\n\tparse,\n\tinstall,\n\tversion,\n\tget default () { return this; }\n};\n\nexport default TOML;\n"
		],
	"names":
		["$options$.xob","$iterator$.throws","$iterator$.where","$options$.allowLonger","$options$.IntegerMin","$options$.IntegerMax","$iterator$.done","$options$.sFloat","$options$.ctrl7F","$options$.useWhatToJoinMultiLineString","$options$.collect","$options$.TableDepends","$options$.openable","$options$.nonEmptyKey","$regexps$.LITERAL_STRING","$regexps$.MULTI_LINE_LITERAL_STRING","$iterator$.mark","$iterator$.must","$regexps$.BASIC_STRING_exec","$regexps$.MULTI_LINE_BASIC_STRING_exec_0","$regexps$.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","$regexps$.PRE_WHITESPACE","$options$.enableInterpolationString","$iterator$.rest","$iterator$.next","$regexps$.TABLE_DEFINITION_exec_groups","$iterator$.stacks_length","$iterator$.stacks_pop","$regexps$.KEY_VALUE_PAIR_exec_groups","$regexps$.TAG_REST","$iterator$.stacks_push","$regexps$.VALUE_REST","$options$.moreDatetime","$options$.enableNull","$options$.IntegerDepends","$regexps$._VALUE_PAIR","$options$.asStrings","$options$.asTables","$options$.asArrays","$options$.asFloats","$options$.asOffsetDateTimes","$options$.asLocalDateTimes","$options$.asLocalTimes","$options$.asLocalDates","$options$.asBooleans","$options$.asNulls","$options$.asIntegers","$regexps$.SYM_WHITESPACE","$options$.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","$iterator$.stacks_insertBeforeLast","$iterator$.could","$options$.use","$iterator$.todo","$options$.process","$options$.clear"],
	"mappings":
		"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"
}