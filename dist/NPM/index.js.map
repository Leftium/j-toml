{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","iterator$0.ts","../../j-orderify/dist/ESM/j-orderify!meta.js","../../j-orderify/src/export.ts","../../j-orderify/dist/ESM/j-orderify!.js","types/Table.ts","types/Integer.ts","options$0.ts","../../j-regexp/dist/ESM/j-regexp!meta.js","../../j-regexp/src/export.ts","../../j-regexp/dist/ESM/j-regexp!.js","types/Datetime.ts","types/Float.ts","regexps$0.ts","types/String.ts","parse/on-the-spot.ts","parse/x-feature.ts","parse/level-loop.ts","parse/.ts","install.ts","default.ts"],
	"sourcesContent":
		[
			"export default '0.5.88';",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\n//import * as options\\$0 from './options\\$0';\n\n\nconst NONE :string[] = [];\nlet sourceLines :string[] = NONE;\nlet lastLineIndex :number = -1;\nlet lineIndex :number = -1;\n\ntype noop = {\n\t(lineRest :string) :string\n\tprevious? :noop\n};\nfunction noop (lineRest :string) :string { return ''; }\nnoop.previous = noop;\n\nexport let stacks_length = 0;\nlet last :noop = noop;\n\n\nexport function could () :void {\n\tif ( sourceLines!==NONE ) { throw Error('Inner error: parsing in parsing.'); }\n}\n\nconst EOL = /\\r?\\n/;\nexport function todo (source :string) :void {\n\tsourceLines = source.split(EOL);\n\tlastLineIndex = sourceLines.length-1;\n\tlineIndex = -1;\n\tstacks_length = 0;\n\tlast = noop;\n}\n\nexport const next = () :string => sourceLines[++lineIndex];\n\nexport const rest = () :boolean => lineIndex!==lastLineIndex;\n\nexport const mark = () :number => lineIndex;\n\nexport function must (message :string, startIndex :number) :string {\n\tlineIndex===lastLineIndex\n\t&& throws(SyntaxError(message+' is not close until the end of the file, which started from line '+( startIndex+1 )+': '+sourceLines[startIndex]));\n\treturn sourceLines[++lineIndex];\n}\n\nexport const where = () :string => 'line '+( lineIndex+1 )+': '+sourceLines[lineIndex];\n\nexport function done () :void {\n\tsourceLines = NONE;\n\tlast = noop;\n}\n\n\nexport function stacks_pop () :noop {\n\tconst item :noop = last;\n\tlast = <noop>last.previous;\n\t--stacks_length;\n\treturn item;\n}\n\nexport function stacks_push (item :noop) :void {\n\titem.previous = last;\n\tlast = item;\n\t++stacks_length;\n}\n\nexport function stacks_insertBeforeLast (item :noop) {\n\titem.previous = last.previous;\n\tlast.previous = item;\n\t++stacks_length;\n}\n\n\nexport function throws (error :FriendlyError) :never {\n\tif ( sourceLines!==NONE ) {\n\t\terror.lineIndex = lineIndex;\n\t\terror.lineNumber = lineIndex+1;\n\t\t//done();\n\t\t//options\\$0.clear();\n\t}\n\tthrow error;\n}\n\ndeclare class FriendlyError extends Error {\n\tlineIndex? :number;\n\tlineNumber? :number;\n}\n",
			"/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.7.1\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */",
			"import version from './version?text';\nexport { version };\n\nimport WeakMap from '.WeakMap';\nimport Object from '.Object';\nimport create from '.Object.create';\nimport Set from '.Set';\nimport Proxy from '.Proxy';\nimport defineProperty from '.Reflect.defineProperty';\nimport deleteProperty from '.Reflect.deleteProperty';\nimport ownKeys from '.Reflect.ownKeys';\n\ntype ownKey = string | symbol;\ntype ownKeys = ownKey[];\ntype ownKeysKeeper = Set<ownKey>;\nconst ownKeysKeepers :WeakMap<object, ownKeysKeeper> = new WeakMap;\n\nconst handlers :object =\n\t/*#__PURE__*/\n\tObject.assign(create(null), {\n\t\tdefineProperty (target :object, key :ownKey, descriptor :PropertyDescriptor) :boolean {\n\t\t\tif ( defineProperty(target, key, descriptor) ) {\n\t\t\t\t( <ownKeysKeeper>ownKeysKeepers.get(target) ).add(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tdeleteProperty (target :object, key :ownKey) :boolean {\n\t\t\tif ( deleteProperty(target, key) ) {\n\t\t\t\t( <ownKeysKeeper>ownKeysKeepers.get(target) ).delete(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\townKeys (target :object) :ownKeys {\n\t\t\treturn [...<ownKeysKeeper>ownKeysKeepers.get(target)];\n\t\t},\n\t});\n\nexport const orderify = <proxy extends object> (object :proxy) :proxy => {\n\townKeysKeepers.set(object, new Set(<ownKeys>ownKeys(object)));\n\treturn new Proxy(object, handlers);\n};\n\nexport class Orderified extends null {\n\tconstructor () {\n\t\tconst object = create(prototype);\n\t\townKeysKeepers.set(object, new Set);\n\t\treturn new Proxy(object, handlers);\n\t}\n}\n\nconst prototype :object =\n\t/*#__PURE__*/\n\tfunction () {\n\t\tdelete Orderified.prototype.constructor;\n\t\tObject.preventExtensions(Orderified.prototype);\n\t\treturn Orderified.prototype;\n\t}();\n\nexport default {\n\tversion,\n\torderify,\n\tOrderified,\n\tget default () { return this; },\n};\n",
			"import './j-orderify!meta.js';\nexport * from '../../src/export';\nexport { default } from '../../src/export';\n/*¡ @ltd/j-orderify */",
			"import { orderify } from '@ltd/j-orderify';\n\nimport create from '.Object.create';\n\nexport const Table = function Table () :void { } as unknown as { new () :Table };\nexport const OrderedTable = function Table (this :Table) :Table { return orderify(this); } as unknown as { new () :Table };\nexport type Table = { [key :string] :any };\n\nOrderedTable.prototype = Table.prototype = create(null);\n\nexport function isTable (value :Table) :true;\nexport function isTable (value :Exclude<any, Table>) :false;\nexport function isTable (value :any) :boolean { return value instanceof Table; }\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\n\nimport * as iterator$0 from '../iterator$0';\nimport * as options$0 from '../options$0';\n\nconst INTEGER = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)$/;\nconst XOB_INTEGER = /^0(?:x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*)$/;\nconst UNDERSCORES_SIGN = /_|^[-+]/g;\n\nexport const NumberInteger = (literal :string) :number => {\n\tINTEGER.test(literal)\n\t|| /*options\\$0.xob && */XOB_INTEGER.test(literal)\n\t|| iterator$0.throws(SyntaxError('Invalid Integer '+literal+' at '+iterator$0.where()));\n\tconst number = literal.startsWith('-')\n\t\t? -literal.replace(UNDERSCORES_SIGN, '')\n\t\t: +literal.replace(UNDERSCORES_SIGN, '');\n\toptions$0.allowLonger\n\t|| isSafeInteger(number)\n\t|| iterator$0.throws(RangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes '+literal+' meet at '+iterator$0.where()));\n\treturn number;\n};\n\nexport const BigIntInteger = (literal :string) :bigint => {\n\tINTEGER.test(literal)\n\t|| /*options\\$0.xob && */XOB_INTEGER.test(literal)\n\t|| iterator$0.throws(SyntaxError('Invalid Integer '+literal+' at '+iterator$0.where()));\n\tlet bigInt :bigint = BigInt(literal.replace(UNDERSCORES_SIGN, ''));\n\tif ( literal.startsWith('-') ) { bigInt = -bigInt; }\n\toptions$0.allowLonger\n\t|| -9223372036854775808n<=bigInt && bigInt<=9223372036854775807n// ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n\t|| iterator$0.throws(RangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes '+literal+' meet at '+iterator$0.where()));\n\treturn bigInt;\n};\n\nexport const DependInteger = (literal :string) => {\n\tconst bigInt :bigint = BigIntInteger(literal);\n\treturn options$0.IntegerMin<=bigInt && bigInt<=options$0.IntegerMax ? +( bigInt+'' ) : bigInt;\n};\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from './types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from './types/Integer';\nimport * as iterator$0 from './iterator$0';\n\n/* options */\n\nexport let useWhatToJoinMultiLineString :string;\nexport let IntegerDepends :typeof BigIntInteger | typeof NumberInteger | typeof DependInteger;\nexport let IntegerMin :number;\nexport let IntegerMax :number;\n\n/* xOptions */\n\nexport type xOptions = null | {\n\torder? :boolean,\n\tlonger? :boolean,\n\tnull? :boolean,\n\tmulti? :boolean,\n\tins? :boolean,\n\tclose? :boolean,\n\tmix? :boolean,\n\ttag? :null,\n} | {\n\torder? :boolean,\n\tlonger? :boolean,\n\tnull? :boolean,\n\tmulti? :boolean,\n\tins? :boolean,\n\tclose? :boolean,\n\tmix :true,\n\ttag :tag,\n};\nexport let inlineTable :boolean;\nexport let slashEscaping :boolean;\nexport let strictBareKey :boolean;\nexport let moreDatetime :boolean;\nexport let ctrl7F :boolean;\nexport let disallowEmptyKey :boolean;\n//export const xob :boolean = true;\nexport let sFloat :boolean;\nexport let TableDepends :typeof Table | typeof OrderedTable;\nexport let unreopenable :boolean;\nexport let allowLonger :boolean;\nexport let enableNull :boolean;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma :boolean;\nexport let enableInterpolationString :boolean;\ntype as = (array :any[]) => any[];\nexport let\n\tasNulls :as,\n\tasStrings :as,\n\tasTables :as,\n\tasArrays :as,\n\tasBooleans :as,\n\tasFloats :as,\n\tasIntegers :as,\n\tasOffsetDateTimes :as,\n\tasLocalDateTimes :as,\n\tasLocalDates :as,\n\tasLocalTimes :as;\nconst arrayTypes :WeakMap<any[], as> = new WeakMap;\nlet As :( () => as ) | null = () => function as (array :any[]) :any[] {\n\tif ( arrayTypes.has(array) ) {\n\t\tarrayTypes.get(array)===as\n\t\t|| iterator$0.throws(TypeError('Types in array must be same. Check '+iterator$0.where()));\n\t}\n\telse { arrayTypes.set(array, as); }\n\treturn array;\n};\nexport const\n\tasInlineArrayOfNulls :as = As(),\n\tasInlineArrayOfStrings :as = As(),\n\tasInlineArrayOfTables :as = As(),\n\tasInlineArrayOfArrays :as = As(),\n\tasInlineArrayOfBooleans :as = As(),\n\tasInlineArrayOfFloats :as = As(),\n\tasInlineArrayOfIntegers :as = As(),\n\tasInlineArrayOfOffsetDateTimes :as = As(),\n\tasInlineArrayOfLocalDateTimes :as = As(),\n\tasInlineArrayOfLocalDates :as = As(),\n\tasInlineArrayOfLocalTimes :as = As();\nAs = null;\n\n/* xOptions.mix */\n\nexport const unType :as = (array :any[]) :any[] => array;\n\n/* xOptions.tag */\n\nlet processor :tag | null;\n\ntype tag = (each :each) => any;\ntype each =\n\t{ table :Table, key :string, tag :string } |\n\t{ array :any[], index :number, tag :string } |\n\t{ table :Table, key :string, array :Table[], index :number, tag :string };\nlet collection :each[] = [];\nfunction collect_on (each :each) :void { collection.push(each); }\nfunction collect_off (each :each) :never { throw iterator$0.throws(SyntaxError(iterator$0.where())); }\nexport let collect :typeof collect_off | typeof collect_on = collect_off;\nexport function process () {\n\tlet index = collection.length;\n\tif ( index ) {\n\t\titerator$0.done();\n\t\tconst process = <tag>processor;\n\t\tconst queue = collection;\n\t\tprocessor = null;\n\t\tcollection = [];\n\t\twhile ( index-- ) { process(<each>queue.pop()); }\n\t}\n}\n\n/* use & clear */\n\nexport function clear () :void {\n\tprocessor = null;\n\tcollection.length = 0;\n}\n\nexport function use (specificationVersion :unknown, multiLineJoiner :unknown, useBigInt :unknown, xOptions :Exclude<any, undefined>) :void {\n\t\n\tif ( specificationVersion===0.5 ) {\n\t\tmoreDatetime = ctrl7F = sFloat = strictBareKey = inlineTable = true;\n\t\tdisallowEmptyKey = slashEscaping = false;\n\t}\n\telse if ( specificationVersion===0.4 ) {\n\t\tdisallowEmptyKey = strictBareKey = inlineTable = true;\n\t\tmoreDatetime = ctrl7F = sFloat = slashEscaping = false;\n\t}\n\telse if ( specificationVersion===0.3 ) {\n\t\tdisallowEmptyKey = slashEscaping = true;\n\t\tmoreDatetime = ctrl7F = sFloat = strictBareKey = inlineTable = false;\n\t}\n\telse { throw Error('TOML.parse(,specificationVersion)'); }\n\t\n\tif ( typeof multiLineJoiner==='string' ) { useWhatToJoinMultiLineString = multiLineJoiner; }\n\telse { throw TypeError('TOML.parse(,,multiLineJoiner)'); }\n\t\n\tif ( useBigInt===true ) { IntegerDepends = BigIntInteger; }\n\telse if ( useBigInt===false ) { IntegerDepends = NumberInteger; }\n\telse {\n\t\tif ( typeof useBigInt!=='number' ) { throw TypeError('TOML.parse(,,,useBigInt)'); }\n\t\tif ( !isSafeInteger(useBigInt) ) { throw RangeError('TOML.parse(,,,useBigInt)'); }\n\t\tIntegerDepends = DependInteger;\n\t\tif ( useBigInt>=0 ) { IntegerMin = -( IntegerMax = useBigInt ); }\n\t\telse { IntegerMax = -( IntegerMin = useBigInt )-1; }\n\t}\n\t\n\tlet typify :boolean;\n\t\n\tif ( xOptions===null ) {\n\t\tTableDepends = Table;\n\t\tallowLonger = enableNull = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = unreopenable = false;\n\t\tprocessor = null;\n\t\ttypify = true;\n\t}\n\telse {\n\t\tTableDepends = xOptions.order ? OrderedTable : Table;\n\t\tallowLonger = !!xOptions.longer;\n\t\tenableNull = !!xOptions.null;\n\t\tallowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!xOptions.multi;\n\t\tenableInterpolationString = !!xOptions.ins;\n\t\tunreopenable = !!xOptions.close;\n\t\ttypify = !xOptions.mix;\n\t\tprocessor = xOptions.tag || null;\n\t\tif ( processor ) {\n\t\t\tif ( typeof processor!=='function' ) { throw TypeError('TOML.parse(,,,,xOptions.tag)'); }\n\t\t\tif ( typify ) { throw Error('TOML.parse(,,,,xOptions) xOptions.tag needs xOptions.mix to be true'); }\n\t\t\tcollect = collect_on;\n\t\t}\n\t\telse { collect = collect_off; }\n\t}\n\t\n\tif ( typify ) {\n\t\tasNulls = asInlineArrayOfNulls;\n\t\tasStrings = asInlineArrayOfStrings;\n\t\tasTables = asInlineArrayOfTables;\n\t\tasArrays = asInlineArrayOfArrays;\n\t\tasBooleans = asInlineArrayOfBooleans;\n\t\tasFloats = asInlineArrayOfFloats;\n\t\tasIntegers = asInlineArrayOfIntegers;\n\t\tasOffsetDateTimes = asInlineArrayOfOffsetDateTimes;\n\t\tasLocalDateTimes = asInlineArrayOfLocalDateTimes;\n\t\tasLocalDates = asInlineArrayOfLocalDates;\n\t\tasLocalTimes = asInlineArrayOfLocalTimes;\n\t}\n\telse {\n\t\tasNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = unType;\n\t}\n\t\n}\n",
			"/*!\n * 模块名称：@ltd/j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。\n   　　　　　More readable way for creating RegExp.\n * 模块版本：1.1.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */",
			"import version from './version?text';\nexport { version };\n\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw :ReadonlyArray<string>, substitutions :( string | RegExp )[]) :string {\n\tvar source :string = raw[0];\n\tfor ( var length :number = substitutions.length, index :number = 0; index<length; ) {\n\t\tvar substitution :string | RegExp = substitutions[index];\n\t\tsource += ( substitution instanceof RegExp ? substitution.source : substitution )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nexport function newRegExp (template :TemplateStringsArray, ...substitutions :( string | RegExp )[]) :RegExp;\nexport function newRegExp (template :TemplateStringsArray) :RegExp {\n\treturn RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\n\nexport function NewRegExp (flags :string) :typeof newRegExp {\n\treturn function newRegExp (template :TemplateStringsArray) :RegExp {\n\t\treturn RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t};\n}\n\nexport default (\n\t/*#__PURE__*/\n\tfunction () {\n\t\tvar exports :exports = {\n\t\t\tnewRegExp: newRegExp,\n\t\t\tNewRegExp: NewRegExp,\n\t\t\tversion: version\n\t\t};\n\t\treturn exports['default'] = exports;\n\t\ttype exports = {\n\t\t\tnewRegExp :typeof newRegExp,\n\t\t\tNewRegExp :typeof NewRegExp,\n\t\t\tversion :typeof version,\n\t\t\tdefault? :exports,\n\t\t};\n\t}()\n);\n",
			"import './j-regexp!meta.js';\nexport * from '../../src/export';\nexport { default } from '../../src/export';\n/*¡ @ltd/j-regexp */",
			"import { newRegExp } from '@ltd/j-regexp';\n\nimport SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport WeakMap from '.WeakMap';\nimport Date from '.Date';\n\nimport * as iterator$0 from '../iterator$0';\n\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\n\nconst YMD = newRegExp`\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t(?:0[13578]|1[02])-${_31_}\n\t|\n\t\t(?:0[469]|11)-${_30_}\n\t|\n\t\t02-${_29_}\n\t)`;\n\nconst HMS_ = newRegExp`\n\t${_23_}:${_59_}:${_59_}(?:\\.\\d+)?`;\n\nexport const OFFSET = /(?:Z|[+-]\\d\\d:\\d\\d)$/;\n\nexport const OFFSET_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t${OFFSET}`;\n\nexport const LOCAL_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t$`;\n\nexport const LOCAL_DATE = newRegExp`\n\t^\n\t${YMD}\n\t$`;\n\nexport const LOCAL_TIME = newRegExp`\n\t^\n\t${HMS_}\n\t$`;\n\nconst literal_cache = new WeakMap;\nconst value_cache = new WeakMap;\n\nclass Datetime extends Date {\n\tconstructor (expression :string, literal :string) {\n\t\tsuper(expression);\n\t\tliteral_cache.set(this, literal);\n\t\tvalue_cache.set(this, this.getTime());\n\t}\n\t// Date.prototype.toJSON => toISOString\n\ttoISOString (this :Datetime) :string {\n\t\tif ( this.getTime()===value_cache.get(this) ) { return literal_cache.get(this); }\n\t\tthrow Error('Datetime value has been modified.');\n\t}\n}\n\nexport class OffsetDateTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tOFFSET_DATETIME.test(literal)\n\t\t|| iterator$0.throws(SyntaxError('Invalid Offset Date-Time '+literal+' at '+iterator$0.where()));\n\t\tsuper(literal.replace(' ', 'T'), literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index).replace(OFFSET, '') : '';\n\t}\n}\n\nexport class LocalDateTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_DATETIME.test(literal)\n\t\t|| iterator$0.throws(SyntaxError('Invalid Local Date-Time '+literal+' at '+iterator$0.where()));\n\t\tsuper(literal.replace(' ', 'T')+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}\n\nexport class LocalDate extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_DATE.test(literal)\n\t\t|| iterator$0.throws(SyntaxError('Invalid Local Date '+literal+' at '+iterator$0.where()));\n\t\tsuper(literal+'T00:00:00.000Z', literal);\n\t}\n\tget '.' () { return ''; }\n}\n\nexport class LocalTime extends Datetime {\n\tconstructor (literal :string) {\n\t\tLOCAL_TIME.test(literal)\n\t\t|| iterator$0.throws(SyntaxError('Invalid Local Time '+literal+' at '+iterator$0.where()));\n\t\tsuper('1970-01-01T'+literal+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index :number = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport isFinite from '.isFinite';\n//import Infinity from '.Infinity';\n//import NaN from '.NaN';\n\nimport * as options$0 from '../options$0';\nimport * as iterator$0 from '../iterator$0';\n\nconst FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nconst FLOAT_NOT_INTEGER = /[.eE]/;\nconst UNDERSCORES = /_/g;\n\nexport const Float = (literal :string) :number => {\n\tif ( FLOAT.test(literal) && FLOAT_NOT_INTEGER.test(literal) ) {\n\t\tif ( options$0.sFloat ) { return +literal.replace(UNDERSCORES, ''); }\n\t\telse {\n\t\t\tconst number = +literal.replace(UNDERSCORES, '');\n\t\t\tisFinite(number) || iterator$0.throws(RangeError('Float can not be as big as Infinity before TOML v0.5, like '+literal+' at '+iterator$0.where()));\n\t\t\treturn number;\n\t\t}\n\t}\n\t//if ( options\\$0.sFloat ) {\n\t//\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n\t//\tif ( literal==='-inf' ) { return -Infinity; }\n\t//\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n\t//}\n\tthrow iterator$0.throws(SyntaxError('Invalid Float '+literal+' at '+iterator$0.where()));\n};\n",
			"import { newRegExp } from '@ltd/j-regexp';\n\nimport SyntaxError from '.SyntaxError';\n\nimport * as options$0 from './options$0';\nimport * as iterator$0 from './iterator$0';\n\n/* nested (readable) */\n\nconst Whitespace = /[ \\t]/;\n\nexport const PRE_WHITESPACE = newRegExp`\n\t^${Whitespace}+`;\n\nexport const VALUE_REST = newRegExp`\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n\nexport const LITERAL_STRING = newRegExp`\n\t^\n\t'([^']*)'\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const MULTI_LINE_LITERAL_STRING = newRegExp`\n\t^\n\t([^]*?)\n\t'''\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const SYM_WHITESPACE = newRegExp`\n\t^\n\t[^]\n\t${Whitespace}*`;\n\n\nconst Tag = /[^<>\\\\\"'`\\r\\n\\u2028\\u2029]+/;\n\nexport const KEY_VALUE_PAIR = newRegExp`\n\t^\n\t${Whitespace}*\n\t(?:\n\t\t<(${Tag})>\n\t\t${Whitespace}*\n\t)?\n\t=\n\t${Whitespace}*\n\t(?:\n\t\t<(${Tag})>\n\t\t${Whitespace}*\n\t)?\n\t(\n\t\t[^ \\t#]\n\t\t[^]*\n\t)\n\t$`;\n\nexport const _VALUE_PAIR = newRegExp`\n\t^\n\t<(${Tag})>\n\t${Whitespace}*\n\t([^ \\t#][^]*)\n\t$`;\n\nexport const TAG_REST = newRegExp`\n\t^\n\t<(${Tag})>\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n\n/* optimized (avoid overflow or lost) */\n\nconst MULTI_LINE_BASIC_STRING :RegExp = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0 (_ :string) :string {\n\tfor ( let _0 :string = ''; ; ) {\n\t\tif ( _==='' ) { return _0; }\n\t\tconst $ :RegExpExecArray | null = MULTI_LINE_BASIC_STRING.exec(_);\n\t\tif ( $===null ) { return _0; }\n\t\t_0 += $[0];\n\t\t_ = _.slice($[0].length);\n\t}\n}\n\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER :RegExp = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESS :RegExp = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER :RegExp = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\/]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test (_ :string) :boolean {\n\treturn _.replace(\n\t\toptions$0.ctrl7F ? ESCAPED_EXCLUDE_CONTROL_CHARACTER :\n\t\t\toptions$0.slashEscaping ? ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER :\n\t\t\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER_LESS,\n\t\t''\n\t)==='';\n}\n\nconst BASIC_STRING :RegExp = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nconst BASIC_STRING_LESS :RegExp = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nconst BASIC_STRING_LESSER :RegExp = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\/]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec (_2 :string) :{ 1 :string, 2 :string } {\n\tconst basic_string =\n\t\toptions$0.ctrl7F ? BASIC_STRING :\n\t\t\toptions$0.slashEscaping ? BASIC_STRING_LESSER :\n\t\t\t\tBASIC_STRING_LESS;\n\t_2 = _2.slice(1);\n\tfor ( let _1 :string = ''; ; ) {\n\t\tconst $ :RegExpExecArray | null = basic_string.exec(_2);\n\t\tif ( $===null ) {\n\t\t\t_2.startsWith('\"') || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\treturn { 1: _1, 2: _2.replace(SYM_WHITESPACE, '') };\n\t\t}\n\t\t_1 += $[0];\n\t\t_2 = _2.slice($[0].length);\n\t}\n}\n\nconst BARE_KEY_STRICT :RegExp = /^[\\w-]+/;\nconst BARE_KEY_FREE :RegExp = /^[^ \\t#=[\\]'\".]+(?:[ \\t]+[^ \\t#=[\\]'\".]+)*/;\nconst LITERAL_KEY :RegExp = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst LITERAL_KEY_LESSER :RegExp = /^'[^'\\x00-\\x08\\x0B-\\x1F]*'/;\nconst DOT_KEY :RegExp = /^[ \\t]*\\.[ \\t]*/;\n\nexport function TABLE_DEFINITION_exec_groups (_ :string) :{ $_asArrayItem$$ :boolean, keys :string, tagInner :string, $$asArrayItem$_ :boolean, tagOuter :string } {\n\tconst $_asArrayItem$$ :boolean = _.charAt(1)==='[';\n\t_ = _.slice($_asArrayItem$$ ? 2 : 1).replace(PRE_WHITESPACE, '');\n\tconst keys :string = getKeys(_);\n\t_ = _.slice(keys.length).replace(PRE_WHITESPACE, '');\n\tlet tagInner :string = '';\n\tif ( _.startsWith('<') ) { ( { 1: tagInner, 2: _ } = TAG_REST.exec(_) || iterator$0.throws(SyntaxError(iterator$0.where())) ); }\n\t_.startsWith(']') || iterator$0.throws(SyntaxError(iterator$0.where()));\n\tconst $$asArrayItem$_ :boolean = _.charAt(1)===']';\n\t_ = _.slice($$asArrayItem$_ ? 2 : 1).replace(PRE_WHITESPACE, '');\n\tlet tagOuter :string = '';\n\tif ( _.startsWith('<') ) { ( { 1: tagOuter, 2: _ } = TAG_REST.exec(_) || iterator$0.throws(SyntaxError(iterator$0.where())) ); }\n\t_==='' || _.startsWith('#') || iterator$0.throws(SyntaxError(iterator$0.where()));\n\treturn { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter };\n}\n\nexport function KEY_VALUE_PAIR_exec_groups (_ :string) :{ left :string, tagLeft :string, tagRight :string, right :string } {\n\tconst _1 :string = getKeys(_);\n\tconst $ :RegExpExecArray = KEY_VALUE_PAIR.exec(_.slice(_1.length)) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\treturn { left: _1, tagLeft: $[1] || '', tagRight: $[2] || '', right: $[3] };\n}\n\nfunction getKeys (_ :string) :string {\n\tconst literal_key = options$0.ctrl7F ? LITERAL_KEY : LITERAL_KEY_LESSER;\n\tfor ( let keys :string = ''; ; ) {\n\t\tif ( _.startsWith('\"') ) {\n\t\t\t_ = _.slice(1);\n\t\t\tfor ( let key :string = '\"'; ; ) {\n\t\t\t\tconst $ :RegExpExecArray | null = BASIC_STRING.exec(_);\n\t\t\t\tif ( $===null ) {\n\t\t\t\t\t_.startsWith('\"') || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\t\t\t_ = _.slice(1);\n\t\t\t\t\tkeys += key+'\"';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_ = _.slice($[0].length);\n\t\t\t\tkey += $[0];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst key :string = ( ( _.startsWith('\\'') ? literal_key : options$0.strictBareKey ? BARE_KEY_STRICT : BARE_KEY_FREE ).exec(_) || iterator$0.throws(SyntaxError(iterator$0.where())) )[0];\n\t\t\t_ = _.slice(key.length);\n\t\t\tkeys += key;\n\t\t}\n\t\tconst $ :RegExpExecArray | null = DOT_KEY.exec(_);\n\t\tif ( $===null ) { return keys; }\n\t\t_ = _.slice($[0].length);\n\t\tkeys += $[0];\n\t}\n}\n",
			"import RangeError from '.RangeError';\nimport parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\n\nimport * as iterator$0 from '../iterator$0';\nimport * as options$0 from '../options$0';\n\nconst ESCAPE_ALIAS = { b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r', '\"': '\"', '/': '/', '\\\\': '\\\\' };\n\nconst ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"btnfr/])|u(.{4})|U(.{8}))/g;\nconst ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?: *(\\n)[ \\n]*|([\\\\\"btnfr/])|u([^]{4})|U([^]{8}))/g;\n\nconst unEscapeSingleLine = (\n\tmatch :string,\n\tp1 :keyof typeof ESCAPE_ALIAS | undefined,\n\tp2 :string | undefined,\n\tp3 :string | undefined\n) :string => {\n\tif ( p1 ) { return ESCAPE_ALIAS[p1]; }\n\tconst codePoint :number = parseInt(p2 || <string>p3, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& iterator$0.throws(RangeError('Invalid Unicode Scalar '+( p2 ? '\\\\u'+p2 : '\\\\U'+p3 )+' at '+iterator$0.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nconst unEscapeMultiLine = (\n\tmatch :string,\n\tp1 :'\\n' | undefined,\n\tp2 :keyof typeof ESCAPE_ALIAS | undefined,\n\tp3 :string | undefined,\n\tp4 :string | undefined\n) :string => {\n\tif ( match==='\\n' ) { return options$0.useWhatToJoinMultiLineString; }\n\tif ( p1 ) { return ''; }\n\tif ( p2 ) { return ESCAPE_ALIAS[p2]; }\n\tconst codePoint :number = parseInt(p3 || <string>p4, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& iterator$0.throws(RangeError('Invalid Unicode Scalar '+( p3 ? '\\\\u'+p3 : '\\\\U'+p4 )+' at '+iterator$0.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nexport const BasicString = (literal :string) :string => literal.replace(ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\n\nexport const MultiLineBasicString = (literal :string) :string => literal.replace(ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);\n",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport isArray from '.Array.isArray';\nimport WeakSet from '.WeakSet';\nimport * as iterator$0 from '../iterator$0';\nimport { Table, isTable } from '../types/Table';\nimport { BasicString, MultiLineBasicString } from '../types/String';\nimport * as options$0 from '../options$0';\nimport * as regexps$0 from '../regexps$0';\n\nexport const sealedInline = new WeakSet;\nconst openTables = new WeakSet;\nconst reopenedTables = new WeakSet;\n\nconst KEYS_STRICT :RegExp = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\nconst KEYS_FREE :RegExp = /[^ \\t#=[\\]'\".]+(?:[ \\t]+[^ \\t#=[\\]'\".]+)*|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\n\nexport function appendTable (table :Table, key_key :string, asArrayItem :boolean, tag :string) :Table {\n\tconst leadingKeys :string[] = parseKeys(key_key);\n\tconst finalKey :string = <string>leadingKeys.pop();\n\ttable = prepareTable(table, leadingKeys);\n\tlet lastTable :Table;\n\tif ( asArrayItem ) {\n\t\tlet arrayOfTables :Table[];\n\t\tif ( finalKey in table ) { sealedInline.has(arrayOfTables = table[finalKey]) && iterator$0.throws(Error('Trying to push Table to non-ArrayOfTables value at '+iterator$0.where())); }\n\t\telse { arrayOfTables = table[finalKey] = []; }\n\t\ttag && options$0.collect({ table, key: finalKey, array: arrayOfTables, index: arrayOfTables.length, tag });\n\t\tarrayOfTables.push(lastTable = new options$0.TableDepends);\n\t}\n\telse {\n\t\tif ( finalKey in table ) {\n\t\t\tif ( options$0.unreopenable || !openTables.has(lastTable = table[finalKey]) || reopenedTables.has(lastTable) ) { throw iterator$0.throws(Error('Duplicate Table definition at '+iterator$0.where())); }\n\t\t\topenTables.delete(lastTable);\n\t\t}\n\t\telse {\n\t\t\ttable[finalKey] = lastTable = new options$0.TableDepends;\n\t\t\toptions$0.unreopenable || reopenedTables.add(lastTable);\n\t\t}\n\t\ttag && options$0.collect({ table, key: finalKey, tag });\n\t}\n\treturn lastTable;\n}\n\nexport function parseKeys (key_key :string) :string[] {\n\tconst keys :RegExpMatchArray = <RegExpMatchArray>key_key.match(options$0.strictBareKey ? KEYS_STRICT : KEYS_FREE);\n\tfor ( let index :number = keys.length; index--; ) {\n\t\tconst key :string = keys[index];\n\t\tif ( key.startsWith('\\'') ) { keys[index] = key.slice(1, -1); }\n\t\telse if ( key.startsWith('\"') ) { keys[index] = BasicString(key.slice(1, -1)); }\n\t}\n\tif ( options$0.disallowEmptyKey ) {\n\t\tfor ( let index :number = keys.length; index--; ) {\n\t\t\tkeys[index] || iterator$0.throws(SyntaxError('Empty key is not allowed before TOML v0.5, which at '+iterator$0.where()));\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction prepareTable (table :Table, keys :string[]) :Table {\n\tconst { length } :string[] = keys;\n\tlet index :number = 0;\n\twhile ( index<length ) {\n\t\tconst key :string = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tif ( isTable(table) ) {\n\t\t\t\tsealedInline.has(table) && iterator$0.throws(Error('Trying to define table through static Inline Object at '+iterator$0.where()));\n\t\t\t}\n\t\t\telse if ( isArray(table) ) {\n\t\t\t\tsealedInline.has(table) && iterator$0.throws(Error('Trying to append value to static Inline Array at '+iterator$0.where()));\n\t\t\t\t// @ts-ignore\n\t\t\t\ttable = table[table.length-1];\n\t\t\t}\n\t\t\telse { iterator$0.throws(Error('Trying to define table through non-Table value at '+iterator$0.where())); }\n\t\t}\n\t\telse {\n\t\t\topenTables.add(table = table[key] = new options$0.TableDepends);\n\t\t\twhile ( index<length ) { openTables.add(table = table[keys[index++]] = new options$0.TableDepends); }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function prepareInlineTable (table :Table, keys :string[]) :Table {\n\tconst { length } :string[] = keys;\n\tlet index :number = 0;\n\twhile ( index<length ) {\n\t\tconst key :string = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tisTable(table) || iterator$0.throws(Error('Trying to assign property through non-Table value at '+iterator$0.where()));\n\t\t\tsealedInline.has(table) && iterator$0.throws(Error('Trying to assign property through static Inline Object at '+iterator$0.where()));\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new options$0.TableDepends;\n\t\t\twhile ( index<length ) { table = table[keys[index++]] = new options$0.TableDepends; }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function assignLiteralString (table :Table, finalKey :string, literal :string) :string {\n\tlet $ :RegExpExecArray | null;\n\tif ( literal.charAt(1)!=='\\'' || literal.charAt(2)!=='\\'' ) {\n\t\t$ = regexps$0.LITERAL_STRING.exec(literal) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\t$ = regexps$0.MULTI_LINE_LITERAL_STRING.exec(literal);\n\tif ( $ ) {\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tif ( literal ) {\n\t\tcheckLiteralString(literal);\n\t\tliteral += options$0.useWhatToJoinMultiLineString;\n\t}\n\tconst start :number = iterator$0.mark();\n\tfor ( ; ; ) {\n\t\tconst line :string = iterator$0.must('Literal String', start);\n\t\t$ = regexps$0.MULTI_LINE_LITERAL_STRING.exec(line);\n\t\tif ( $ ) {\n\t\t\ttable[finalKey] = literal+checkLiteralString($[1]);\n\t\t\treturn $[2];\n\t\t}\n\t\tliteral += line+options$0.useWhatToJoinMultiLineString;\n\t}\n}\n\nconst CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nconst CONTROL_CHARACTER_EXCLUDE_TAB_LESSER = /[\\x00-\\x08\\x0B-\\x1F]/;\nfunction checkLiteralString (literal :string) :string {\n\t( options$0.ctrl7F ? CONTROL_CHARACTER_EXCLUDE_TAB : CONTROL_CHARACTER_EXCLUDE_TAB_LESSER ).test(literal) && iterator$0.throws(SyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+iterator$0.where()));\n\treturn literal;\n}\n\nexport function assignBasicString (table :Table, finalKey :string, literal :string) :string {\n\tif ( literal.charAt(1)!=='\"' || literal.charAt(2)!=='\"' ) {\n\t\tconst $ = regexps$0.BASIC_STRING_exec(literal);\n\t\ttable[finalKey] = BasicString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\tconst $ = regexps$0.MULTI_LINE_BASIC_STRING_exec_0(literal);\n\tif ( literal.startsWith('\"\"\"', $.length) ) {\n\t\tregexps$0.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\ttable[finalKey] = MultiLineBasicString($);\n\t\treturn literal.slice($.length+3).replace(regexps$0.PRE_WHITESPACE, '');\n\t}\n\tif ( literal ) {\n\t\tliteral += '\\n';\n\t\tregexps$0.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t}\n\tconst start :number = iterator$0.mark();\n\tfor ( ; ; ) {\n\t\tlet line :string = iterator$0.must('Basic String', start);\n\t\tconst $ = regexps$0.MULTI_LINE_BASIC_STRING_exec_0(line);\n\t\tif ( line.startsWith('\"\"\"', $.length) ) {\n\t\t\tregexps$0.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\ttable[finalKey] = MultiLineBasicString(literal+$);\n\t\t\treturn line.slice($.length+3).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t}\n\t\tline += '\\n';\n\t\tregexps$0.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\tliteral += line;\n\t}\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport * as iterator$0 from '../iterator$0';\nimport * as options$0 from '../options$0';\nimport * as regexps$0 from '../regexps$0';\nimport { Table } from '../types/Table';\n\nconst DELIMITER_CHECK = /[^`]/;\n\nexport function assignInterpolationString (table :Table, finalKey :string, delimiter :string) :string {\n\toptions$0.enableInterpolationString || iterator$0.throws(SyntaxError(iterator$0.where()));\n\tDELIMITER_CHECK.test(delimiter) && iterator$0.throws(SyntaxError('Interpolation String opening tag incorrect at '+iterator$0.where()));\n\tlet string :string;\n\tlet lineRest :string;\n\t{\n\t\tconst literals :string[] = [];\n\t\tfor ( const start :number = iterator$0.mark(); ; ) {\n\t\t\tconst literal :string = iterator$0.must('Interpolation String', start);\n\t\t\tif ( literal.startsWith(delimiter) ) {\n\t\t\t\tlineRest = literal.slice(delimiter.length).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tliterals.push(literal);\n\t\t}\n\t\tstring = literals.join('\\n');\n\t}\n\ttable[finalKey] = string;\n\treturn lineRest;\n}\n",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport * as iterator$0 from '../iterator$0';\nimport { Table } from '../types/Table';\nimport { OffsetDateTime, LocalDateTime, LocalDate, LocalTime, OFFSET } from '../types/Datetime';\nimport { Float } from '../types/Float';\nimport * as options$0 from '../options$0';\nimport * as regexps$0 from '../regexps$0';\nimport { sealedInline, appendTable, parseKeys, prepareInlineTable, assignLiteralString, assignBasicString } from './on-the-spot';\nimport { assignInterpolationString } from './x-feature';\n\nexport default function Root () {\n\tconst rootTable :Table = new options$0.TableDepends;\n\tlet lastSectionTable :Table = rootTable;\n\twhile ( iterator$0.rest() ) {\n\t\tconst line :string = iterator$0.next().replace(regexps$0.PRE_WHITESPACE, '');\n\t\tif ( line==='' ) { }\n\t\telse if ( line.startsWith('#') ) { }\n\t\telse if ( line.startsWith('[') ) {\n\t\t\tconst { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter } = regexps$0.TABLE_DEFINITION_exec_groups(line);\n\t\t\t$_asArrayItem$$===$$asArrayItem$_ || iterator$0.throws(SyntaxError('Square brackets of table define statement not match at '+iterator$0.where()));\n\t\t\ttagInner && tagOuter && iterator$0.throws(SyntaxError('Tag for table define statement can not both in and out, which at '+iterator$0.where()));\n\t\t\tlastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, tagOuter || tagInner);\n\t\t}\n\t\telse {\n\t\t\tlet rest :string = assign(lastSectionTable, line);\n\t\t\twhile ( iterator$0.stacks_length ) { rest = iterator$0.stacks_pop()(rest); }\n\t\t\trest==='' || rest.startsWith('#') || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t}\n\t}\n\treturn rootTable;\n};\n\nfunction assign (lastInlineTable :Table, lineRest :string) :string {\n\tlet left :string;\n\tlet tagLeft :string;\n\tlet tagRight :string;\n\t( { left, tagLeft, tagRight, right: lineRest } = regexps$0.KEY_VALUE_PAIR_exec_groups(lineRest) );\n\tconst leadingKeys :string[] = parseKeys(left);\n\tconst finalKey :string = <string>leadingKeys.pop();\n\tconst table :Table = prepareInlineTable(lastInlineTable, leadingKeys);\n\tfinalKey in table && iterator$0.throws(Error('Duplicate property definition at '+iterator$0.where()));\n\ttagLeft && options$0.collect({ table, key: finalKey, tag: tagLeft });\n\ttagRight && options$0.collect({ table, key: finalKey, tag: tagRight });\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\ttagRight && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\ttagRight && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\ttagRight && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\toptions$0.inlineTable || iterator$0.throws(SyntaxError('Inline table is not allowed before TOML v0.4, which at '+iterator$0.where()));\n\t\t\titerator$0.stacks_push((lineRest :string) :string => equalInlineTable(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\titerator$0.stacks_push((lineRest :string) :string => equalInlineArray(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal :string;\n\t( { 1: literal, 2: lineRest } = regexps$0.VALUE_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\tif ( lineRest.startsWith('<') ) {\n\t\ttagRight && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t( { 1: tagRight, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\toptions$0.collect({ table, key: finalKey, tag: tagRight });\n\t}\n\tif ( options$0.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\ttable[finalKey] = Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\ttable[finalKey] = -Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\ttable[finalKey] = NaN;\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( OFFSET.test(literal) ) {\n\t\t\t\ttable[finalKey] = new OffsetDateTime(literal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\t\ttable[finalKey] = new LocalDateTime(literal);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\ttable[finalKey] = new LocalTime(literal);\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\ttable[finalKey] = new LocalDate(literal);\n\t\treturn lineRest;\n\t}\n\ttable[finalKey] =\n\t\tliteral==='true' ? true : literal==='false' ? false :\n\t\t\t\tliteral.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ? Float(literal) :\n\t\t\t\t\toptions$0.enableNull && literal==='null' ? null :\n\t\t\t\t\t\toptions$0.IntegerDepends(literal);\n\treturn lineRest;\n}\n\nfunction push (lastArray :any[], lineRest :string) :string {\n\tlet alreadyBefore = lineRest.startsWith('<');\n\tlet tag :string;\n\tif ( alreadyBefore ) {\n\t\t( { 1: tag, 2: lineRest } = regexps$0._VALUE_PAIR.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\toptions$0.collect({ array: lastArray, index: lastArray.length, tag });\n\t}\n\tconst lastIndex :string = ''+lastArray.length;\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString(options$0.asStrings(lastArray), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\talreadyBefore && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ array: lastArray, index: lastArray.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(options$0.asStrings(lastArray), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\talreadyBefore && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ array: lastArray, index: lastArray.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(options$0.asStrings(lastArray), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('<') ) {\n\t\t\t\talreadyBefore && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\t\t\toptions$0.collect({ array: lastArray, index: lastArray.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\toptions$0.inlineTable || iterator$0.throws(SyntaxError('Inline table is not allowed before TOML v0.4, which at '+iterator$0.where()));\n\t\t\titerator$0.stacks_push(lineRest => equalInlineTable(options$0.asTables(lastArray), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\titerator$0.stacks_push(lineRest => equalInlineArray(options$0.asArrays(lastArray), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal :string;\n\t( { 1: literal, 2: lineRest } = regexps$0.VALUE_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\tif ( lineRest.startsWith('<') ) {\n\t\talreadyBefore && iterator$0.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator$0.where()));\n\t\t( { 1: tag, 2: lineRest } = regexps$0.TAG_REST.exec(lineRest) || iterator$0.throws(SyntaxError(iterator$0.where())) );\n\t\toptions$0.collect({ array: lastArray, index: lastArray.length, tag });\n\t}\n\tif ( options$0.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\toptions$0.asFloats(lastArray).push(Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\toptions$0.asFloats(lastArray).push(-Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\toptions$0.asFloats(lastArray).push(NaN);\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( OFFSET.test(literal) ) {\n\t\t\t\toptions$0.asOffsetDateTimes(lastArray).push(new OffsetDateTime(literal));\n\t\t\t}\n\t\t\telse {\n\t\t\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\t\toptions$0.asLocalDateTimes(lastArray).push(new LocalDateTime(literal));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\toptions$0.asLocalTimes(lastArray).push(new LocalTime(literal));\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\toptions$0.moreDatetime || iterator$0.throws(SyntaxError(iterator$0.where()));\n\t\toptions$0.asLocalDates(lastArray).push(new LocalDate(literal));\n\t\treturn lineRest;\n\t}\n\tif ( literal==='true' ) { options$0.asBooleans(lastArray).push(true); }\n\telse if ( literal==='false' ) { options$0.asBooleans(lastArray).push(false); }\n\telse if ( literal.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ) {\n\t\toptions$0.asFloats(lastArray).push(Float(literal));\n\t}\n\telse if ( options$0.enableNull && literal==='null' ) { options$0.asNulls(lastArray).push(null); }\n\telse { options$0.asIntegers(lastArray).push(options$0.IntegerDepends(literal)); }\n\treturn lineRest;\n}\n\nfunction equalInlineTable (table :Table, finalKey :string, lineRest :string) :string {\n\tconst inlineTable :Table = table[finalKey] = new options$0.TableDepends;\n\tsealedInline.add(inlineTable);\n\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');\n\tif ( options$0.allowInlineTableMultiLineAndTrailingCommaEvenNoComma ) {\n\t\tconst start :number = iterator$0.mark();\n\t\tconst length = iterator$0.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator$0.must('Inline Table', start).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( iterator$0.stacks_length>length ) {\n\t\t\t\t\titerator$0.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = iterator$0.must('Inline Table', start).replace(regexps$0.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator$0.must('Inline Table', start).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t}(lineRest);\n\t}\n\telse {\n\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator$0.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator$0.where()));\n\t\tconst length = iterator$0.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( iterator$0.stacks_length>length ) {\n\t\t\t\t\titerator$0.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\t\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');//\n\t\t\t\t\t\t\tlineRest.startsWith('}') && iterator$0.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+iterator$0.where()));//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator$0.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator$0.where()));//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\t\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');\n\t\t\t\t\tlineRest.startsWith('}') && iterator$0.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+iterator$0.where()));\n\t\t\t\t}\n\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator$0.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator$0.where()));\n\t\t\t}\n\t\t}(lineRest);\n\t}\n}\n\nfunction equalInlineArray (table :Table, finalKey :string, lineRest :string) :string {\n\tconst inlineArray :any[] = table[finalKey] = [];\n\tsealedInline.add(inlineArray);\n\tconst start :number = iterator$0.mark();\n\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');\n\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\tlineRest = iterator$0.must('Inline Array', start).replace(regexps$0.PRE_WHITESPACE, '');\n\t}\n\tif ( lineRest.startsWith(']') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\tconst length = iterator$0.stacks_length;\n\treturn function callee (lineRest) {\n\t\tfor ( ; ; ) {\n\t\t\tlineRest = push(inlineArray, lineRest);\n\t\t\tif ( iterator$0.stacks_length>length ) {\n\t\t\t\titerator$0.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t//\n\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\tlineRest = iterator$0.must('Inline Array', start).replace(regexps$0.PRE_WHITESPACE, '');//\n\t\t\t\t\t}//\n\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = iterator$0.must('Inline Array', start).replace(regexps$0.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t}//\n\t\t\t\t\telse {//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\titerator$0.throws(SyntaxError(iterator$0.where()));//\n\t\t\t\t\t}//\n\t\t\t\t\t//\n\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t});\n\t\t\t\treturn lineRest;\n\t\t\t}\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = iterator$0.must('Inline Array', start).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\tlineRest = lineRest.replace(regexps$0.SYM_WHITESPACE, '');\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator$0.must('Inline Array', start).replace(regexps$0.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(regexps$0.SYM_WHITESPACE, ''); }\n\t\t\t\titerator$0.throws(SyntaxError(iterator$0.where()));\n\t\t\t}\n\t\t}\n\t}(lineRest);\n}\n",
			"import Error from '.Error';\nimport TypeError from '.TypeError';\nimport isBuffer from '.Buffer.isBuffer';\nimport from from '.Buffer.from';\nimport * as iterator$0 from '../iterator$0';\nimport * as options$0 from '../options$0';\nimport Root from '../parse/level-loop';\nimport { Table } from '../types/Table';\n\nconst BOM = '\\uFEFF';\nconst NON_SCALAR = /[\\uD800-\\uDFFF]/u;// \\u{10FFFF}- > \\uFFFD\nconst REGEXP = /^/;\n\nexport default function parse (\n\tsourceContent :Buffer | string,\n\tspecificationVersion :0.5 | 0.4 | 0.3,\n\tmultiLineJoiner :string,\n\tuseBigInt :boolean | number = true,\n\txOptions :options$0.xOptions = null\n) :Table {\n\titerator$0.could();\n\tif ( isBuffer(sourceContent) ) {\n\t\tconst buffer :Buffer = sourceContent;\n\t\tsourceContent = buffer.toString();\n\t\tif ( !from(buffer).equals(buffer) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any unknown code point.'); }\n\t\tif ( sourceContent.startsWith(BOM) ) { sourceContent = sourceContent.slice(1); }\n\t}\n\tif ( typeof sourceContent!=='string' ) { throw TypeError('TOML.parse(sourceContent)'); }\n\ttry {\n\t\tif ( NON_SCALAR.test(sourceContent) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any uncoupled UCS-4 character code.'); }\n\t\ttry {\n\t\t\toptions$0.use(specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t\t\titerator$0.todo(sourceContent);\n\t\t\ttry {\n\t\t\t\tconst rootTable = Root();\n\t\t\t\toptions$0.process();\n\t\t\t\treturn rootTable;\n\t\t\t}\n\t\t\tfinally { iterator$0.done(); }\n\t\t}\n\t\tfinally { options$0.clear(); }\n\t}\n\tfinally { REGEXP.test(''); }\n};\n",
			"import TypeError from '.TypeError';\nimport Promise from '.Promise';\nimport { xOptions } from './options$0';\nimport parse from './parse/';\nimport { Table } from './types/Table';\n\nexport default function install (\n\treadFile :(path :string) => Buffer | Promise<Buffer>,\n\tspecificationVersion :0.5 | 0.4 | 0.3,\n\tmultiLineJoiner :string,\n\tuseBigInt :boolean | number = true,\n\txOptions :xOptions = null\n) {\n\tif ( typeof readFile!=='function' ) { throw TypeError('TOML.install(readFile)'); }\n\tparse('', specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\trequire.extensions['.toml'] = function require_toml (module, filename :string) :void {\n\t\tconst sourceContent = readFile(filename);\n\t\tmodule.exports = sourceContent instanceof Promise\n\t\t\t? sourceContent.then(onFulfilled)\n\t\t\t: parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t};\n\tfunction onFulfilled (sourceContent :Buffer) :Table {\n\t\treturn parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t}\n};\n",
			"import version from './version?text';\nimport parse from './parse/';\nimport install from './install';\n\nconst TOML = {\n\tparse,\n\tinstall,\n\tversion,\n\tget default () { return this; }\n};\n\nexport default TOML;\n"
		],
	"names":
		["iterator$0.throws","iterator$0.where","options$0.allowLonger","options$0.IntegerMin","options$0.IntegerMax","iterator$0.done","options$0.sFloat","options$0.ctrl7F","options$0.slashEscaping","options$0.strictBareKey","options$0.useWhatToJoinMultiLineString","options$0.collect","options$0.TableDepends","options$0.unreopenable","options$0.disallowEmptyKey","regexps$0.LITERAL_STRING","regexps$0.MULTI_LINE_LITERAL_STRING","iterator$0.mark","iterator$0.must","regexps$0.BASIC_STRING_exec","regexps$0.MULTI_LINE_BASIC_STRING_exec_0","regexps$0.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","regexps$0.PRE_WHITESPACE","options$0.enableInterpolationString","iterator$0.rest","iterator$0.next","regexps$0.TABLE_DEFINITION_exec_groups","iterator$0.stacks_length","iterator$0.stacks_pop","regexps$0.KEY_VALUE_PAIR_exec_groups","regexps$0.TAG_REST","options$0.inlineTable","iterator$0.stacks_push","regexps$0.VALUE_REST","options$0.moreDatetime","options$0.enableNull","options$0.IntegerDepends","regexps$0._VALUE_PAIR","options$0.asStrings","options$0.asTables","options$0.asArrays","options$0.asFloats","options$0.asOffsetDateTimes","options$0.asLocalDateTimes","options$0.asLocalTimes","options$0.asLocalDates","options$0.asBooleans","options$0.asNulls","options$0.asIntegers","regexps$0.SYM_WHITESPACE","options$0.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","iterator$0.stacks_insertBeforeLast","iterator$0.could","options$0.use","iterator$0.todo","options$0.process","options$0.clear"],
	"mappings":
		"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"
}