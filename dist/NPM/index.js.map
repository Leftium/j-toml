{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","../../j-orderify/dist/ESM/j-orderify!meta.js","../../j-orderify/src/export.ts","../../j-orderify/dist/ESM/j-orderify!.js","types/Table.ts","../../j-regexp/dist/ESM/j-regexp!meta.js","../../j-regexp/src/export.ts","../../j-regexp/dist/ESM/j-regexp!.js","share/RE-higher.ts","share/RE-never-slow-nor-overflow.ts","share/RE.ts","types/Integer.ts","share/options.ts","share/iterator.ts","types/Datetime.ts","types/Float.ts","types/String.ts","parse+.ts","parse-share.ts","parse.ts","default.ts"],
	"names":
		["Object","iterator.throwSyntaxError","iterator.where","RE.SYM_WHITESPACE","RE.PRE_WHITESPACE","RE.XOB_INTEGER","RE.INTEGER","RE.UNDERSCORES","options.allowLonger","iterator.throwRangeError","options.IntegerMin","options.IntegerMax","iterator.throwTypeError","options.clear","RE.DATETIME","RE.FLOAT","RE.FLOAT_NOT_INTEGER","options.useWhatToJoinMultiLineString","RE.ESCAPED_IN_SINGLE_LINE","RE.ESCAPED_IN_MULTI_LINE","options.enableInterpolationString","RE.DELIMITER_CHECK","iterator.mark","iterator.must","RE.INTERPOLATIONS","RE.INTERPOLATION","RE.REGEXP_MODE","RE.PATTERN_FLAGS_REPLACER","RE.WHOLE_AND_SUBS","RE.SUB","RE.DOLLAR","RE.INTERPOLATION_TOKEN","options.customConstructors","options.FUNCTION","iterator.throwError","options.TableDepends","options.open","options.keepComment","RE.KEYS","RE.LITERAL_STRING","RE.MULTI_LINE_LITERAL_STRING","RE.CONTROL_CHARACTER_EXCLUDE_TAB","RE.BASIC_STRING_exec","RE.MULTI_LINE_BASIC_STRING_exec_0","RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","options.use","iterator.from","RE.BOM","RE.EOL","iterator.rest","iterator.next","RE.TABLE_DEFINITION_exec","iterator.stacks_length","iterator.stacks_pop","iterator.done","RE.KEY_VALUE_PAIR_exec","RE.VALUE_REST","options.enableNull","options.enableNil","options.IntegerDepends","iterator.stacks_push","RE._VALUE_PAIR","options.asStrings","options.asBooleans","options.asFloats","options.asDatetimes","options.asNulls","options.asIntegers","options.asArrays","options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","iterator.stacks_pushBeforeLast"],
	"mappings":
		"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",
	"sourcesContent":
		[
			"export default '0.5.63';",
			"/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.5.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */",
			"import version from './version?text';\nexport { version };\nimport WeakMap from '.WeakMap';\nimport Object from '.Object';\nimport create from '.Object.create';\nimport Set from '.Set';\nimport Proxy from '.Proxy';\nimport defineProperty from '.Reflect.defineProperty';\nimport deleteProperty from '.Reflect.deleteProperty';\nimport ownKeys from '.Reflect.ownKeys';\nconst ownKeysKeepers = new WeakMap;\nconst handlers = create(null, {\n    defineProperty: {\n        value(target, key, descriptor) {\n            if (defineProperty(target, key, descriptor)) {\n                ownKeysKeepers.get(target).add(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    deleteProperty: {\n        value(target, key) {\n            if (deleteProperty(target, key)) {\n                ownKeysKeepers.get(target).delete(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    ownKeys: {\n        value(target) {\n            return [...ownKeysKeepers.get(target)];\n        }\n    },\n});\nexport const orderify = (object) => {\n    ownKeysKeepers.set(object, new Set(ownKeys(object)));\n    return new Proxy(object, handlers);\n};\nexport class Orderified extends null {\n    constructor() {\n        const object = create(prototype);\n        ownKeysKeepers.set(object, new Set);\n        return new Proxy(object, handlers);\n    }\n}\nconst prototype = /*#__PURE__*/ function () {\n    delete Orderified.prototype.constructor;\n    Object.freeze(Orderified.prototype);\n    return Orderified.prototype;\n}();\nexport default {\n    version,\n    orderify,\n    Orderified,\n    get default() { return this; },\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbkIsT0FBTyxPQUFPLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUNwQyxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUM7QUFDdkIsT0FBTyxLQUFLLE1BQU0sUUFBUSxDQUFDO0FBQzNCLE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sT0FBTyxNQUFNLGtCQUFrQixDQUFDO0FBRXZDLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDO0FBRW5DLE1BQU0sUUFBUSxHQUFXLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDckMsY0FBYyxFQUFFO1FBQ2YsS0FBSyxDQUFFLE1BQWMsRUFBRSxHQUFvQixFQUFFLFVBQThCO1lBQzFFLElBQUssY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUc7Z0JBQzlDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLElBQUksQ0FBQzthQUNaO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO0tBQ0Q7SUFDRCxjQUFjLEVBQUU7UUFDZixLQUFLLENBQUUsTUFBYyxFQUFFLEdBQW9CO1lBQzFDLElBQUssY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRztnQkFDbEMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDO2FBQ1o7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUM7S0FDRDtJQUNELE9BQU8sRUFBRTtRQUNSLEtBQUssQ0FBRSxNQUFjO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDO0tBQ0Q7Q0FDRCxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRTtJQUNsRCxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxVQUFXLFNBQVEsSUFBSTtJQUNuQztRQUNDLE1BQU0sTUFBTSxHQUFlLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRDtBQUVELE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQztJQUMvQixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQztBQUM3QixDQUFDLEVBQUUsQ0FBQztBQUVKLGVBQWU7SUFDZCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbj90ZXh0JztcbmV4cG9ydCB7IHZlcnNpb24gfTtcblxuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLldlYWtNYXAnO1xuaW1wb3J0IE9iamVjdCBmcm9tICcuT2JqZWN0JztcbmltcG9ydCBjcmVhdGUgZnJvbSAnLk9iamVjdC5jcmVhdGUnO1xuaW1wb3J0IFNldCBmcm9tICcuU2V0JztcbmltcG9ydCBQcm94eSBmcm9tICcuUHJveHknO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy5SZWZsZWN0LmRlZmluZVByb3BlcnR5JztcbmltcG9ydCBkZWxldGVQcm9wZXJ0eSBmcm9tICcuUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSc7XG5pbXBvcnQgb3duS2V5cyBmcm9tICcuUmVmbGVjdC5vd25LZXlzJztcblxuY29uc3Qgb3duS2V5c0tlZXBlcnMgPSBuZXcgV2Vha01hcDtcblxuY29uc3QgaGFuZGxlcnMgOm9iamVjdCA9IGNyZWF0ZShudWxsLCB7XG5cdGRlZmluZVByb3BlcnR5OiB7XG5cdFx0dmFsdWUgKHRhcmdldCA6b2JqZWN0LCBrZXkgOnN0cmluZyB8IHN5bWJvbCwgZGVzY3JpcHRvciA6UHJvcGVydHlEZXNjcmlwdG9yKSB7XG5cdFx0XHRpZiAoIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSApIHtcblx0XHRcdFx0b3duS2V5c0tlZXBlcnMuZ2V0KHRhcmdldCkuYWRkKGtleSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0ZGVsZXRlUHJvcGVydHk6IHtcblx0XHR2YWx1ZSAodGFyZ2V0IDpvYmplY3QsIGtleSA6c3RyaW5nIHwgc3ltYm9sKSB7XG5cdFx0XHRpZiAoIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSApIHtcblx0XHRcdFx0b3duS2V5c0tlZXBlcnMuZ2V0KHRhcmdldCkuZGVsZXRlKGtleSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0b3duS2V5czoge1xuXHRcdHZhbHVlICh0YXJnZXQgOm9iamVjdCkgOiggc3RyaW5nIHwgc3ltYm9sIClbXSB7XG5cdFx0XHRyZXR1cm4gWy4uLm93bktleXNLZWVwZXJzLmdldCh0YXJnZXQpXTtcblx0XHR9XG5cdH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IG9yZGVyaWZ5ID0gKG9iamVjdCA6b2JqZWN0KSA6b2JqZWN0ID0+IHtcblx0b3duS2V5c0tlZXBlcnMuc2V0KG9iamVjdCwgbmV3IFNldChvd25LZXlzKG9iamVjdCkpKTtcblx0cmV0dXJuIG5ldyBQcm94eShvYmplY3QsIGhhbmRsZXJzKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBPcmRlcmlmaWVkIGV4dGVuZHMgbnVsbCB7XG5cdGNvbnN0cnVjdG9yICgpIHtcblx0XHRjb25zdCBvYmplY3QgOk9yZGVyaWZpZWQgPSBjcmVhdGUocHJvdG90eXBlKTtcblx0XHRvd25LZXlzS2VlcGVycy5zZXQob2JqZWN0LCBuZXcgU2V0KTtcblx0XHRyZXR1cm4gbmV3IFByb3h5KG9iamVjdCwgaGFuZGxlcnMpO1xuXHR9XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24gKCkge1xuXHRkZWxldGUgT3JkZXJpZmllZC5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cdE9iamVjdC5mcmVlemUoT3JkZXJpZmllZC5wcm90b3R5cGUpO1xuXHRyZXR1cm4gT3JkZXJpZmllZC5wcm90b3R5cGU7XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0dmVyc2lvbixcblx0b3JkZXJpZnksXG5cdE9yZGVyaWZpZWQsXG5cdGdldCBkZWZhdWx0ICgpIHsgcmV0dXJuIHRoaXM7IH0sXG59O1xuIl19",
			"﻿import './j-orderify!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-orderify */",
			"import { orderify } from '@ltd/j-orderify';\nimport create from '.Object.create';\nexport function Table() { }\nexport const OrderedTable = function Table() { return orderify(this); };\nOrderedTable.prototype = Table.prototype = create(null);\nexport const isTable = (value) => value instanceof Table;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUVwQyxNQUFNLFVBQVUsS0FBSyxLQUFZLENBQUM7QUFDbEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLFNBQVMsS0FBSyxLQUEwQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUc3RixZQUFZLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVUsRUFBVyxFQUFFLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9yZGVyaWZ5IH0gZnJvbSAnQGx0ZC9qLW9yZGVyaWZ5JztcbmltcG9ydCBjcmVhdGUgZnJvbSAnLk9iamVjdC5jcmVhdGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFibGUgKCkgOnZvaWQgeyB9XG5leHBvcnQgY29uc3QgT3JkZXJlZFRhYmxlID0gZnVuY3Rpb24gVGFibGUgKHRoaXMgOm9iamVjdCkgOm9iamVjdCB7IHJldHVybiBvcmRlcmlmeSh0aGlzKTsgfTtcbmV4cG9ydCB0eXBlIFRhYmxlID0gdHlwZW9mIFRhYmxlIHwgdHlwZW9mIE9yZGVyZWRUYWJsZTtcblxuT3JkZXJlZFRhYmxlLnByb3RvdHlwZSA9IFRhYmxlLnByb3RvdHlwZSA9IGNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGNvbnN0IGlzVGFibGUgPSAodmFsdWUgOmFueSkgOmJvb2xlYW4gPT4gdmFsdWUgaW5zdGFuY2VvZiBUYWJsZTtcbiJdfQ==",
			"/*!\n * 模块名称：@ltd/j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。\n   　　　　　More readable way for creating RegExp.\n * 模块版本：1.0.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */",
			"import version from './version?text';\nexport { version };\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\nvar NT = /[\\n\\t]/g;\nfunction Source(raw, substitutions) {\n    var source = raw[0];\n    for (var length = substitutions.length, index = 0; index < length;) {\n        var substitution = substitutions[index];\n        source += (typeof substitution === 'string' ? substitution : substitution.source) + raw[++index];\n    }\n    return source.replace(NT, '');\n}\nfunction newRegExp(template) {\n    return RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\nexport { newRegExp };\nexport function NewRegExp(flags) {\n    return function newRegExp(template) {\n        return RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n    };\n}\nvar jRegExp = {\n    newRegExp: newRegExp,\n    NewRegExp: NewRegExp,\n    version: version\n};\njRegExp['default'] = jRegExp;\nexport default jRegExp;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbkIsT0FBTyxNQUFNLE1BQU0sU0FBUyxDQUFDO0FBQzdCLE9BQU8sS0FBSyxNQUFNLHdCQUF3QixDQUFDO0FBRTNDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQztBQUVuQixTQUFTLE1BQU0sQ0FBRSxHQUFHLEVBQUUsYUFBYTtJQUNsQyxJQUFJLE1BQU0sR0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsS0FBTSxJQUFJLE1BQU0sR0FBVyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBVyxDQUFDLEVBQUUsS0FBSyxHQUFDLE1BQU0sR0FBSTtRQUNuRixJQUFJLFlBQVksR0FBb0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pELE1BQU0sSUFBSSxDQUFFLE9BQU8sWUFBWSxLQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFFLEdBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFHRCxTQUFTLFNBQVMsQ0FBRSxRQUE4QjtJQUNqRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUNELE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUVyQixNQUFNLFVBQVUsU0FBUyxDQUFFLEtBQWE7SUFDdkMsT0FBTyxTQUFTLFNBQVMsQ0FBRSxRQUE4QjtRQUN4RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQztBQUNILENBQUM7QUFFRCxJQUFJLE9BQU8sR0FBRztJQUNiLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLE9BQU8sRUFBRSxPQUFPO0NBQ2hCLENBQUM7QUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzdCLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uP3RleHQnO1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuXG5pbXBvcnQgUmVnRXhwIGZyb20gJy5SZWdFeHAnO1xuaW1wb3J0IHNsaWNlIGZyb20gJy5BcnJheS5wcm90b3R5cGUuc2xpY2UnO1xuXG52YXIgTlQgPSAvW1xcblxcdF0vZztcblxuZnVuY3Rpb24gU291cmNlIChyYXcsIHN1YnN0aXR1dGlvbnMpIDpzdHJpbmcge1xuXHR2YXIgc291cmNlIDpzdHJpbmcgPSByYXdbMF07XG5cdGZvciAoIHZhciBsZW5ndGggOm51bWJlciA9IHN1YnN0aXR1dGlvbnMubGVuZ3RoLCBpbmRleCA6bnVtYmVyID0gMDsgaW5kZXg8bGVuZ3RoOyApIHtcblx0XHR2YXIgc3Vic3RpdHV0aW9uIDpzdHJpbmcgfCBSZWdFeHAgPSBzdWJzdGl0dXRpb25zW2luZGV4XTtcblx0XHRzb3VyY2UgKz0gKCB0eXBlb2Ygc3Vic3RpdHV0aW9uPT09J3N0cmluZycgPyBzdWJzdGl0dXRpb24gOiBzdWJzdGl0dXRpb24uc291cmNlICkrcmF3WysraW5kZXhdO1xuXHR9XG5cdHJldHVybiBzb3VyY2UucmVwbGFjZShOVCwgJycpO1xufVxuXG5mdW5jdGlvbiBuZXdSZWdFeHAgKHRlbXBsYXRlIDpUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4uc3Vic3RpdHV0aW9ucyA6KCBzdHJpbmcgfCBSZWdFeHAgKVtdKSA6UmVnRXhwO1xuZnVuY3Rpb24gbmV3UmVnRXhwICh0ZW1wbGF0ZSA6VGVtcGxhdGVTdHJpbmdzQXJyYXkpIDpSZWdFeHAge1xuXHRyZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xufVxuZXhwb3J0IHsgbmV3UmVnRXhwIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBOZXdSZWdFeHAgKGZsYWdzIDpzdHJpbmcpIDp0eXBlb2YgbmV3UmVnRXhwIHtcblx0cmV0dXJuIGZ1bmN0aW9uIG5ld1JlZ0V4cCAodGVtcGxhdGUgOlRlbXBsYXRlU3RyaW5nc0FycmF5KSA6UmVnRXhwIHtcblx0XHRyZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSksIGZsYWdzKTtcblx0fTtcbn1cblxudmFyIGpSZWdFeHAgPSB7XG5cdG5ld1JlZ0V4cDogbmV3UmVnRXhwLFxuXHROZXdSZWdFeHA6IE5ld1JlZ0V4cCxcblx0dmVyc2lvbjogdmVyc2lvblxufTtcbmpSZWdFeHBbJ2RlZmF1bHQnXSA9IGpSZWdFeHA7XG5leHBvcnQgZGVmYXVsdCBqUmVnRXhwO1xuIl19",
			"﻿import './j-regexp!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-regexp */",
			"import { newRegExp, NewRegExp } from '@ltd/j-regexp';\n/* types */\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\nconst YMD = newRegExp `\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t(?:0[13578]|1[02])-${_31_}\n\t|\n\t\t(?:0[469]|11)-${_30_}\n\t|\n\t\t02-${_29_}\n\t)`;\nconst T = /[T ]/;\nconst HMS = newRegExp `\n\t${_23_}:${_59_}:${_59_}(?:\\.\\d+)?`;\nconst Z = newRegExp `\n\t\tZ\n\t|\n\t\t[+-]${_23_}:${_59_}`;\nexport const DATETIME = newRegExp `\n\t^\n\t(?:\n\t\t${HMS}\n\t|\n\t\t(${YMD})\n\t\t(?:\n\t\t\t(${T})\n\t\t\t(${HMS})\n\t\t\t(${Z})?\n\t\t)?\n\t)\n\t$`;\n/* parser */\nconst Whitespace = /[ \\t]/;\nexport const PRE_WHITESPACE = newRegExp `\n\t^${Whitespace}+`;\nexport const KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\nexport const VALUE_REST = newRegExp `\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\nexport const LITERAL_STRING = newRegExp `\n\t^\n\t'([^'\\x00-\\x08\\x0B-\\x1F\\x7F]*)'\n\t${Whitespace}*\n\t([^]*)`;\nexport const MULTI_LINE_LITERAL_STRING = newRegExp `\n\t^\n\t([^]*?)\n\t'''(?!')\n\t${Whitespace}*\n\t([^]*)`;\nexport const CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nexport const ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?:([ \\n]+)|([\\\\\"])|([btnfr])|u([^]{4})|U([^]{8}))/g;\nexport const SYM_WHITESPACE = newRegExp `\n\t^\n\t[^]\n\t${Whitespace}*`;\nexport const _VALUE_PAIR = newRegExp `\n\t^\n\t!!([\\w-]*)\n\t${Whitespace}+\n\t([^ \\t#][^]*)\n\t$`;\n/* parser-extension */\nconst String_ = /'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"/;\nconst KeyValuePairs = newRegExp `\n\t(?:${String_})\n\t${Whitespace}*\n\t=\n\t${Whitespace}*\n\t(?:${String_})\n\t${Whitespace}*\n\t(?:\n\t\t,\n\t\t${Whitespace}*\n\t\t(?:${String_})\n\t\t${Whitespace}*\n\t\t=\n\t\t${Whitespace}*\n\t\t(?:${String_})\n\t\t${Whitespace}*\n\t)*`;\nconst NonEmptyObject = newRegExp `\n\t{${Whitespace}*${KeyValuePairs}}`;\nconst Object = newRegExp `\n\t\t{${Whitespace}*}\n\t|\n\t\t${NonEmptyObject}`;\nconst StringOrArray = newRegExp `\n\t\t${String_}\n\t|\n\t\t${NonEmptyObject}\n\t|\n\t\t\\[\n\t\t${Whitespace}+\n\t\t(?:${String_})\n\t\t${Whitespace}*\n\t\t(?:\n\t\t\t,\n\t\t\t${Whitespace}*\n\t\t\t(?:${Object})\n\t\t\t${Whitespace}*\n\t\t)+\n\t\t]`;\nconst RegExpContent = /(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+/;\nconst Rule = newRegExp `\n\t\\(\n\t\t${Whitespace}*\n\t\t(?:\n\t\t\t/${RegExpContent}/[a-z]*\n\t\t\t${Whitespace}*\n\t\t\t=\n\t\t\t${Whitespace}*\n\t\t\t(?:${StringOrArray})\n\t\t\t${Whitespace}*\n\t\t|\n\t\t\t${KeyValuePairs}\n\t\t)\n\t\\)`;\nexport const SUB = NewRegExp('g') `\n\t${Object}`;\nexport const DELIMITER_CHECK = /[^`]/;\nexport const INTERPOLATION = NewRegExp('g') `\n\t${Rule}`;\nexport const INTERPOLATIONS = newRegExp `\n\t^\n\t(?:\n\t\t${Rule}\n\t\t${Whitespace}*\n\t)*\n\t${Whitespace}*\n\t([^]*)\n\t$`;\nexport const INTERPOLATION_TOKEN = NewRegExp('g') `\n\t${String_}`;\nexport const REGEXP_MODE = newRegExp `\n\t^\\(${Whitespace}*/`;\nexport const PATTERN_FLAGS_REPLACER = newRegExp `\n\t/(${RegExpContent})/([a-z]*)\n\t${Whitespace}*\n\t=\n\t${Whitespace}*\n\t(${StringOrArray})`;\nexport const WHOLE_AND_SUBS = newRegExp `\n\t(${String_})\n\t${Whitespace}*\n\t([^]*)`;\nexport const DOLLAR = /\\$(?:[1-9]\\d?|\\$)/g;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUVMLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7R0FDOUIsTUFBTSxFQUFFLENBQUM7QUFFWixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7R0FDeEMsSUFBSSxFQUFFLENBQUM7QUFFVixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFBOzs7SUFHbkMsSUFBSTtJQUNKLFVBQVU7O0dBRVgsVUFBVTs7R0FFVixDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0dBQzlDLE9BQU8sRUFBRSxDQUFDO0FBRWIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQTtNQUM5QixVQUFVLElBQUksQ0FBQztBQUVyQixNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLENBQUE7S0FDMUMsYUFBYTtHQUNmLFVBQVU7O0dBRVYsVUFBVTtJQUNULGFBQWEsR0FBRyxDQUFDO0FBRXJCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUE7SUFDbkMsT0FBTztHQUNSLFVBQVU7UUFDTCxDQUFDO0FBRVQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLG9CQUFvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3UmVnRXhwLCBOZXdSZWdFeHAgfSBmcm9tICdAbHRkL2otcmVnZXhwJztcblxuLyogdHlwZXMgKi9cblxuY29uc3QgXzI5XyA9IC8oPzowWzEtOV18MVxcZHwyWzAtOV0pLztcbmNvbnN0IF8zMF8gPSAvKD86MFsxLTldfFsxMl1cXGR8MzApLztcbmNvbnN0IF8zMV8gPSAvKD86MFsxLTldfFsxMl1cXGR8M1swMV0pLztcbmNvbnN0IF8yM18gPSAvKD86WzAxXVxcZHwyWzAtM10pLztcbmNvbnN0IF81OV8gPSAvWzAtNV1cXGQvO1xuXG5jb25zdCBZTUQgPSBuZXdSZWdFeHBgXG5cdFxcZFxcZFxcZFxcZC1cblx0KD86XG5cdFx0KD86MFsxMzU3OF18MVswMl0pLSR7XzMxX31cblx0fFxuXHRcdCg/OjBbNDY5XXwxMSktJHtfMzBffVxuXHR8XG5cdFx0MDItJHtfMjlffVxuXHQpYDtcblxuY29uc3QgVCA9IC9bVCBdLztcblxuY29uc3QgSE1TID0gbmV3UmVnRXhwYFxuXHQke18yM199OiR7XzU5X306JHtfNTlffSg/OlxcLlxcZCspP2A7XG5cbmNvbnN0IFogPSBuZXdSZWdFeHBgXG5cdFx0WlxuXHR8XG5cdFx0WystXSR7XzIzX306JHtfNTlffWA7XG5cbmV4cG9ydCBjb25zdCBEQVRFVElNRSA9IG5ld1JlZ0V4cGBcblx0XlxuXHQoPzpcblx0XHQke0hNU31cblx0fFxuXHRcdCgke1lNRH0pXG5cdFx0KD86XG5cdFx0XHQoJHtUfSlcblx0XHRcdCgke0hNU30pXG5cdFx0XHQoJHtafSk/XG5cdFx0KT9cblx0KVxuXHQkYDtcblxuLyogcGFyc2VyICovXG5cbmNvbnN0IFdoaXRlc3BhY2UgPSAvWyBcXHRdLztcblxuZXhwb3J0IGNvbnN0IFBSRV9XSElURVNQQUNFID0gbmV3UmVnRXhwYFxuXHReJHtXaGl0ZXNwYWNlfStgO1xuXG5leHBvcnQgY29uc3QgS0VZUyA9IC9bXFx3LV0rfFwiKD86W15cXFxcXCJdK3xcXFxcW15dKSpcInwnW14nXSonL2c7XG5cbmV4cG9ydCBjb25zdCBWQUxVRV9SRVNUID0gbmV3UmVnRXhwYFxuXHReXG5cdChcblx0XHQoPzpcXGRcXGRcXGRcXGQtXFxkXFxkLVxcZFxcZCBcXGQpP1xuXHRcdFtcXHdcXC0rLjpdK1xuXHQpXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXl0qKVxuXHQkYDtcblxuZXhwb3J0IGNvbnN0IExJVEVSQUxfU1RSSU5HID0gbmV3UmVnRXhwYFxuXHReXG5cdCcoW14nXFx4MDAtXFx4MDhcXHgwQi1cXHgxRlxceDdGXSopJ1xuXHQke1doaXRlc3BhY2V9KlxuXHQoW15dKilgO1xuXG5leHBvcnQgY29uc3QgTVVMVElfTElORV9MSVRFUkFMX1NUUklORyA9IG5ld1JlZ0V4cGBcblx0XlxuXHQoW15dKj8pXG5cdCcnJyg/IScpXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXl0qKWA7XG5cbmV4cG9ydCBjb25zdCBDT05UUk9MX0NIQVJBQ1RFUl9FWENMVURFX1RBQiA9IC9bXFx4MDAtXFx4MDhcXHgwQi1cXHgxRlxceDdGXS87XG5cbmV4cG9ydCBjb25zdCBFU0NBUEVEX0lOX01VTFRJX0xJTkUgPSAvXFxufFxcXFwoPzooWyBcXG5dKyl8KFtcXFxcXCJdKXwoW2J0bmZyXSl8dShbXl17NH0pfFUoW15dezh9KSkvZztcblxuZXhwb3J0IGNvbnN0IFNZTV9XSElURVNQQUNFID0gbmV3UmVnRXhwYFxuXHReXG5cdFteXVxuXHQke1doaXRlc3BhY2V9KmA7XG5cbmV4cG9ydCBjb25zdCBfVkFMVUVfUEFJUiA9IG5ld1JlZ0V4cGBcblx0XlxuXHQhIShbXFx3LV0qKVxuXHQke1doaXRlc3BhY2V9K1xuXHQoW14gXFx0I11bXl0qKVxuXHQkYDtcblxuLyogcGFyc2VyLWV4dGVuc2lvbiAqL1xuXG5jb25zdCBTdHJpbmdfID0gLydbXiddKid8XCIoPzpbXlxcXFxcIl0rfFxcXFxbXl0pKlwiLztcblxuY29uc3QgS2V5VmFsdWVQYWlycyA9IG5ld1JlZ0V4cGBcblx0KD86JHtTdHJpbmdffSlcblx0JHtXaGl0ZXNwYWNlfSpcblx0PVxuXHQke1doaXRlc3BhY2V9KlxuXHQoPzoke1N0cmluZ199KVxuXHQke1doaXRlc3BhY2V9KlxuXHQoPzpcblx0XHQsXG5cdFx0JHtXaGl0ZXNwYWNlfSpcblx0XHQoPzoke1N0cmluZ199KVxuXHRcdCR7V2hpdGVzcGFjZX0qXG5cdFx0PVxuXHRcdCR7V2hpdGVzcGFjZX0qXG5cdFx0KD86JHtTdHJpbmdffSlcblx0XHQke1doaXRlc3BhY2V9KlxuXHQpKmA7XG5cbmNvbnN0IE5vbkVtcHR5T2JqZWN0ID0gbmV3UmVnRXhwYFxuXHR7JHtXaGl0ZXNwYWNlfSoke0tleVZhbHVlUGFpcnN9fWA7XG5cbmNvbnN0IE9iamVjdCA9IG5ld1JlZ0V4cGBcblx0XHR7JHtXaGl0ZXNwYWNlfSp9XG5cdHxcblx0XHQke05vbkVtcHR5T2JqZWN0fWA7XG5cbmNvbnN0IFN0cmluZ09yQXJyYXkgPSBuZXdSZWdFeHBgXG5cdFx0JHtTdHJpbmdffVxuXHR8XG5cdFx0JHtOb25FbXB0eU9iamVjdH1cblx0fFxuXHRcdFxcW1xuXHRcdCR7V2hpdGVzcGFjZX0rXG5cdFx0KD86JHtTdHJpbmdffSlcblx0XHQke1doaXRlc3BhY2V9KlxuXHRcdCg/OlxuXHRcdFx0LFxuXHRcdFx0JHtXaGl0ZXNwYWNlfSpcblx0XHRcdCg/OiR7T2JqZWN0fSlcblx0XHRcdCR7V2hpdGVzcGFjZX0qXG5cdFx0KStcblx0XHRdYDtcblxuY29uc3QgUmVnRXhwQ29udGVudCA9IC8oPzpbXlxcXFxbL10rfFxcWyg/OlteXFxcXFxcXV0rfFxcXFxbXl0pKl18XFxcXFteXSkrLztcblxuY29uc3QgUnVsZSA9IG5ld1JlZ0V4cGBcblx0XFwoXG5cdFx0JHtXaGl0ZXNwYWNlfSpcblx0XHQoPzpcblx0XHRcdC8ke1JlZ0V4cENvbnRlbnR9L1thLXpdKlxuXHRcdFx0JHtXaGl0ZXNwYWNlfSpcblx0XHRcdD1cblx0XHRcdCR7V2hpdGVzcGFjZX0qXG5cdFx0XHQoPzoke1N0cmluZ09yQXJyYXl9KVxuXHRcdFx0JHtXaGl0ZXNwYWNlfSpcblx0XHR8XG5cdFx0XHQke0tleVZhbHVlUGFpcnN9XG5cdFx0KVxuXHRcXClgO1xuXG5leHBvcnQgY29uc3QgU1VCID0gTmV3UmVnRXhwKCdnJylgXG5cdCR7T2JqZWN0fWA7XG5cbmV4cG9ydCBjb25zdCBERUxJTUlURVJfQ0hFQ0sgPSAvW15gXS87XG5cbmV4cG9ydCBjb25zdCBJTlRFUlBPTEFUSU9OID0gTmV3UmVnRXhwKCdnJylgXG5cdCR7UnVsZX1gO1xuXG5leHBvcnQgY29uc3QgSU5URVJQT0xBVElPTlMgPSBuZXdSZWdFeHBgXG5cdF5cblx0KD86XG5cdFx0JHtSdWxlfVxuXHRcdCR7V2hpdGVzcGFjZX0qXG5cdCkqXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXl0qKVxuXHQkYDtcblxuZXhwb3J0IGNvbnN0IElOVEVSUE9MQVRJT05fVE9LRU4gPSBOZXdSZWdFeHAoJ2cnKWBcblx0JHtTdHJpbmdffWA7XG5cbmV4cG9ydCBjb25zdCBSRUdFWFBfTU9ERSA9IG5ld1JlZ0V4cGBcblx0XlxcKCR7V2hpdGVzcGFjZX0qL2A7XG5cbmV4cG9ydCBjb25zdCBQQVRURVJOX0ZMQUdTX1JFUExBQ0VSID0gbmV3UmVnRXhwYFxuXHQvKCR7UmVnRXhwQ29udGVudH0pLyhbYS16XSopXG5cdCR7V2hpdGVzcGFjZX0qXG5cdD1cblx0JHtXaGl0ZXNwYWNlfSpcblx0KCR7U3RyaW5nT3JBcnJheX0pYDtcblxuZXhwb3J0IGNvbnN0IFdIT0xFX0FORF9TVUJTID0gbmV3UmVnRXhwYFxuXHQoJHtTdHJpbmdffSlcblx0JHtXaGl0ZXNwYWNlfSpcblx0KFteXSopYDtcblxuZXhwb3J0IGNvbnN0IERPTExBUiA9IC9cXCQoPzpbMS05XVxcZD98XFwkKS9nO1xuIl19",
			"import * as iterator from './iterator';\nimport * as RE from './RE-higher';\n/* parser */\nconst MULTI_LINE_BASIC_STRING = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0(_) {\n    for (let _0 = '';;) {\n        if (_ === '') {\n            return _0;\n        }\n        const $ = MULTI_LINE_BASIC_STRING.exec(_);\n        if ($ === null) {\n            return _0;\n        }\n        _0 += $[0];\n        _ = _.slice($[0].length);\n    }\n}\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\ \\n]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(_) {\n    return _.replace(ESCAPED_EXCLUDE_CONTROL_CHARACTER, '') === '';\n}\nconst BASIC_STRING = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec(_2) {\n    _2 = _2.slice(1);\n    for (let _1 = '';;) {\n        const $ = BASIC_STRING.exec(_2);\n        if ($ === null) {\n            _2.startsWith('\"')\n                || iterator.throwSyntaxError(iterator.where());\n            return { 1: _1, 2: _2.replace(RE.SYM_WHITESPACE, '') };\n        }\n        _1 += $[0];\n        _2 = _2.slice($[0].length);\n    }\n}\nconst BARE_KEY = /^[\\w-]+/;\nconst LITERAL_KEY = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst DOT_KEY = /^[ \\t]*\\.[ \\t]*/;\nexport function TABLE_DEFINITION_exec(_) {\n    const _1 = _.charAt(1) === '[';\n    _ = _.slice(_1 ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    const _2 = getKeys(_);\n    _ = _.slice(_2.length).replace(RE.PRE_WHITESPACE, '');\n    _.startsWith(']')\n        || iterator.throwSyntaxError(iterator.where());\n    const _3 = _.charAt(1) === ']';\n    _ = _.slice(_3 ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    _ === ''\n        || _.startsWith('#')\n        || iterator.throwSyntaxError(iterator.where());\n    return { 1: _1, 2: _2, 3: _3, 4: _ };\n}\nconst KEY_VALUE_PAIR = /^[ \\t]*=[ \\t]*(!!([\\w-]*)[ \\t]+)?([^ \\t#][^]*)$/;\nexport function KEY_VALUE_PAIR_exec(_) {\n    const _1 = getKeys(_);\n    const $ = KEY_VALUE_PAIR.exec(_.slice(_1.length));\n    $\n        || iterator.throwSyntaxError(iterator.where());\n    return { 1: _1, 2: $[1], 3: $[2], 4: $[3] };\n}\nfunction getKeys(_) {\n    for (let keys = '';;) {\n        if (_.startsWith('\"')) {\n            _ = _.slice(1);\n            for (let key = '\"';;) {\n                const $ = BASIC_STRING.exec(_);\n                if ($ === null) {\n                    _.startsWith('\"')\n                        || iterator.throwSyntaxError(iterator.where());\n                    _ = _.slice(1);\n                    keys += key + '\"';\n                    break;\n                }\n                _ = _.slice($[0].length);\n                key += $[0];\n            }\n        }\n        else {\n            const key = ((_.startsWith('\\'') ? LITERAL_KEY : BARE_KEY).exec(_) || iterator.throwSyntaxError(iterator.where()))[0];\n            _ = _.slice(key.length);\n            keys += key;\n        }\n        const $ = DOT_KEY.exec(_);\n        if ($ === null) {\n            return keys;\n        }\n        _ = _.slice($[0].length);\n        keys += $[0];\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJFLW5ldmVyLXNsb3ctbm9yLW92ZXJmbG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxRQUFRLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxDLFlBQVk7QUFFWixNQUFNLHVCQUF1QixHQUFXLDZCQUE2QixDQUFDO0FBQ3RFLE1BQU0sVUFBVSw4QkFBOEIsQ0FBRSxDQUFTO0lBQ3hELEtBQU0sSUFBSSxFQUFFLEdBQVcsRUFBRSxJQUFNO1FBQzlCLElBQUssQ0FBQyxLQUFHLEVBQUUsRUFBRztZQUFFLE9BQU8sRUFBRSxDQUFDO1NBQUU7UUFDNUIsTUFBTSxDQUFDLEdBQTJCLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxJQUFLLENBQUMsS0FBRyxJQUFJLEVBQUc7WUFBRSxPQUFPLEVBQUUsQ0FBQztTQUFFO1FBQzlCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekI7QUFDRixDQUFDO0FBRUQsTUFBTSxpQ0FBaUMsR0FBVyxtRkFBbUYsQ0FBQztBQUN0SSxNQUFNLFVBQVUsc0NBQXNDLENBQUUsQ0FBUztJQUNoRSxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsaUNBQWlDLEVBQUUsRUFBRSxDQUFDLEtBQUcsRUFBRSxDQUFDO0FBQzlELENBQUM7QUFFRCxNQUFNLFlBQVksR0FBVyxxRkFBcUYsQ0FBQztBQUNuSCxNQUFNLFVBQVUsaUJBQWlCLENBQUUsRUFBVTtJQUM1QyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqQixLQUFNLElBQUksRUFBRSxHQUFXLEVBQUUsSUFBTTtRQUM5QixNQUFNLENBQUMsR0FBMkIsWUFBWSxDQUFDLElB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LENBQUM7WUFDeEIsSUFBSSxJQUFJLEdBQUcsQ0FBQztTQUNaO1FBQ0QsTUFBTSxDQUFDLEdBQTJCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsSUFBSyxDQUFDLEtBQUcsSUFBSSxFQUFHO1lBQUUsT0FBTyxJQUFJLENBQUM7U0FBRTtRQUNoQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNiO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4vaXRlcmF0b3InO1xuaW1wb3J0ICogYXMgUkUgZnJvbSAnLi9SRS1oaWdoZXInO1xuXG4vKiBwYXJzZXIgKi9cblxuY29uc3QgTVVMVElfTElORV9CQVNJQ19TVFJJTkcgOlJlZ0V4cCA9IC9eKD86W15cXFxcXCJdK3xcXFxcW15dfFwiXCI/KD8hXCIpKS87XG5leHBvcnQgZnVuY3Rpb24gTVVMVElfTElORV9CQVNJQ19TVFJJTkdfZXhlY18wIChfIDpzdHJpbmcpIDpzdHJpbmcge1xuXHRmb3IgKCBsZXQgXzAgOnN0cmluZyA9ICcnOyA7ICkge1xuXHRcdGlmICggXz09PScnICkgeyByZXR1cm4gXzA7IH1cblx0XHRjb25zdCAkIDpSZWdFeHBFeGVjQXJyYXkgfCBudWxsID0gTVVMVElfTElORV9CQVNJQ19TVFJJTkcuZXhlYyhfKTtcblx0XHRpZiAoICQ9PT1udWxsICkgeyByZXR1cm4gXzA7IH1cblx0XHRfMCArPSAkWzBdO1xuXHRcdF8gPSBfLnNsaWNlKCRbMF0ubGVuZ3RoKTtcblx0fVxufVxuXG5jb25zdCBFU0NBUEVEX0VYQ0xVREVfQ09OVFJPTF9DSEFSQUNURVIgOlJlZ0V4cCA9IC9bXlxcXFxcXHgwMC1cXHgwOVxceDBCLVxceDFGXFx4N0ZdK3xcXFxcKD86W2J0bmZyXCJcXFxcIFxcbl18dVswLTlBLUZhLWZdezR9fFVbMC05QS1GYS1mXXs4fSkvZztcbmV4cG9ydCBmdW5jdGlvbiBFU0NBUEVEX0VYQ0xVREVfQ09OVFJPTF9DSEFSQUNURVJfdGVzdCAoXyA6c3RyaW5nKSA6Ym9vbGVhbiB7XG5cdHJldHVybiBfLnJlcGxhY2UoRVNDQVBFRF9FWENMVURFX0NPTlRST0xfQ0hBUkFDVEVSLCAnJyk9PT0nJztcbn1cblxuY29uc3QgQkFTSUNfU1RSSU5HIDpSZWdFeHAgPSAvXig/OlteXFxcXFwiXFx4MDAtXFx4MDlcXHgwQi1cXHgxRlxceDdGXSt8XFxcXCg/OltidG5mclwiXFxcXF18dVswLTlBLUZhLWZdezR9fFVbMC05QS1GYS1mXXs4fSkpLztcbmV4cG9ydCBmdW5jdGlvbiBCQVNJQ19TVFJJTkdfZXhlYyAoXzIgOnN0cmluZykgOnsgMSA6c3RyaW5nLCAyIDpzdHJpbmcgfSB7XG5cdF8yID0gXzIuc2xpY2UoMSk7XG5cdGZvciAoIGxldCBfMSA6c3RyaW5nID0gJyc7IDsgKSB7XG5cdFx0Y29uc3QgJCA6UmVnRXhwRXhlY0FycmF5IHwgbnVsbCA9IEJBU0lDX1NUUklORy5leGVjKF8yKTtcblx0XHRpZiAoICQ9PT1udWxsICkge1xuXHRcdFx0XzIuc3RhcnRzV2l0aCgnXCInKVxuXHRcdFx0fHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcihpdGVyYXRvci53aGVyZSgpKTtcblx0XHRcdHJldHVybiB7IDE6IF8xLCAyOiBfMi5yZXBsYWNlKFJFLlNZTV9XSElURVNQQUNFLCAnJykgfTtcblx0XHR9XG5cdFx0XzEgKz0gJFswXTtcblx0XHRfMiA9IF8yLnNsaWNlKCRbMF0ubGVuZ3RoKTtcblx0fVxufVxuXG5jb25zdCBCQVJFX0tFWSA6UmVnRXhwID0gL15bXFx3LV0rLztcbmNvbnN0IExJVEVSQUxfS0VZIDpSZWdFeHAgPSAvXidbXidcXHgwMC1cXHgwOFxceDBCLVxceDFGXFx4N0ZdKicvO1xuY29uc3QgRE9UX0tFWSA6UmVnRXhwID0gL15bIFxcdF0qXFwuWyBcXHRdKi87XG5cbmV4cG9ydCBmdW5jdGlvbiBUQUJMRV9ERUZJTklUSU9OX2V4ZWMgKF8gOnN0cmluZykgOnsgMSA6Ym9vbGVhbiwgMiA6c3RyaW5nLCAzIDpib29sZWFuLCA0IDpzdHJpbmcgfSB7XG5cdGNvbnN0IF8xIDpib29sZWFuID0gXy5jaGFyQXQoMSk9PT0nWyc7XG5cdF8gPSBfLnNsaWNlKF8xID8gMiA6IDEpLnJlcGxhY2UoUkUuUFJFX1dISVRFU1BBQ0UsICcnKTtcblx0Y29uc3QgXzIgOnN0cmluZyA9IGdldEtleXMoXyk7XG5cdF8gPSBfLnNsaWNlKF8yLmxlbmd0aCkucmVwbGFjZShSRS5QUkVfV0hJVEVTUEFDRSwgJycpO1xuXHRfLnN0YXJ0c1dpdGgoJ10nKVxuXHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKGl0ZXJhdG9yLndoZXJlKCkpO1xuXHRjb25zdCBfMyA6Ym9vbGVhbiA9IF8uY2hhckF0KDEpPT09J10nO1xuXHRfID0gXy5zbGljZShfMyA/IDIgOiAxKS5yZXBsYWNlKFJFLlBSRV9XSElURVNQQUNFLCAnJyk7XG5cdF89PT0nJ1xuXHR8fCBfLnN0YXJ0c1dpdGgoJyMnKVxuXHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKGl0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4geyAxOiBfMSwgMjogXzIsIDM6IF8zLCA0OiBfIH07XG59XG5cbmNvbnN0IEtFWV9WQUxVRV9QQUlSIDpSZWdFeHAgPSAvXlsgXFx0XSo9WyBcXHRdKighIShbXFx3LV0qKVsgXFx0XSspPyhbXiBcXHQjXVteXSopJC87XG5leHBvcnQgZnVuY3Rpb24gS0VZX1ZBTFVFX1BBSVJfZXhlYyAoXyA6c3RyaW5nKSA6eyAxIDpzdHJpbmcsIDIgOnN0cmluZywgMyA6c3RyaW5nLCA0IDpzdHJpbmcgfSB7XG5cdGNvbnN0IF8xIDpzdHJpbmcgPSBnZXRLZXlzKF8pO1xuXHRjb25zdCAkIDpSZWdFeHBFeGVjQXJyYXkgPSA8UmVnRXhwRXhlY0FycmF5PktFWV9WQUxVRV9QQUlSLmV4ZWMoXy5zbGljZShfMS5sZW5ndGgpKTtcblx0JFxuXHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKGl0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4geyAxOiBfMSwgMjogJFsxXSwgMzogJFsyXSwgNDogJFszXSB9O1xufVxuXG5mdW5jdGlvbiBnZXRLZXlzIChfIDpzdHJpbmcpIDpzdHJpbmcge1xuXHRmb3IgKCBsZXQga2V5cyA6c3RyaW5nID0gJyc7IDsgKSB7XG5cdFx0aWYgKCBfLnN0YXJ0c1dpdGgoJ1wiJykgKSB7XG5cdFx0XHRfID0gXy5zbGljZSgxKTtcblx0XHRcdGZvciAoIGxldCBrZXkgOnN0cmluZyA9ICdcIic7IDsgKSB7XG5cdFx0XHRcdGNvbnN0ICQgOlJlZ0V4cEV4ZWNBcnJheSB8IG51bGwgPSBCQVNJQ19TVFJJTkcuZXhlYyhfKTtcblx0XHRcdFx0aWYgKCAkPT09bnVsbCApIHtcblx0XHRcdFx0XHRfLnN0YXJ0c1dpdGgoJ1wiJylcblx0XHRcdFx0XHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKGl0ZXJhdG9yLndoZXJlKCkpO1xuXHRcdFx0XHRcdF8gPSBfLnNsaWNlKDEpO1xuXHRcdFx0XHRcdGtleXMgKz0ga2V5KydcIic7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0XyA9IF8uc2xpY2UoJFswXS5sZW5ndGgpO1xuXHRcdFx0XHRrZXkgKz0gJFswXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRjb25zdCBrZXkgOnN0cmluZyA9ICggKCBfLnN0YXJ0c1dpdGgoJ1xcJycpID8gTElURVJBTF9LRVkgOiBCQVJFX0tFWSApLmV4ZWMoXykgfHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcihpdGVyYXRvci53aGVyZSgpKSApWzBdO1xuXHRcdFx0XyA9IF8uc2xpY2Uoa2V5Lmxlbmd0aCk7XG5cdFx0XHRrZXlzICs9IGtleTtcblx0XHR9XG5cdFx0Y29uc3QgJCA6UmVnRXhwRXhlY0FycmF5IHwgbnVsbCA9IERPVF9LRVkuZXhlYyhfKTtcblx0XHRpZiAoICQ9PT1udWxsICkgeyByZXR1cm4ga2V5czsgfVxuXHRcdF8gPSBfLnNsaWNlKCRbMF0ubGVuZ3RoKTtcblx0XHRrZXlzICs9ICRbMF07XG5cdH1cbn1cbiJdfQ==",
			"export * from './RE-higher';\nexport * from './RE-never-slow-nor-overflow';\n/* types */\nexport const ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"])|([btnfr])|u(.{4})|U(.{8}))/g;\nexport const UNDERSCORES = /_/g;\nexport const XOB_INTEGER = /^0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*$/;\nexport const INTEGER = /^[-+]?[1-9]\\d*(?:_\\d+)*$/;\nexport const FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nexport const FLOAT_NOT_INTEGER = /[.eE]/;\n/* parser */\nexport const BOM = /^\\uFEFF/;\nexport const EOL = /\\r?\\n/;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJFLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWMsYUFBYSxDQUFDO0FBQzVCLGNBQWMsOEJBQThCLENBQUM7QUFFN0MsV0FBVztBQUVYLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFXLDBDQUEwQyxDQUFDO0FBRXpGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUM7QUFFeEMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFXLDBFQUEwRSxDQUFDO0FBQzlHLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBVywwQkFBMEIsQ0FBQztBQUUxRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVcsNkVBQTZFLENBQUM7QUFDM0csTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQVcsT0FBTyxDQUFDO0FBRWpELFlBQVk7QUFFWixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQVcsU0FBUyxDQUFDO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBVyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL1JFLWhpZ2hlcic7XG5leHBvcnQgKiBmcm9tICcuL1JFLW5ldmVyLXNsb3ctbm9yLW92ZXJmbG93JztcblxuLyogdHlwZXMgKi9cblxuZXhwb3J0IGNvbnN0IEVTQ0FQRURfSU5fU0lOR0xFX0xJTkUgOlJlZ0V4cCA9IC9cXFxcKD86KFtcXFxcXCJdKXwoW2J0bmZyXSl8dSguezR9KXxVKC57OH0pKS9nO1xuXG5leHBvcnQgY29uc3QgVU5ERVJTQ09SRVMgOlJlZ0V4cCA9IC9fL2c7XG5cbmV4cG9ydCBjb25zdCBYT0JfSU5URUdFUiA6UmVnRXhwID0gL14weFswLTlBLUZhLWZdKyg/Ol9bMC05QS1GYS1mXSspKnxvWzAtN10rKD86X1swLTddKykqfGJbMDFdKyg/Ol9bMDFdKykqJC87XG5leHBvcnQgY29uc3QgSU5URUdFUiA6UmVnRXhwID0gL15bLStdP1sxLTldXFxkKig/Ol9cXGQrKSokLztcblxuZXhwb3J0IGNvbnN0IEZMT0FUIDpSZWdFeHAgPSAvXlstK10/KD86MHxbMS05XVxcZCooPzpfXFxkKykqKSg/OlxcLlxcZCsoPzpfXFxkKykqKT8oPzpbZUVdWy0rXT9cXGQrKD86X1xcZCspKik/JC87XG5leHBvcnQgY29uc3QgRkxPQVRfTk9UX0lOVEVHRVIgOlJlZ0V4cCA9IC9bLmVFXS87XG5cbi8qIHBhcnNlciAqL1xuXG5leHBvcnQgY29uc3QgQk9NIDpSZWdFeHAgPSAvXlxcdUZFRkYvO1xuZXhwb3J0IGNvbnN0IEVPTCA6UmVnRXhwID0gL1xccj9cXG4vO1xuIl19",
			"import * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\nexport const NumberInteger = (literal) => {\n    if (literal === '0' || literal === '+0' || literal === '-0') {\n        return 0;\n    }\n    (literal.charAt(0) === '0' ? RE.XOB_INTEGER : RE.INTEGER).test(literal)\n        || iterator.throwSyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where());\n    const number = +literal.replace(RE.UNDERSCORES, '');\n    options.allowLonger\n        || isSafeInteger(number)\n        || iterator.throwRangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes ' + literal + ' meet at ' + iterator.where());\n    return number;\n};\nexport const BigIntInteger = (literal) => {\n    if (literal === '0' || literal === '+0' || literal === '-0') {\n        return 0n;\n    }\n    (literal.charAt(0) === '0' ? RE.XOB_INTEGER : RE.INTEGER).test(literal) || iterator.throwSyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where());\n    const bigInt = BigInt(literal.replace(RE.UNDERSCORES, ''));\n    options.allowLonger\n        || -9223372036854775808n <= bigInt && bigInt <= 9223372036854775807n // ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n        || iterator.throwRangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes ' + literal + ' meet at ' + iterator.where());\n    return bigInt;\n};\nexport const DependInteger = (literal) => {\n    const bigInt = BigIntInteger(literal);\n    return options.IntegerMin <= bigInt && bigInt <= options.IntegerMax ? +(bigInt + '') : bigInt;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dGVudCI6WyJpbXBvcnQgKiBhcyBSRSBmcm9tICcuLi9zaGFyZS9SRSc7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICcuLi9zaGFyZS9pdGVyYXRvcic7XG5pbXBvcnQgKiBhcyBvcHRpb25zIGZyb20gJy4uL3NoYXJlL29wdGlvbnMnO1xuaW1wb3J0IGlzU2FmZUludGVnZXIgZnJvbSAnLk51bWJlci5pc1NhZmVJbnRlZ2VyJztcbmltcG9ydCBCaWdJbnQgZnJvbSAnLkJpZ0ludCc7XG5cbmV4cG9ydCBjb25zdCBOdW1iZXJJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgOm51bWJlciA9PiB7XG5cdGlmICggbGl0ZXJhbD09PScwJyB8fCBsaXRlcmFsPT09JyswJyB8fCBsaXRlcmFsPT09Jy0wJyApIHsgcmV0dXJuIDA7IH1cblx0KCBsaXRlcmFsLmNoYXJBdCgwKT09PScwJyA/IFJFLlhPQl9JTlRFR0VSIDogUkUuSU5URUdFUiApLnRlc3QobGl0ZXJhbClcblx0fHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcignSW52YWxpZCBJbnRlZ2VyICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdGNvbnN0IG51bWJlciA9ICtsaXRlcmFsLnJlcGxhY2UoUkUuVU5ERVJTQ09SRVMsICcnKTtcblx0b3B0aW9ucy5hbGxvd0xvbmdlclxuXHR8fCBpc1NhZmVJbnRlZ2VyKG51bWJlcilcblx0fHwgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnRlZ2VyIGRpZCBub3QgdXNlIEJpdEludCBtdXN0IGJlIE51bWJlci5pc1NhZmVJbnRlZ2VyLCBub3QgaW5jbHVkZXMgJytsaXRlcmFsKycgbWVldCBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IEJpZ0ludEludGVnZXIgPSAobGl0ZXJhbCA6c3RyaW5nKSA6YmlnaW50ID0+IHtcblx0aWYgKCBsaXRlcmFsPT09JzAnIHx8IGxpdGVyYWw9PT0nKzAnIHx8IGxpdGVyYWw9PT0nLTAnICkgeyByZXR1cm4gMG47IH1cblx0KCBsaXRlcmFsLmNoYXJBdCgwKT09PScwJyA/IFJFLlhPQl9JTlRFR0VSIDogUkUuSU5URUdFUiApLnRlc3QobGl0ZXJhbCkgfHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcignSW52YWxpZCBJbnRlZ2VyICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdGNvbnN0IGJpZ0ludCA6YmlnaW50ID0gQmlnSW50KGxpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpKTtcblx0b3B0aW9ucy5hbGxvd0xvbmdlclxuXHR8fCAtOTIyMzM3MjAzNjg1NDc3NTgwOG48PWJpZ0ludCAmJiBiaWdJbnQ8PTkyMjMzNzIwMzY4NTQ3NzU4MDduLy8gKCBtaW4gPSAtKDJuKiooNjRuLTFuKSkgfHwgfm1heCApIDw9IGxvbmcgPD0gKCBtYXggPSAybioqKDY0bi0xbiktMW4gfHwgfm1pbiApXG5cdHx8IGl0ZXJhdG9yLnRocm93UmFuZ2VFcnJvcignSW50ZWdlciBleHBlY3QgNjQgYml0IHJhbmdlICgtOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwOCB0byA5LDIyMywzNzIsMDM2LDg1NCw3NzUsODA3KSwgbm90IGluY2x1ZGVzICcrbGl0ZXJhbCsnIG1lZXQgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcblx0cmV0dXJuIGJpZ0ludDtcbn07XG5cbmV4cG9ydCBjb25zdCBEZXBlbmRJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgPT4ge1xuXHRjb25zdCBiaWdJbnQgOmJpZ2ludCA9IEJpZ0ludEludGVnZXIobGl0ZXJhbCk7XG5cdHJldHVybiBvcHRpb25zLkludGVnZXJNaW48PWJpZ0ludCAmJiBiaWdJbnQ8PW9wdGlvbnMuSW50ZWdlck1heCA/ICsoIGJpZ0ludCsnJyApIDogYmlnSW50O1xufTtcbiJdfQ==",
			"import WeakSet from '.WeakSet';\nimport create from '.Object.create';\nimport Error from '.Error';\nimport getOwnPropertyNames from '.Object.getOwnPropertyNames';\nimport getPrototypeOf from '.Reflect.getPrototypeOf';\nimport stringify from '.JSON.stringify';\nimport TypeError from '.TypeError';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport RangeError from '.RangeError';\nimport Proxy from '.Proxy';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from '../types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from '../types/Integer';\nimport * as iterator from './iterator';\nexport const FUNCTION = new WeakSet;\nexport const unType = (array) => array;\nexport const { asInlineArrayOfNulls, asInlineArrayOfStrings, asInlineArrayOfTables, asInlineArrayOfArrays, asInlineArrayOfBooleans, asInlineArrayOfFloats, asInlineArrayOfDatetimes, asInlineArrayOfIntegers, } = new Proxy(new WeakMap, {\n    get: (arrayTypes) => function typify(array) {\n        if (arrayTypes.has(array)) {\n            arrayTypes.get(array) === typify\n                || iterator.throwTypeError('Types in array must be same. Check ' + iterator.where());\n        }\n        else {\n            arrayTypes.set(array, typify);\n        }\n        return array;\n    }\n});\nexport let useWhatToJoinMultiLineString;\nexport let IntegerDepends, IntegerMin, IntegerMax;\nexport let TableDepends;\nexport let open;\nexport let allowLonger;\nexport let keepComment;\nexport let enableNull;\nexport let enableNil;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma;\nexport let enableInterpolationString;\nexport let asNulls, asStrings, asTables, asArrays, asBooleans, asFloats, asDatetimes, asIntegers;\nexport let customConstructors;\nexport function use(specificationVersion, useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger, extensionOptions) {\n    if (specificationVersion !== 0.5) {\n        throw new Error('TOML.parse(,specificationVersion)');\n    }\n    if (typeof useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines !== 'string') {\n        throw new TypeError('TOML.parse(,,multiLineJoiner)');\n    }\n    if (useBigInt_forInteger === true) {\n        IntegerDepends = BigIntInteger;\n    }\n    else if (useBigInt_forInteger === false) {\n        IntegerDepends = NumberInteger;\n    }\n    else {\n        if (typeof useBigInt_forInteger !== 'number') {\n            throw new TypeError('TOML.parse(,,,useBigInt)');\n        }\n        if (!isSafeInteger(useBigInt_forInteger)) {\n            throw new RangeError('TOML.parse(...useBigInt)');\n        }\n        IntegerDepends = DependInteger;\n        if (useBigInt_forInteger >= 0) {\n            IntegerMax = useBigInt_forInteger;\n            IntegerMin = -useBigInt_forInteger;\n        }\n        else {\n            IntegerMin = useBigInt_forInteger;\n            IntegerMax = -useBigInt_forInteger - 1;\n        }\n    }\n    useWhatToJoinMultiLineString = useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines;\n    let typify;\n    if (extensionOptions === null) {\n        TableDepends = Table;\n        open = allowLonger = keepComment = enableNull = enableNil = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = false;\n        customConstructors = null;\n        typify = true;\n    }\n    else {\n        TableDepends = extensionOptions.order ? OrderedTable : Table;\n        open = !!extensionOptions.open;\n        allowLonger = !!extensionOptions.longer;\n        keepComment = !!extensionOptions.hash;\n        enableNull = !!extensionOptions.null;\n        enableNil = !!extensionOptions.nil;\n        allowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!extensionOptions.multi;\n        enableInterpolationString = !!extensionOptions.ins;\n        typify = !extensionOptions.mix;\n        customConstructors = extensionOptions.new || null;\n        if (customConstructors !== null) {\n            if (typeof customConstructors === 'function') {\n                if (typify) {\n                    customConstructors = null;\n                    throw new Error('TOML.parse(,,,,{ mix:false, new(){} })');\n                }\n                if (customConstructors.length !== 2) {\n                    throw new Error('TOML.parse(,,,,xOptions.new.length)');\n                }\n                FUNCTION.add(customConstructors);\n            }\n            else if (typeof customConstructors === 'object') {\n                if (typify) {\n                    customConstructors = null;\n                    throw new Error('TOML.parse(,,,,{ mix:false, new:{} })');\n                }\n                if (getPrototypeOf(customConstructors) === null) {\n                    for (const type of getOwnPropertyNames(customConstructors)) {\n                        if (typeof customConstructors[type] !== 'function') {\n                            customConstructors = null;\n                            throw new TypeError('TOML.parse(,,,,xOptions.new[' + stringify(type) + '])');\n                        }\n                        if (customConstructors[type].length) {\n                            customConstructors = null;\n                            throw new Error('TOML.parse(,,,,xOptions.new[' + stringify(type) + '].length)');\n                        }\n                    }\n                }\n                else {\n                    const origin = customConstructors;\n                    customConstructors = create(null);\n                    for (const type of getOwnPropertyNames(origin)) {\n                        const customConstructor = origin[type];\n                        if (typeof customConstructor !== 'function') {\n                            customConstructors = null;\n                            throw new TypeError('TOML.parse(,,,,xOptions.new[' + stringify(type) + '])');\n                        }\n                        if (customConstructors[type].length) {\n                            customConstructors = null;\n                            throw new Error('TOML.parse(,,,,xOptions.new[' + stringify(type) + '].length)');\n                        }\n                        customConstructors[type] = customConstructor;\n                    }\n                }\n            }\n            else {\n                throw new TypeError('TOML.parse(,,,,xOptions.new)');\n            }\n        }\n    }\n    if (typify) {\n        asNulls = asInlineArrayOfNulls;\n        asStrings = asInlineArrayOfStrings;\n        asTables = asInlineArrayOfTables;\n        asArrays = asInlineArrayOfArrays;\n        asBooleans = asInlineArrayOfBooleans;\n        asFloats = asInlineArrayOfFloats;\n        asDatetimes = asInlineArrayOfDatetimes;\n        asIntegers = asInlineArrayOfIntegers;\n    }\n    else {\n        asNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asDatetimes = asIntegers = unType;\n    }\n}\nexport function clear() {\n    customConstructors = null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nimport * as options from './options';\nconst NONE = [];\nlet sourceLines = NONE;\nlet lastLineIndex = -1;\nlet lineIndex = -1;\nexport let stacks_length = 0;\nconst noop = (lineRest) => '';\nnoop.previous = noop;\nnoop.next = noop;\nlet last = noop;\nexport function stacks_pop() {\n    --stacks_length;\n    const item = last;\n    last = last.previous;\n    last.next = noop; //\n    return item;\n}\nexport function stacks_push(item) {\n    ++stacks_length;\n    item.previous = last;\n    last.next = item;\n    last = item;\n}\nexport function stacks_pushBeforeLast(item) {\n    ++stacks_length;\n    item.previous = last.previous;\n    item.next = last;\n    last.previous.next = item;\n    last.previous = item;\n}\nexport const from = (array) => {\n    sourceLines = array;\n    lastLineIndex = sourceLines.length - 1;\n    lineIndex = -1;\n};\nexport const done = () => {\n    sourceLines = NONE;\n    stacks_length = 0;\n    last = noop;\n    noop.next = noop;\n};\nexport const next = () => sourceLines[++lineIndex];\nexport const rest = () => lineIndex !== lastLineIndex;\nexport const mark = () => lineIndex;\nexport const must = (message, startIndex) => {\n    lineIndex === lastLineIndex\n        && throws(new SyntaxError(message + ' is not close until the end of the file, which started from line ' + (startIndex + 1) + ': ' + sourceLines[startIndex]));\n    return sourceLines[++lineIndex];\n};\nexport const where = () => 'line ' + (lineIndex + 1) + ': ' + sourceLines[lineIndex];\nexport const throwSyntaxError = (message) => throws(new SyntaxError(message));\nexport const throwRangeError = (message) => throws(new RangeError(message));\nexport const throwTypeError = (message) => throws(new TypeError(message));\nexport const throwError = (message) => throws(new Error(message));\nfunction throws(error) {\n    if (sourceLines !== NONE) {\n        error.lineIndex = lineIndex;\n        error.lineNumber = lineIndex + 1;\n        done();\n        options.clear();\n    }\n    throw error;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dCI6WyJpbXBvcnQgU3ludGF4RXJyb3IgZnJvbSAnLlN5bnRheEVycm9yJztcbmltcG9ydCBSYW5nZUVycm9yIGZyb20gJy5SYW5nZUVycm9yJztcbmltcG9ydCBUeXBlRXJyb3IgZnJvbSAnLlR5cGVFcnJvcic7XG5pbXBvcnQgRXJyb3IgZnJvbSAnLkVycm9yJztcbmltcG9ydCAqIGFzIG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcblxuY29uc3QgTk9ORSA6c3RyaW5nW10gPSBbXTtcbmxldCBzb3VyY2VMaW5lcyA6c3RyaW5nW10gPSBOT05FO1xubGV0IGxhc3RMaW5lSW5kZXggOm51bWJlciA9IC0xO1xubGV0IGxpbmVJbmRleCA6bnVtYmVyID0gLTE7XG5cbmV4cG9ydCBsZXQgc3RhY2tzX2xlbmd0aCA9IDA7XG5jb25zdCBub29wID0gKGxpbmVSZXN0IDpzdHJpbmcpIDpzdHJpbmcgPT4gJyc7XG5ub29wLnByZXZpb3VzID0gbm9vcDtcbm5vb3AubmV4dCA9IG5vb3A7XG5sZXQgbGFzdCA9IG5vb3A7XG5leHBvcnQgZnVuY3Rpb24gc3RhY2tzX3BvcCAoKSB7XG5cdC0tc3RhY2tzX2xlbmd0aDtcblx0Y29uc3QgaXRlbSA9IGxhc3Q7XG5cdGxhc3QgPSBsYXN0LnByZXZpb3VzO1xuXHRsYXN0Lm5leHQgPSBub29wOy8vXG5cdHJldHVybiBpdGVtO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrc19wdXNoIChpdGVtKSB7XG5cdCsrc3RhY2tzX2xlbmd0aDtcblx0aXRlbS5wcmV2aW91cyA9IGxhc3Q7XG5cdGxhc3QubmV4dCA9IGl0ZW07XG5cdGxhc3QgPSBpdGVtO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrc19wdXNoQmVmb3JlTGFzdCAoaXRlbSkge1xuXHQrK3N0YWNrc19sZW5ndGg7XG5cdGl0ZW0ucHJldmlvdXMgPSBsYXN0LnByZXZpb3VzO1xuXHRpdGVtLm5leHQgPSBsYXN0O1xuXHRsYXN0LnByZXZpb3VzLm5leHQgPSBpdGVtO1xuXHRsYXN0LnByZXZpb3VzID0gaXRlbTtcbn1cblxuZXhwb3J0IGNvbnN0IGZyb20gPSAoYXJyYXkgOnN0cmluZ1tdKSA6dm9pZCA9PiB7XG5cdHNvdXJjZUxpbmVzID0gYXJyYXk7XG5cdGxhc3RMaW5lSW5kZXggPSBzb3VyY2VMaW5lcy5sZW5ndGgtMTtcblx0bGluZUluZGV4ID0gLTE7XG59O1xuXG5leHBvcnQgY29uc3QgZG9uZSA9ICgpIDp2b2lkID0+IHtcblx0c291cmNlTGluZXMgPSBOT05FO1xuXHRzdGFja3NfbGVuZ3RoID0gMDtcblx0bGFzdCA9IG5vb3A7XG5cdG5vb3AubmV4dCA9IG5vb3A7XG59O1xuXG5leHBvcnQgY29uc3QgbmV4dCA9ICgpIDpzdHJpbmcgPT4gc291cmNlTGluZXNbKytsaW5lSW5kZXhdO1xuXG5leHBvcnQgY29uc3QgcmVzdCA9ICgpIDpib29sZWFuID0+IGxpbmVJbmRleCE9PWxhc3RMaW5lSW5kZXg7XG5cbmV4cG9ydCBjb25zdCBtYXJrID0gKCkgOm51bWJlciA9PiBsaW5lSW5kZXg7XG5cbmRlY2xhcmUgY2xhc3MgRnJpZW5kbHlFcnJvciBleHRlbmRzIEVycm9yIHtcblx0bGluZUluZGV4PyA6bnVtYmVyO1xuXHRsaW5lTnVtYmVyPyA6bnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgbXVzdCA9IChtZXNzYWdlIDpzdHJpbmcsIHN0YXJ0SW5kZXggOm51bWJlcikgOnN0cmluZyA9PiB7XG5cdGxpbmVJbmRleD09PWxhc3RMaW5lSW5kZXhcblx0JiYgdGhyb3dzKG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKycgaXMgbm90IGNsb3NlIHVudGlsIHRoZSBlbmQgb2YgdGhlIGZpbGUsIHdoaWNoIHN0YXJ0ZWQgZnJvbSBsaW5lICcrKCBzdGFydEluZGV4KzEgKSsnOiAnK3NvdXJjZUxpbmVzW3N0YXJ0SW5kZXhdKSk7XG5cdHJldHVybiBzb3VyY2VMaW5lc1srK2xpbmVJbmRleF07XG59O1xuXG5leHBvcnQgY29uc3Qgd2hlcmUgPSAoKSA6c3RyaW5nID0+ICdsaW5lICcrKCBsaW5lSW5kZXgrMSApKyc6ICcrc291cmNlTGluZXNbbGluZUluZGV4XTtcblxuZXhwb3J0IGNvbnN0IHRocm93U3ludGF4RXJyb3IgPSAobWVzc2FnZSA6c3RyaW5nKSA6bmV2ZXIgPT4gdGhyb3dzKG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKSk7XG5cbmV4cG9ydCBjb25zdCB0aHJvd1JhbmdlRXJyb3IgPSAobWVzc2FnZSA6c3RyaW5nKSA6bmV2ZXIgPT4gdGhyb3dzKG5ldyBSYW5nZUVycm9yKG1lc3NhZ2UpKTtcblxuZXhwb3J0IGNvbnN0IHRocm93VHlwZUVycm9yID0gKG1lc3NhZ2UgOnN0cmluZykgOm5ldmVyID0+IHRocm93cyhuZXcgVHlwZUVycm9yKG1lc3NhZ2UpKTtcblxuZXhwb3J0IGNvbnN0IHRocm93RXJyb3IgPSAobWVzc2FnZSA6c3RyaW5nKSA6bmV2ZXIgPT4gdGhyb3dzKG5ldyBFcnJvcihtZXNzYWdlKSk7XG5cbmZ1bmN0aW9uIHRocm93cyAoZXJyb3IgOkZyaWVuZGx5RXJyb3IpIDpuZXZlciB7XG5cdGlmICggc291cmNlTGluZXMhPT1OT05FICkge1xuXHRcdGVycm9yLmxpbmVJbmRleCA9IGxpbmVJbmRleDtcblx0XHRlcnJvci5saW5lTnVtYmVyID0gbGluZUluZGV4KzE7XG5cdFx0ZG9uZSgpO1xuXHRcdG9wdGlvbnMuY2xlYXIoKTtcblx0fVxuXHR0aHJvdyBlcnJvcjtcbn1cbiJdfQ==",
			"import Symbol from '.Symbol';\nimport Date from '.Date';\nimport * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\nconst literal_cache = Symbol('literal_cache');\nconst value_cache = Symbol('value_cache');\nexport class Datetime extends Date {\n    constructor(literal) {\n        // @ts-ignore\n        const { 0: hms_ms = '', 1: YMD = '', 2: T = '', 3: HMS_MS = hms_ms, 4: Z = '' } = RE.DATETIME.exec(literal) || iterator.throwSyntaxError('Invalid Datetime ' + literal + ' at ' + iterator.where());\n        super(Z ? YMD + 'T' + HMS_MS + Z :\n            T ? YMD + 'T' + HMS_MS :\n                YMD ? YMD + 'T00:00:00.000'\n                    : '1970-01-01T' + HMS_MS);\n        this.type =\n            Z ? 'Offset Date-Time' :\n                T ? 'Local Date-Time' :\n                    YMD ? 'Local Date'\n                        : 'Local Time';\n        this[literal_cache] = literal;\n        this[value_cache] = this.getTime();\n    }\n    //static isDatetime (value :any) :boolean { return value instanceof Datetime; }\n    //toJSON (this :Datetime) :string { return this.toISOString(); }\n    toISOString() {\n        if (this.getTime() === this[value_cache]) {\n            return this[literal_cache];\n        }\n        throw new Error('Datetime value has been modified.');\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRhdGV0aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLElBQUksTUFBTSxPQUFPLENBQUM7QUFDekIsT0FBTyxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbEMsT0FBTyxLQUFLLFFBQVEsTUFBTSxtQkFBbUIsQ0FBQztBQUU5QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDOUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxRQUFTLFNBQVEsSUFBSTtJQUlqQyxZQUFhLE9BQWU7UUFDM0IsYUFBYTtRQUNiLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFvQixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEdBQUMsT0FBTyxHQUFDLE1BQU0sR0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMvTSxLQUFLLENBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLGVBQWU7b0JBQ3hCLENBQUMsQ0FBQyxhQUFhLEdBQUMsTUFBTSxDQUN6QixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUk7WUFDUixDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZO3dCQUNqQixDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsK0VBQStFO0lBRS9FLGdFQUFnRTtJQUNoRSxXQUFXO1FBQ1YsSUFBSyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFHO1lBQUUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FBRTtRQUN6RSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5bWJvbCBmcm9tICcuU3ltYm9sJztcbmltcG9ydCBEYXRlIGZyb20gJy5EYXRlJztcbmltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcblxuY29uc3QgbGl0ZXJhbF9jYWNoZSA9IFN5bWJvbCgnbGl0ZXJhbF9jYWNoZScpO1xuY29uc3QgdmFsdWVfY2FjaGUgPSBTeW1ib2woJ3ZhbHVlX2NhY2hlJyk7XG5cbmV4cG9ydCBjbGFzcyBEYXRldGltZSBleHRlbmRzIERhdGUge1xuXHRcblx0dHlwZSA6c3RyaW5nO1xuXHRcblx0Y29uc3RydWN0b3IgKGxpdGVyYWwgOnN0cmluZykge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCB7IDA6IGhtc19tcyA9ICcnLCAxOiBZTUQgPSAnJywgMjogVCA9ICcnLCAzOiBITVNfTVMgPSBobXNfbXMsIDQ6IFogPSAnJyB9IDpSZWdFeHBFeGVjQXJyYXkgPSBSRS5EQVRFVElNRS5leGVjKGxpdGVyYWwpIHx8IGl0ZXJhdG9yLnRocm93U3ludGF4RXJyb3IoJ0ludmFsaWQgRGF0ZXRpbWUgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcblx0XHRzdXBlcihcblx0XHRcdFogPyBZTUQrJ1QnK0hNU19NUytaIDpcblx0XHRcdFx0VCA/IFlNRCsnVCcrSE1TX01TIDpcblx0XHRcdFx0XHRZTUQgPyBZTUQrJ1QwMDowMDowMC4wMDAnXG5cdFx0XHRcdFx0XHQ6ICcxOTcwLTAxLTAxVCcrSE1TX01TXG5cdFx0KTtcblx0XHR0aGlzLnR5cGUgPVxuXHRcdFx0WiA/ICdPZmZzZXQgRGF0ZS1UaW1lJyA6XG5cdFx0XHRcdFQgPyAnTG9jYWwgRGF0ZS1UaW1lJyA6XG5cdFx0XHRcdFx0WU1EID8gJ0xvY2FsIERhdGUnXG5cdFx0XHRcdFx0XHQ6ICdMb2NhbCBUaW1lJztcblx0XHR0aGlzW2xpdGVyYWxfY2FjaGVdID0gbGl0ZXJhbDtcblx0XHR0aGlzW3ZhbHVlX2NhY2hlXSA9IHRoaXMuZ2V0VGltZSgpO1xuXHR9XG5cdFxuXHQvL3N0YXRpYyBpc0RhdGV0aW1lICh2YWx1ZSA6YW55KSA6Ym9vbGVhbiB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGV0aW1lOyB9XG5cdFxuXHQvL3RvSlNPTiAodGhpcyA6RGF0ZXRpbWUpIDpzdHJpbmcgeyByZXR1cm4gdGhpcy50b0lTT1N0cmluZygpOyB9XG5cdHRvSVNPU3RyaW5nICh0aGlzIDpEYXRldGltZSkgOnN0cmluZyB7XG5cdFx0aWYgKCB0aGlzLmdldFRpbWUoKT09PXRoaXNbdmFsdWVfY2FjaGVdICkgeyByZXR1cm4gdGhpc1tsaXRlcmFsX2NhY2hlXTsgfVxuXHRcdHRocm93IG5ldyBFcnJvcignRGF0ZXRpbWUgdmFsdWUgaGFzIGJlZW4gbW9kaWZpZWQuJyk7XG5cdH1cblx0XG59XG4iXX0=",
			"import * as RE from '../share/RE';\n//import Infinity, NaN from '.Infinity'+'.NaN';\nimport * as iterator from '../share/iterator';\n// @ts-ignore\nexport const Float = (literal) => {\n    if (RE.FLOAT.test(literal) && RE.FLOAT_NOT_INTEGER.test(literal)) {\n        return +literal.replace(RE.UNDERSCORES, '');\n        //const number = +literal.replace(RE.UNDERSCORES, '');\n        //isFinite(number) || iterator.throwRangeError('Float can not be as big as Infinity, like '+literal+' at '+where());\n        //return number;\n    }\n    //if ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n    //if ( literal==='-inf' ) { return -Infinity; }\n    //if ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n    iterator.throwSyntaxError('Invalid Float ' + literal + ' at ' + iterator.where());\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsb2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLCtDQUErQztBQUMvQyxPQUFPLEtBQUssUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLGFBQWE7QUFDYixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUNoRCxJQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUc7UUFDbkUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxzREFBc0Q7UUFDdEQsb0hBQW9IO1FBQ3BILGdCQUFnQjtLQUNoQjtJQUNELGlFQUFpRTtJQUNqRSwrQ0FBK0M7SUFDL0MsZ0ZBQWdGO0lBQ2hGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsR0FBQyxPQUFPLEdBQUMsTUFBTSxHQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcbi8vaW1wb3J0IEluZmluaXR5LCBOYU4gZnJvbSAnLkluZmluaXR5JysnLk5hTic7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICcuLi9zaGFyZS9pdGVyYXRvcic7XG5cbi8vIEB0cy1pZ25vcmVcbmV4cG9ydCBjb25zdCBGbG9hdCA9IChsaXRlcmFsIDpzdHJpbmcpIDpudW1iZXIgPT4ge1xuXHRpZiAoIFJFLkZMT0FULnRlc3QobGl0ZXJhbCkgJiYgUkUuRkxPQVRfTk9UX0lOVEVHRVIudGVzdChsaXRlcmFsKSApIHtcblx0XHRyZXR1cm4gK2xpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpO1xuXHRcdC8vY29uc3QgbnVtYmVyID0gK2xpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpO1xuXHRcdC8vaXNGaW5pdGUobnVtYmVyKSB8fCBpdGVyYXRvci50aHJvd1JhbmdlRXJyb3IoJ0Zsb2F0IGNhbiBub3QgYmUgYXMgYmlnIGFzIEluZmluaXR5LCBsaWtlICcrbGl0ZXJhbCsnIGF0ICcrd2hlcmUoKSk7XG5cdFx0Ly9yZXR1cm4gbnVtYmVyO1xuXHR9XG5cdC8vaWYgKCBsaXRlcmFsPT09J2luZicgfHwgbGl0ZXJhbD09PScraW5mJyApIHsgcmV0dXJuIEluZmluaXR5OyB9XG5cdC8vaWYgKCBsaXRlcmFsPT09Jy1pbmYnICkgeyByZXR1cm4gLUluZmluaXR5OyB9XG5cdC8vaWYgKCBsaXRlcmFsPT09J25hbicgfHwgbGl0ZXJhbD09PScrbmFuJyB8fCBsaXRlcmFsPT09Jy1uYW4nICkgeyByZXR1cm4gTmFOOyB9XG5cdGl0ZXJhdG9yLnRocm93U3ludGF4RXJyb3IoJ0ludmFsaWQgRmxvYXQgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcbn07XG4iXX0=",
			"import parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nconst ESCAPE_ALIAS = { b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\nconst unEscapeSingleLine = (match, p1, p2, p3, p4) => {\n    if (p1) {\n        return p1;\n    }\n    if (p2) {\n        return ESCAPE_ALIAS[p2];\n    }\n    const codePoint = parseInt(p3 || p4, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throwRangeError('Invalid Unicode Scalar ' + (p3 ? '\\\\u' + p3 : '\\\\U' + p4) + ' at ' + iterator.where());\n    return fromCodePoint(codePoint);\n};\nconst unEscapeMultiLine = (match, p1, p2, p3, p4, p5) => {\n    if (match === '\\n') {\n        return options.useWhatToJoinMultiLineString;\n    }\n    if (p1) {\n        p1.includes('\\n')\n            || iterator.throwSyntaxError('Back slash leading whitespaces can only appear at the end of a line, but see ' + iterator.where());\n        return '';\n    }\n    if (p2) {\n        return p2;\n    }\n    if (p3) {\n        return ESCAPE_ALIAS[p3];\n    }\n    const codePoint = parseInt(p4 || p5, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throwRangeError('Invalid Unicode Scalar ' + (p4 ? '\\\\u' + p4 : '\\\\U' + p5) + ' at ' + iterator.where());\n    return fromCodePoint(codePoint);\n};\nexport const BasicString = (literal) => literal.replace(RE.ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\nexport const MultiLineBasicString = (literal) => literal.replace(RE.ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLG9CQUFvQixHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlSW50IGZyb20gJy5wYXJzZUludCc7XG5pbXBvcnQgZnJvbUNvZGVQb2ludCBmcm9tICcuU3RyaW5nLmZyb21Db2RlUG9pbnQnO1xuaW1wb3J0ICogYXMgaXRlcmF0b3IgZnJvbSAnLi4vc2hhcmUvaXRlcmF0b3InO1xuaW1wb3J0ICogYXMgb3B0aW9ucyBmcm9tICcuLi9zaGFyZS9vcHRpb25zJztcbmltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcblxuY29uc3QgRVNDQVBFX0FMSUFTID0geyBiOiAnXFxiJywgdDogJ1xcdCcsIG46ICdcXG4nLCBmOiAnXFxmJywgcjogJ1xccicgfTtcblxudHlwZSBwID0gc3RyaW5nIHwgdW5kZWZpbmVkO1xudHlwZSBidG5mciA9ICdiJyB8ICdiJyB8ICduJyB8ICdmJyB8ICdyJyB8IHVuZGVmaW5lZDtcblxuY29uc3QgdW5Fc2NhcGVTaW5nbGVMaW5lID0gKG1hdGNoIDpzdHJpbmcsIHAxIDonXCInIHwgdW5kZWZpbmVkLCBwMiA6YnRuZnIsIHAzIDpwLCBwNCA6cCkgOnN0cmluZyA9PiB7XG5cdGlmICggcDEgKSB7IHJldHVybiBwMTsgfVxuXHRpZiAoIHAyICkgeyByZXR1cm4gRVNDQVBFX0FMSUFTW3AyXTsgfVxuXHRjb25zdCBjb2RlUG9pbnQgOm51bWJlciA9IHBhcnNlSW50KHAzIHx8IDxzdHJpbmc+cDQsIDE2KTtcblx0KCAweEQ3RkY8Y29kZVBvaW50ICYmIGNvZGVQb2ludDwweEUwMDAgfHwgMHgxMEZGRkY8Y29kZVBvaW50IClcblx0JiYgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnZhbGlkIFVuaWNvZGUgU2NhbGFyICcrKCBwMyA/ICdcXFxcdScrcDMgOiAnXFxcXFUnK3A0ICkrJyBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufTtcblxuY29uc3QgdW5Fc2NhcGVNdWx0aUxpbmUgPSAobWF0Y2ggOnN0cmluZywgcDEgOidcXG4nIHwgdW5kZWZpbmVkLCBwMiA6J1wiJywgcDMgOmJ0bmZyLCBwNCA6cCwgcDUgOnApIDpzdHJpbmcgPT4ge1xuXHRpZiAoIG1hdGNoPT09J1xcbicgKSB7IHJldHVybiBvcHRpb25zLnVzZVdoYXRUb0pvaW5NdWx0aUxpbmVTdHJpbmc7IH1cblx0aWYgKCBwMSApIHtcblx0XHRwMS5pbmNsdWRlcygnXFxuJylcblx0XHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKCdCYWNrIHNsYXNoIGxlYWRpbmcgd2hpdGVzcGFjZXMgY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSBlbmQgb2YgYSBsaW5lLCBidXQgc2VlICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdGlmICggcDIgKSB7IHJldHVybiBwMjsgfVxuXHRpZiAoIHAzICkgeyByZXR1cm4gRVNDQVBFX0FMSUFTW3AzXTsgfVxuXHRjb25zdCBjb2RlUG9pbnQgOm51bWJlciA9IHBhcnNlSW50KHA0IHx8IDxzdHJpbmc+cDUsIDE2KTtcblx0KCAweEQ3RkY8Y29kZVBvaW50ICYmIGNvZGVQb2ludDwweEUwMDAgfHwgMHgxMEZGRkY8Y29kZVBvaW50IClcblx0JiYgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnZhbGlkIFVuaWNvZGUgU2NhbGFyICcrKCBwNCA/ICdcXFxcdScrcDQgOiAnXFxcXFUnK3A1ICkrJyBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IEJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoUkUuRVNDQVBFRF9JTl9TSU5HTEVfTElORSwgdW5Fc2NhcGVTaW5nbGVMaW5lKTtcblxuZXhwb3J0IGNvbnN0IE11bHRpTGluZUJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoUkUuRVNDQVBFRF9JTl9NVUxUSV9MSU5FLCB1bkVzY2FwZU11bHRpTGluZSk7XG4iXX0=",
			"import Map from '.Map';\nimport RegExp from '.RegExp';\nimport * as iterator from './share/iterator';\nimport * as options from './share/options';\nimport { BasicString } from './types/String';\nimport * as RE from './share/RE';\nexport function assignInterpolationString(table, finalKey, delimiter) {\n    options.enableInterpolationString || iterator.throwSyntaxError(iterator.where());\n    RE.DELIMITER_CHECK.test(delimiter) && iterator.throwSyntaxError('Interpolation String opening tag incorrect at ' + iterator.where());\n    let string;\n    let lineRest;\n    {\n        const literals = [];\n        for (const start = iterator.mark();;) {\n            const literal = iterator.must('Interpolation String', start);\n            if (literal.startsWith(delimiter)) {\n                lineRest = literal.slice(delimiter.length).replace(RE.PRE_WHITESPACE, '');\n                break;\n            }\n            literals.push(literal);\n        }\n        string = literals.join('\\n');\n    }\n    if (lineRest.startsWith('(')) {\n        const interpolations_rest = RE.INTERPOLATIONS.exec(lineRest) || iterator.throwSyntaxError(iterator.where());\n        lineRest = interpolations_rest[2];\n        for (const interpolation of interpolations_rest[1].match(RE.INTERPOLATION)) {\n            if (RE.REGEXP_MODE.test(interpolation)) {\n                const { 1: pattern, 2: flags, 3: Replacer } = RE.PATTERN_FLAGS_REPLACER.exec(interpolation);\n                let search;\n                try {\n                    search = new RegExp(pattern, flags);\n                }\n                catch (error) {\n                    throw iterator.throwSyntaxError('Invalid regExp at ' + iterator.where());\n                }\n                let replacer;\n                switch (Replacer[0]) {\n                    case '\\'':\n                        replacer = Replacer.slice(1, -1);\n                        break;\n                    case '\"':\n                        replacer = BasicString(Replacer.slice(1, -1));\n                        break;\n                    case '{':\n                        const map = newMap(Replacer, true);\n                        replacer = (match) => map.has(match) ? map.get(match) : match;\n                        break;\n                    case '[':\n                        const { 1: whole, 2: subs } = RE.WHOLE_AND_SUBS.exec(Replacer);\n                        const maps = [null];\n                        for (const sub of subs.match(RE.SUB)) {\n                            maps.push(newMap(sub, true));\n                        }\n                        replacer = (...args) => whole.replace(RE.DOLLAR, ($n) => {\n                            if ($n === '$$') {\n                                return '$';\n                            }\n                            const n = $n.slice(1);\n                            const arg = args[n] || '';\n                            const map = maps[n];\n                            return map && map.has(arg) ? map.get(arg) : arg;\n                        });\n                        break;\n                }\n                string = string.replace(search, replacer);\n            }\n            else {\n                const map = newMap(interpolation, false);\n                let round = '';\n                outer: for (let length = string.length, index = 0; index < length;) {\n                    for (const { 0: search, 1: replacer } of map) {\n                        if (string.startsWith(search, index)) {\n                            round += replacer;\n                            index += search.length;\n                            continue outer;\n                        }\n                    }\n                    round += string[index];\n                    ++index;\n                }\n                string = round;\n            }\n        }\n    }\n    table[finalKey] = string;\n    return lineRest;\n}\nfunction newMap(interpolation, usedForRegExp) {\n    const map = new Map;\n    const tokens = interpolation.match(RE.INTERPOLATION_TOKEN);\n    for (let length = tokens.length, index = 0; index < length;) {\n        let search = tokens[index++];\n        search = search[0] === '\\'' ? search.slice(1, -1) : BasicString(search.slice(1, -1));\n        usedForRegExp\n            || search\n            || iterator.throwSyntaxError('Characters to replace can not be empty, which was found at ' + iterator.where());\n        map.has(search)\n            && iterator.throwSyntaxError('Duplicate ' + (usedForRegExp ? 'replacer' : 'characters to replace') + ' at ' + iterator.where());\n        let replacer = tokens[index++];\n        replacer = replacer[0] === '\\'' ? replacer.slice(1, -1) : BasicString(replacer.slice(1, -1));\n        map.set(search, replacer);\n    }\n    return map;\n}\nexport function ensureConstructor(type) {\n    options.customConstructors\n        || iterator.throwSyntaxError(iterator.where());\n    options.FUNCTION.has(options.customConstructors)\n        || type in options.customConstructors\n        || iterator.throwError(iterator.where());\n}\nexport function construct(type, value) {\n    return options.FUNCTION.has(options.customConstructors)\n        ? options.customConstructors(type, value)\n        : options.customConstructors[type](value);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import isArray from '.Array.isArray';\nimport Symbol_for from '.Symbol.for';\nimport WeakSet from '.WeakSet';\nimport * as iterator from './share/iterator';\nimport { isTable } from './types/Table';\nimport { BasicString, MultiLineBasicString } from './types/String';\nimport * as options from './share/options';\nimport * as RE from './share/RE';\nexport const sealedInline = new WeakSet;\nconst openTables = new WeakSet;\nexport function appendTable(table, key_key, asArrayItem, hash) {\n    const leadingKeys = parseKeys(key_key);\n    const finalKey = leadingKeys.pop();\n    table = prepareTable(table, leadingKeys);\n    let lastTable;\n    if (asArrayItem) {\n        let arrayOfTables;\n        if (finalKey in table) {\n            sealedInline.has(arrayOfTables = table[finalKey]) && iterator.throwError('Trying to push Table to non-ArrayOfTables value at ' + iterator.where());\n        }\n        else {\n            arrayOfTables = table[finalKey] = [];\n        }\n        arrayOfTables.push(lastTable = new options.TableDepends);\n    }\n    else {\n        if (finalKey in table) {\n            options.open && openTables.has(lastTable = table[finalKey]) || iterator.throwError('Duplicate Table definition at ' + iterator.where());\n            openTables.delete(lastTable);\n        }\n        else {\n            table[finalKey] = lastTable = new options.TableDepends;\n        }\n    }\n    if (options.keepComment && hash) {\n        table[Symbol_for(finalKey)] = hash.slice(1);\n    }\n    return lastTable;\n}\nexport function parseKeys(key_key) {\n    const keys = key_key.match(RE.KEYS);\n    for (let index = keys.length; index--;) {\n        const key = keys[index];\n        if (key.startsWith('\\'')) {\n            keys[index] = key.slice(1, -1);\n        }\n        else if (key.startsWith('\"')) {\n            keys[index] = BasicString(key.slice(1, -1));\n        }\n    }\n    return keys;\n}\nfunction prepareTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            if (isTable(table)) {\n                sealedInline.has(table) && iterator.throwError('Trying to define table through static Inline Object at ' + iterator.where());\n            }\n            else if (isArray(table)) {\n                sealedInline.has(table) && iterator.throwError('Trying to append value to static Inline Array at ' + iterator.where());\n                // @ts-ignore\n                table = table[table.length - 1];\n            }\n            else {\n                iterator.throwError('Trying to define table through non-Table value at ' + iterator.where());\n            }\n        }\n        else {\n            openTables.add(table = table[key] = new options.TableDepends);\n            while (index < length) {\n                openTables.add(table = table[keys[index++]] = new options.TableDepends);\n            }\n            return table;\n        }\n    }\n    return table;\n}\nexport function prepareInlineTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            isTable(table) || iterator.throwError('Trying to assign property through non-Table value at ' + iterator.where());\n            sealedInline.has(table) && iterator.throwError('Trying to assign property through static Inline Object at ' + iterator.where());\n        }\n        else {\n            table = table[key] = new options.TableDepends;\n            while (index < length) {\n                table = table[keys[index++]] = new options.TableDepends;\n            }\n            return table;\n        }\n    }\n    return table;\n}\nexport function assignLiteralString(table, finalKey, literal) {\n    let $;\n    if (literal.charAt(1) !== '\\'' || literal.charAt(2) !== '\\'') {\n        $ = RE.LITERAL_STRING.exec(literal) || iterator.throwSyntaxError(iterator.where());\n        table[finalKey] = $[1];\n        return $[2];\n    }\n    literal = literal.slice(3);\n    $ = RE.MULTI_LINE_LITERAL_STRING.exec(literal);\n    if ($) {\n        table[finalKey] = checkLiteralString($[1]);\n        return $[2];\n    }\n    if (literal) {\n        checkLiteralString(literal);\n        literal += options.useWhatToJoinMultiLineString;\n    }\n    const start = iterator.mark();\n    for (;;) {\n        const line = iterator.must('Literal String', start);\n        $ = RE.MULTI_LINE_LITERAL_STRING.exec(line);\n        if ($) {\n            table[finalKey] = literal + checkLiteralString($[1]);\n            return $[2];\n        }\n        literal += line + options.useWhatToJoinMultiLineString;\n    }\n}\nfunction checkLiteralString(literal) {\n    RE.CONTROL_CHARACTER_EXCLUDE_TAB.test(literal) && iterator.throwSyntaxError('Control characters other than tab are not permitted in a Multi-Line Literal String, which was found at ' + iterator.where());\n    literal.includes('\\'\\'\\'') && iterator.throwSyntaxError('Ending single quotes more than two are not permitted in a Multi-Line Literal String, which was found at ' + iterator.where());\n    return literal;\n}\nexport function assignBasicString(table, finalKey, literal) {\n    if (literal.charAt(1) !== '\"' || literal.charAt(2) !== '\"') {\n        const $ = RE.BASIC_STRING_exec(literal);\n        table[finalKey] = BasicString($[1]);\n        return $[2];\n    }\n    literal = literal.slice(3);\n    const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(literal);\n    if (literal.startsWith('\"\"\"', $.length)) {\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throwSyntaxError(iterator.where());\n        table[finalKey] = BasicString($);\n        return literal.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n    }\n    if (literal) {\n        literal += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || iterator.throwSyntaxError(iterator.where());\n    }\n    const start = iterator.mark();\n    for (;;) {\n        let line = iterator.must('Basic String', start);\n        const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(line);\n        if (line.startsWith('\"\"\"', $.length)) {\n            RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throwSyntaxError(iterator.where());\n            table[finalKey] = MultiLineBasicString(literal + $);\n            return line.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n        }\n        line += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || iterator.throwSyntaxError(iterator.where());\n        literal += line;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import TypeError from '.TypeError';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport Symbol_for from '.Symbol.for';\nimport isBuffer from '.Buffer.isBuffer';\nimport Symbol from '.Symbol';\nimport * as iterator from './share/iterator';\nimport { Datetime } from './types/Datetime';\nimport { Float } from './types/Float';\nimport * as options from './share/options';\nimport * as RE from './share/RE';\nimport { assignInterpolationString, ensureConstructor, construct } from './parse+';\nimport { sealedInline, appendTable, parseKeys, prepareInlineTable, assignLiteralString, assignBasicString } from './parse-share';\nexport default function parse(sourceContent, specificationVersion, useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger = true, extensionOptions = null) {\n    if (typeof sourceContent !== 'string') {\n        if (!isBuffer(sourceContent)) {\n            throw new TypeError('TOML.parse(sourceContent)');\n        }\n        sourceContent = sourceContent.toString();\n    }\n    options.use(specificationVersion, useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger, extensionOptions);\n    const rootTable = new options.TableDepends;\n    iterator.from(sourceContent.replace(RE.BOM, '').split(RE.EOL));\n    let lastSectionTable = rootTable;\n    while (iterator.rest()) {\n        const line = iterator.next().replace(RE.PRE_WHITESPACE, '');\n        if (line === '') { }\n        else if (line.startsWith('#')) {\n            if (options.keepComment) {\n                lastSectionTable[Symbol('#')] = line.slice(1);\n            }\n        }\n        else if (line.startsWith('[')) {\n            const { 1: $_asArrayItem$$, 2: keys, 3: $$asArrayItem$_, 4: hash } = RE.TABLE_DEFINITION_exec(line);\n            $_asArrayItem$$ === $$asArrayItem$_ || iterator.throwSyntaxError('Square brackets of table define statement not match at ' + iterator.where());\n            lastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, hash);\n        }\n        else {\n            const $_assignInline_pushInline = true;\n            let rest = setInline($_assignInline_pushInline, lastSectionTable, line);\n            while (iterator.stacks_length) {\n                rest = iterator.stacks_pop()(rest);\n            }\n            if (rest === '') { }\n            else if (rest.startsWith('#')) {\n                if (options.keepComment) {\n                    lastSectionTable[Symbol('#')] = rest.slice(1);\n                }\n            }\n            else {\n                iterator.throwSyntaxError(iterator.where());\n            }\n        }\n    }\n    iterator.done();\n    options.clear();\n    return rootTable;\n}\n;\nfunction setInline($_assignInline_pushInline, lastInlineTable_array, lineRest) {\n    let $_assignInlineTable_assignInlineArray = false;\n    if ($_assignInline_pushInline) {\n        const { 1: left, 2: custom, 3: type, 4: right } = RE.KEY_VALUE_PAIR_exec(lineRest);\n        custom && ensureConstructor(type);\n        const leadingKeys = parseKeys(left);\n        const finalKey = leadingKeys.pop();\n        const table = prepareInlineTable(lastInlineTable_array, leadingKeys);\n        finalKey in table && iterator.throwError('Duplicate property definition at ' + iterator.where());\n        switch (right[0]) {\n            case '\\'':\n                lineRest = assignLiteralString(table, finalKey, right);\n                break;\n            case '\"':\n                lineRest = assignBasicString(table, finalKey, right);\n                break;\n            case '`':\n                lineRest = assignInterpolationString(table, finalKey, right);\n                break;\n            default:\n                let literal;\n                ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(right) || iterator.throwSyntaxError(iterator.where()));\n                table[finalKey] =\n                    literal === 'true' ? true : literal === 'false' ? false :\n                        literal === 'inf' || literal === '+inf' ? Infinity : literal === '-inf' ? -Infinity :\n                            literal === 'nan' || literal === '+nan' || literal === '-nan' ? NaN :\n                                literal.includes(':') || literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-') ? new Datetime(literal) :\n                                    literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x') ? Float(literal) :\n                                        options.enableNull && literal === 'null' || options.enableNil && literal === 'nil' ? null :\n                                            options.IntegerDepends(literal);\n                break;\n            case '{':\n                $_assignInlineTable_assignInlineArray = true;\n            case '[':\n                iterator.stacks_push((lineRest) => {\n                    lineRest = assignInlineLevel($_assignInlineTable_assignInlineArray, table, finalKey, lineRest);\n                    //\n                    if (custom) {\n                        table[finalKey] = construct(type, table[finalKey]);\n                    } //\n                    if (options.keepComment && lineRest.startsWith('#')) { //\n                        table[Symbol_for(finalKey)] = lineRest.slice(1); //\n                        return ''; //\n                    } //\n                    return lineRest; //\n                    //\n                });\n                return right;\n        }\n        if (custom) {\n            table[finalKey] = construct(type, table[finalKey]);\n        }\n        if (options.keepComment && lineRest.startsWith('#')) {\n            table[Symbol_for(finalKey)] = lineRest.slice(1);\n            return '';\n        }\n        return lineRest;\n    }\n    else {\n        const custom = lineRest.startsWith('!!');\n        let type;\n        if (custom) {\n            //options.typify && iterator.throwSyntaxError('Only mixable arrays could contain custom type. Check '+iterator.where());\n            ({ 1: type, 2: lineRest } = RE._VALUE_PAIR.exec(lineRest) || iterator.throwSyntaxError(iterator.where()));\n            ensureConstructor(type);\n        }\n        const lastIndex = '' + lastInlineTable_array.length;\n        switch (lineRest[0]) {\n            case '\\'':\n                lineRest = assignLiteralString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n                break;\n            case '\"':\n                lineRest = assignBasicString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n                break;\n            case '`':\n                lineRest = assignInterpolationString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n                break;\n            default:\n                let literal;\n                ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throwSyntaxError(iterator.where()));\n                if (literal === 'true') {\n                    options.asBooleans(lastInlineTable_array).push(true);\n                }\n                else if (literal === 'false') {\n                    options.asBooleans(lastInlineTable_array).push(false);\n                }\n                else if (literal === 'inf' || literal === '+inf') {\n                    options.asFloats(lastInlineTable_array).push(Infinity);\n                }\n                else if (literal === '-inf') {\n                    options.asFloats(lastInlineTable_array).push(-Infinity);\n                }\n                else if (literal === 'nan' || literal === '+nan' || literal === '-nan') {\n                    options.asFloats(lastInlineTable_array).push(NaN);\n                }\n                else if (literal.includes(':') || literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-')) {\n                    options.asDatetimes(lastInlineTable_array).push(new Datetime(literal));\n                }\n                else if (literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x')) {\n                    options.asFloats(lastInlineTable_array).push(Float(literal));\n                }\n                else if (options.enableNull && literal === 'null' || options.enableNil && literal === 'nil') {\n                    options.asNulls(lastInlineTable_array).push(null);\n                }\n                else {\n                    options.asIntegers(lastInlineTable_array).push(options.IntegerDepends(literal));\n                }\n                break;\n            case '{':\n                $_assignInlineTable_assignInlineArray = true;\n            case '[':\n                iterator.stacks_push((lineRest) => {\n                    lineRest = assignInlineLevel($_assignInlineTable_assignInlineArray, options.asArrays(lastInlineTable_array), lastIndex, lineRest);\n                    //\n                    if (custom) {\n                        lastInlineTable_array[lastIndex] = construct(type, lastInlineTable_array[lastIndex]);\n                    } //\n                    if (options.keepComment && lineRest.startsWith('#')) { //\n                        lastInlineTable_array[Symbol_for(lastIndex)] = lineRest.slice(1); //\n                        return ''; //\n                    } //\n                    return lineRest; //\n                    //\n                });\n                return lineRest;\n        }\n        if (custom) {\n            lastInlineTable_array[lastIndex] = construct(type, lastInlineTable_array[lastIndex]);\n        }\n        if (options.keepComment && lineRest.startsWith('#')) {\n            lastInlineTable_array[Symbol_for(lastIndex)] = lineRest.slice(1);\n            return '';\n        }\n        return lineRest;\n    }\n}\nfunction assignInlineLevel($_assignInlineTable_assignInlineArray, table, finalKey, lineRest) {\n    const $_assignInline_pushInline = $_assignInlineTable_assignInlineArray;\n    if ($_assignInlineTable_assignInlineArray) {\n        const inlineTable = table[finalKey] = new options.TableDepends;\n        sealedInline.add(inlineTable);\n        lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n        if (options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma) {\n            const start = iterator.mark();\n            const length = iterator.stacks_length;\n            return function callee(lineRest) {\n                for (;;) {\n                    for (;;) {\n                        if (lineRest === '') { }\n                        else if (lineRest.startsWith('#')) {\n                            if (options.keepComment) {\n                                table[Symbol('#')] = lineRest.slice(1);\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                        lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n                    }\n                    if (lineRest.startsWith('}')) {\n                        return lineRest.replace(RE.SYM_WHITESPACE, '');\n                    }\n                    lineRest = setInline($_assignInline_pushInline, inlineTable, lineRest);\n                    if (iterator.stacks_length > length) {\n                        iterator.stacks_pushBeforeLast((lineRest) => {\n                            //\n                            for (;;) { //\n                                if (lineRest === '') { } //\n                                else if (lineRest.startsWith('#')) { //\n                                    if (options.keepComment) {\n                                        table[Symbol('#')] = lineRest.slice(1);\n                                    } //\n                                } //\n                                else {\n                                    break;\n                                } //\n                                lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, ''); //\n                            } //\n                            if (lineRest.startsWith(',')) {\n                                lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                            } //\n                            //\n                            return callee(lineRest);\n                        });\n                        return lineRest;\n                    }\n                    for (;;) {\n                        if (lineRest === '') { }\n                        else if (lineRest.startsWith('#')) {\n                            if (options.keepComment) {\n                                table[Symbol('#')] = lineRest.slice(1);\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                        lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n                    }\n                    if (lineRest.startsWith(',')) {\n                        lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                    }\n                }\n            }(lineRest);\n        }\n        else {\n            if (lineRest.startsWith('}')) {\n                return lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n            (lineRest === '' || lineRest.startsWith('#')) && iterator.throwSyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where());\n            const length = iterator.stacks_length;\n            return function callee(lineRest) {\n                for (;;) {\n                    lineRest = setInline($_assignInline_pushInline, inlineTable, lineRest);\n                    if (iterator.stacks_length > length) {\n                        iterator.stacks_pushBeforeLast((lineRest) => {\n                            //\n                            if (lineRest.startsWith('}')) {\n                                return lineRest.replace(RE.SYM_WHITESPACE, '');\n                            } //\n                            if (lineRest.startsWith(',')) { //\n                                lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); //\n                                lineRest.startsWith('}') && iterator.throwSyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at ' + iterator.where()); //\n                            } //\n                            (lineRest === '' || lineRest.startsWith('#')) && iterator.throwSyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where()); //\n                            //\n                            return callee(lineRest);\n                        });\n                        return lineRest;\n                    }\n                    if (lineRest.startsWith('}')) {\n                        return lineRest.replace(RE.SYM_WHITESPACE, '');\n                    }\n                    if (lineRest.startsWith(',')) {\n                        lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                        lineRest.startsWith('}') && iterator.throwSyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at ' + iterator.where());\n                    }\n                    (lineRest === '' || lineRest.startsWith('#')) && iterator.throwSyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where());\n                }\n            }(lineRest);\n        }\n    }\n    else {\n        const inlineArray = table[finalKey] = [];\n        sealedInline.add(inlineArray);\n        const start = iterator.mark();\n        lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n        for (;;) {\n            if (lineRest === '') { }\n            else if (lineRest.startsWith('#')) {\n                if (options.keepComment) {\n                    table[Symbol('#')] = lineRest.slice(1);\n                }\n            }\n            else {\n                break;\n            }\n            lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n        }\n        if (lineRest.startsWith(']')) {\n            return lineRest.replace(RE.SYM_WHITESPACE, '');\n        }\n        const length = iterator.stacks_length;\n        return function callee(lineRest) {\n            for (;;) {\n                lineRest = setInline($_assignInline_pushInline, inlineArray, lineRest);\n                if (iterator.stacks_length > length) {\n                    iterator.stacks_pushBeforeLast((lineRest) => {\n                        //\n                        for (;;) { //\n                            if (lineRest === '') { } //\n                            else if (lineRest.startsWith('#')) { //\n                                if (options.keepComment) {\n                                    table[Symbol('#')] = lineRest.slice(1);\n                                } //\n                            } //\n                            else {\n                                break;\n                            } //\n                            lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, ''); //\n                        } //\n                        if (lineRest.startsWith(',')) { //\n                            lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); //\n                            if (options.keepComment && lineRest.startsWith('#')) { //\n                                inlineArray[Symbol_for(inlineArray.length - 1 + '')] = lineRest.slice(1); //\n                                lineRest = ''; //\n                            } //\n                            for (;;) { //\n                                if (lineRest === '') { } //\n                                else if (lineRest.startsWith('#')) { //\n                                    if (options.keepComment) {\n                                        table[Symbol('#')] = lineRest.slice(1);\n                                    } //\n                                } //\n                                else {\n                                    break;\n                                } //\n                                lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, ''); //\n                            } //\n                            if (lineRest.startsWith(']')) {\n                                return lineRest.replace(RE.SYM_WHITESPACE, '');\n                            } //\n                        } //\n                        else { //\n                            if (lineRest.startsWith(']')) {\n                                return lineRest.replace(RE.SYM_WHITESPACE, '');\n                            } //\n                            iterator.throwSyntaxError(iterator.where()); //\n                        } //\n                        //\n                        return callee(lineRest);\n                    });\n                    return lineRest;\n                }\n                for (;;) {\n                    if (lineRest === '') { }\n                    else if (lineRest.startsWith('#')) {\n                        if (options.keepComment) {\n                            table[Symbol('#')] = lineRest.slice(1);\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                    lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n                }\n                if (lineRest.startsWith(',')) {\n                    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                    if (options.keepComment && lineRest.startsWith('#')) {\n                        inlineArray[Symbol_for(inlineArray.length - 1 + '')] = lineRest.slice(1);\n                        lineRest = '';\n                    }\n                    for (;;) {\n                        if (lineRest === '') { }\n                        else if (lineRest.startsWith('#')) {\n                            if (options.keepComment) {\n                                table[Symbol('#')] = lineRest.slice(1);\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                        lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n                    }\n                    if (lineRest.startsWith(']')) {\n                        return lineRest.replace(RE.SYM_WHITESPACE, '');\n                    }\n                }\n                else {\n                    if (lineRest.startsWith(']')) {\n                        return lineRest.replace(RE.SYM_WHITESPACE, '');\n                    }\n                    iterator.throwSyntaxError(iterator.where());\n                }\n            }\n        }(lineRest);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import version from './version?text';\nimport parse from './parse';\nconst TOML = {\n    parse,\n    version,\n    get default() { return this; }\n};\nexport default TOML;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBRTVCLE1BQU0sSUFBSSxHQUFHO0lBQ1osS0FBSztJQUNMLE9BQU87SUFDUCxJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0IsQ0FBQztBQUVGLGVBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uP3RleHQnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UnO1xuXG5jb25zdCBUT01MID0ge1xuXHRwYXJzZSxcblx0dmVyc2lvbixcblx0Z2V0IGRlZmF1bHQgKCkgeyByZXR1cm4gdGhpczsgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVE9NTDtcbiJdfQ=="
		]
}