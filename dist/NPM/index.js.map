{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","share/iterator.ts","../../j-orderify/dist/ESM/j-orderify!meta.js","../../j-orderify/src/export.ts","../../j-orderify/dist/ESM/j-orderify!.js","types/Table.ts","types/Integer.ts","share/options.ts","../../j-regexp/dist/ESM/j-regexp!meta.js","../../j-regexp/src/export.ts","../../j-regexp/dist/ESM/j-regexp!.js","share/RE/nested (readable).ts","share/RE/optimized (avoid overflow or lost).ts","types/Datetime.ts","types/Float.ts","types/String.ts","parse/on-the-spot.ts","parse/x-feature.ts","parse/level-loop.ts","parse.ts","install.ts","default.ts"],
	"names":
		["options.xob","iterator.throws","iterator.where","options.allowLonger","options.IntegerMin","options.IntegerMax","iterator.done","options.ctrl7F","RE.SYM_WHITESPACE","RE.PRE_WHITESPACE","RE.TAG_REST","RE.KEY_VALUE_PAIR","Datetime","RE.OFFSET_DATETIME","RE.OFFSET","RE.LOCAL_DATETIME","RE.LOCAL_DATE","RE.LOCAL_TIME","options.sFloat","options.useWhatToJoinMultiLineString","options.collect","options.TableDepends","options.openable","RE.KEYS","options.nonEmptyKey","RE.LITERAL_STRING","RE.MULTI_LINE_LITERAL_STRING","iterator.mark","iterator.must","RE.BASIC_STRING_exec","RE.MULTI_LINE_BASIC_STRING_exec_0","RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","options.enableInterpolationString","OFFSET","iterator.rest","iterator.next","RE.TABLE_DEFINITION_exec_groups","iterator.stacks_length","iterator.stacks_pop","RE.KEY_VALUE_PAIR_exec_groups","iterator.stacks_push","RE.VALUE_REST","options.moreDatetime","options.enableNull","options.IntegerDepends","RE._VALUE_PAIR","options.asStrings","options.asTables","options.asArrays","options.asFloats","options.asOffsetDateTimes","options.asLocalDateTimes","options.asLocalTimes","options.asLocalDates","options.asBooleans","options.asNulls","options.asIntegers","options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","iterator.stacks_insertBeforeLast","iterator.could","options.use","iterator.todo","options.process","options.clear"],
	"mappings":
		"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",
	"sourcesContent":
		[
			"export default '0.5.74';",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\n//import * as options from './options';\nconst NONE = [];\nlet sourceLines = NONE;\nlet lastLineIndex = -1;\nlet lineIndex = -1;\nfunction noop(lineRest) { return ''; }\nnoop.previous = noop;\nexport let stacks_length = 0;\nlet last = noop;\nexport function could() {\n    if (sourceLines !== NONE) {\n        throw Error('Inner error: parsing in parsing.');\n    }\n}\nconst EOL = /\\r?\\n/;\nexport function todo(source) {\n    sourceLines = source.split(EOL);\n    lastLineIndex = sourceLines.length - 1;\n    lineIndex = -1;\n    stacks_length = 0;\n    last = noop;\n}\nexport const next = () => sourceLines[++lineIndex];\nexport const rest = () => lineIndex !== lastLineIndex;\nexport const mark = () => lineIndex;\nexport function must(message, startIndex) {\n    lineIndex === lastLineIndex\n        && throws(new SyntaxError(message + ' is not close until the end of the file, which started from line ' + (startIndex + 1) + ': ' + sourceLines[startIndex]));\n    return sourceLines[++lineIndex];\n}\nexport const where = () => 'line ' + (lineIndex + 1) + ': ' + sourceLines[lineIndex];\nexport function done() {\n    sourceLines = NONE;\n    last = noop;\n}\nexport function stacks_pop() {\n    const item = last;\n    last = last.previous;\n    --stacks_length;\n    return item;\n}\nexport function stacks_push(item) {\n    item.previous = last;\n    last = item;\n    ++stacks_length;\n}\nexport function stacks_insertBeforeLast(item) {\n    item.previous = last.previous;\n    last.previous = item;\n    ++stacks_length;\n}\nexport function throws(error) {\n    if (sourceLines !== NONE) {\n        error.lineIndex = lineIndex;\n        error.lineNumber = lineIndex + 1;\n        //done();\n        //options.clear();\n    }\n    throw error;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsSUFBSSxDQUFDO0lBQ3JCLEVBQUUsYUFBYSxDQUFDO0FBQ2pCLENBQUM7QUFHRCxNQUFNLFVBQVUsTUFBTSxDQUFFLEtBQW9CO0lBQzNDLElBQUssV0FBVyxLQUFHLElBQUksRUFBRztRQUN6QixLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUM1QixLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsR0FBQyxDQUFDLENBQUM7UUFDL0IsU0FBUztRQUNULGtCQUFrQjtLQUNsQjtJQUNELE1BQU0sS0FBSyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTeW50YXhFcnJvciBmcm9tICcuU3ludGF4RXJyb3InO1xuaW1wb3J0IEVycm9yIGZyb20gJy5FcnJvcic7XG4vL2ltcG9ydCAqIGFzIG9wdGlvbnMgZnJvbSAnLi9vcHRpb25zJztcblxuXG5jb25zdCBOT05FIDpzdHJpbmdbXSA9IFtdO1xubGV0IHNvdXJjZUxpbmVzIDpzdHJpbmdbXSA9IE5PTkU7XG5sZXQgbGFzdExpbmVJbmRleCA6bnVtYmVyID0gLTE7XG5sZXQgbGluZUluZGV4IDpudW1iZXIgPSAtMTtcblxuZnVuY3Rpb24gbm9vcCAobGluZVJlc3QgOnN0cmluZykgOnN0cmluZyB7IHJldHVybiAnJzsgfVxubm9vcC5wcmV2aW91cyA9IG5vb3A7XG5cbmV4cG9ydCBsZXQgc3RhY2tzX2xlbmd0aCA9IDA7XG5sZXQgbGFzdCA6dHlwZW9mIG5vb3AgPSBub29wO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3VsZCAoKSA6dm9pZCB7XG5cdGlmICggc291cmNlTGluZXMhPT1OT05FICkgeyB0aHJvdyBFcnJvcignSW5uZXIgZXJyb3I6IHBhcnNpbmcgaW4gcGFyc2luZy4nKTsgfVxufVxuXG5jb25zdCBFT0wgPSAvXFxyP1xcbi87XG5leHBvcnQgZnVuY3Rpb24gdG9kbyAoc291cmNlIDpzdHJpbmcpIDp2b2lkIHtcblx0c291cmNlTGluZXMgPSBzb3VyY2Uuc3BsaXQoRU9MKTtcblx0bGFzdExpbmVJbmRleCA9IHNvdXJjZUxpbmVzLmxlbmd0aC0xO1xuXHRsaW5lSW5kZXggPSAtMTtcblx0c3RhY2tzX2xlbmd0aCA9IDA7XG5cdGxhc3QgPSBub29wO1xufVxuXG5leHBvcnQgY29uc3QgbmV4dCA9ICgpIDpzdHJpbmcgPT4gc291cmNlTGluZXNbKytsaW5lSW5kZXhdO1xuXG5leHBvcnQgY29uc3QgcmVzdCA9ICgpIDpib29sZWFuID0+IGxpbmVJbmRleCE9PWxhc3RMaW5lSW5kZXg7XG5cbmV4cG9ydCBjb25zdCBtYXJrID0gKCkgOm51bWJlciA9PiBsaW5lSW5kZXg7XG5cbmV4cG9ydCBmdW5jdGlvbiBtdXN0IChtZXNzYWdlIDpzdHJpbmcsIHN0YXJ0SW5kZXggOm51bWJlcikgOnN0cmluZyB7XG5cdGxpbmVJbmRleD09PWxhc3RMaW5lSW5kZXhcblx0JiYgdGhyb3dzKG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKycgaXMgbm90IGNsb3NlIHVudGlsIHRoZSBlbmQgb2YgdGhlIGZpbGUsIHdoaWNoIHN0YXJ0ZWQgZnJvbSBsaW5lICcrKCBzdGFydEluZGV4KzEgKSsnOiAnK3NvdXJjZUxpbmVzW3N0YXJ0SW5kZXhdKSk7XG5cdHJldHVybiBzb3VyY2VMaW5lc1srK2xpbmVJbmRleF07XG59XG5cbmV4cG9ydCBjb25zdCB3aGVyZSA9ICgpIDpzdHJpbmcgPT4gJ2xpbmUgJysoIGxpbmVJbmRleCsxICkrJzogJytzb3VyY2VMaW5lc1tsaW5lSW5kZXhdO1xuXG5leHBvcnQgZnVuY3Rpb24gZG9uZSAoKSA6dm9pZCB7XG5cdHNvdXJjZUxpbmVzID0gTk9ORTtcblx0bGFzdCA9IG5vb3A7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrc19wb3AgKCkgOnR5cGVvZiBub29wIHtcblx0Y29uc3QgaXRlbSA6dHlwZW9mIG5vb3AgPSBsYXN0O1xuXHRsYXN0ID0gbGFzdC5wcmV2aW91cztcblx0LS1zdGFja3NfbGVuZ3RoO1xuXHRyZXR1cm4gaXRlbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrc19wdXNoIChpdGVtIDp0eXBlb2Ygbm9vcCkgOnZvaWQge1xuXHRpdGVtLnByZXZpb3VzID0gbGFzdDtcblx0bGFzdCA9IGl0ZW07XG5cdCsrc3RhY2tzX2xlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrc19pbnNlcnRCZWZvcmVMYXN0IChpdGVtIDp0eXBlb2Ygbm9vcCkge1xuXHRpdGVtLnByZXZpb3VzID0gbGFzdC5wcmV2aW91cztcblx0bGFzdC5wcmV2aW91cyA9IGl0ZW07XG5cdCsrc3RhY2tzX2xlbmd0aDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdGhyb3dzIChlcnJvciA6RnJpZW5kbHlFcnJvcikgOm5ldmVyIHtcblx0aWYgKCBzb3VyY2VMaW5lcyE9PU5PTkUgKSB7XG5cdFx0ZXJyb3IubGluZUluZGV4ID0gbGluZUluZGV4O1xuXHRcdGVycm9yLmxpbmVOdW1iZXIgPSBsaW5lSW5kZXgrMTtcblx0XHQvL2RvbmUoKTtcblx0XHQvL29wdGlvbnMuY2xlYXIoKTtcblx0fVxuXHR0aHJvdyBlcnJvcjtcbn1cblxuZGVjbGFyZSBjbGFzcyBGcmllbmRseUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRsaW5lSW5kZXg/IDpudW1iZXI7XG5cdGxpbmVOdW1iZXI/IDpudW1iZXI7XG59XG4iXX0=",
			"/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.5.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */",
			"import version from './version?text';\nexport { version };\nimport WeakMap from '.WeakMap';\nimport Object from '.Object';\nimport create from '.Object.create';\nimport Set from '.Set';\nimport Proxy from '.Proxy';\nimport defineProperty from '.Reflect.defineProperty';\nimport deleteProperty from '.Reflect.deleteProperty';\nimport ownKeys from '.Reflect.ownKeys';\nconst ownKeysKeepers = new WeakMap;\nconst handlers = create(null, {\n    defineProperty: {\n        value(target, key, descriptor) {\n            if (defineProperty(target, key, descriptor)) {\n                ownKeysKeepers.get(target).add(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    deleteProperty: {\n        value(target, key) {\n            if (deleteProperty(target, key)) {\n                ownKeysKeepers.get(target).delete(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    ownKeys: {\n        value(target) {\n            return [...ownKeysKeepers.get(target)];\n        }\n    },\n});\nexport const orderify = (object) => {\n    ownKeysKeepers.set(object, new Set(ownKeys(object)));\n    return new Proxy(object, handlers);\n};\nexport class Orderified extends null {\n    constructor() {\n        const object = create(prototype);\n        ownKeysKeepers.set(object, new Set);\n        return new Proxy(object, handlers);\n    }\n}\nconst prototype = /*#__PURE__*/ function () {\n    delete Orderified.prototype.constructor;\n    Object.freeze(Orderified.prototype);\n    return Orderified.prototype;\n}();\nexport default {\n    version,\n    orderify,\n    Orderified,\n    get default() { return this; },\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbkIsT0FBTyxPQUFPLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE9BQU8sTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUNwQyxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUM7QUFDdkIsT0FBTyxLQUFLLE1BQU0sUUFBUSxDQUFDO0FBQzNCLE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sY0FBYyxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sT0FBTyxNQUFNLGtCQUFrQixDQUFDO0FBRXZDLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDO0FBRW5DLE1BQU0sUUFBUSxHQUFXLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDckMsY0FBYyxFQUFFO1FBQ2YsS0FBSyxDQUFFLE1BQWMsRUFBRSxHQUFvQixFQUFFLFVBQThCO1lBQzFFLElBQUssY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsVUFBVSxDQUFDLEVBQUc7Z0JBQzlDLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLElBQUksQ0FBQzthQUNaO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO0tBQ0Q7SUFDRCxjQUFjLEVBQUU7UUFDZixLQUFLLENBQUUsTUFBYyxFQUFFLEdBQW9CO1lBQzFDLElBQUssY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRztnQkFDbEMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLE9BQU8sSUFBSSxDQUFDO2FBQ1o7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNkLENBQUM7S0FDRDtJQUNELE9BQU8sRUFBRTtRQUNSLEtBQUssQ0FBRSxNQUFjO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDO0tBQ0Q7Q0FDRCxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRTtJQUNsRCxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxVQUFXLFNBQVEsSUFBSTtJQUNuQztRQUNDLE1BQU0sTUFBTSxHQUFlLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRDtBQUVELE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQztJQUMvQixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLE9BQU8sVUFBVSxDQUFDLFNBQVMsQ0FBQztBQUM3QixDQUFDLEVBQUUsQ0FBQztBQUVKLGVBQWU7SUFDZCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2ZXJzaW9uIGZyb20gJy4vdmVyc2lvbj90ZXh0JztcbmV4cG9ydCB7IHZlcnNpb24gfTtcblxuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLldlYWtNYXAnO1xuaW1wb3J0IE9iamVjdCBmcm9tICcuT2JqZWN0JztcbmltcG9ydCBjcmVhdGUgZnJvbSAnLk9iamVjdC5jcmVhdGUnO1xuaW1wb3J0IFNldCBmcm9tICcuU2V0JztcbmltcG9ydCBQcm94eSBmcm9tICcuUHJveHknO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy5SZWZsZWN0LmRlZmluZVByb3BlcnR5JztcbmltcG9ydCBkZWxldGVQcm9wZXJ0eSBmcm9tICcuUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSc7XG5pbXBvcnQgb3duS2V5cyBmcm9tICcuUmVmbGVjdC5vd25LZXlzJztcblxuY29uc3Qgb3duS2V5c0tlZXBlcnMgPSBuZXcgV2Vha01hcDtcblxuY29uc3QgaGFuZGxlcnMgOm9iamVjdCA9IGNyZWF0ZShudWxsLCB7XG5cdGRlZmluZVByb3BlcnR5OiB7XG5cdFx0dmFsdWUgKHRhcmdldCA6b2JqZWN0LCBrZXkgOnN0cmluZyB8IHN5bWJvbCwgZGVzY3JpcHRvciA6UHJvcGVydHlEZXNjcmlwdG9yKSB7XG5cdFx0XHRpZiAoIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSApIHtcblx0XHRcdFx0b3duS2V5c0tlZXBlcnMuZ2V0KHRhcmdldCkuYWRkKGtleSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0ZGVsZXRlUHJvcGVydHk6IHtcblx0XHR2YWx1ZSAodGFyZ2V0IDpvYmplY3QsIGtleSA6c3RyaW5nIHwgc3ltYm9sKSB7XG5cdFx0XHRpZiAoIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSApIHtcblx0XHRcdFx0b3duS2V5c0tlZXBlcnMuZ2V0KHRhcmdldCkuZGVsZXRlKGtleSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fSxcblx0b3duS2V5czoge1xuXHRcdHZhbHVlICh0YXJnZXQgOm9iamVjdCkgOiggc3RyaW5nIHwgc3ltYm9sIClbXSB7XG5cdFx0XHRyZXR1cm4gWy4uLm93bktleXNLZWVwZXJzLmdldCh0YXJnZXQpXTtcblx0XHR9XG5cdH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IG9yZGVyaWZ5ID0gKG9iamVjdCA6b2JqZWN0KSA6b2JqZWN0ID0+IHtcblx0b3duS2V5c0tlZXBlcnMuc2V0KG9iamVjdCwgbmV3IFNldChvd25LZXlzKG9iamVjdCkpKTtcblx0cmV0dXJuIG5ldyBQcm94eShvYmplY3QsIGhhbmRsZXJzKTtcbn07XG5cbmV4cG9ydCBjbGFzcyBPcmRlcmlmaWVkIGV4dGVuZHMgbnVsbCB7XG5cdGNvbnN0cnVjdG9yICgpIHtcblx0XHRjb25zdCBvYmplY3QgOk9yZGVyaWZpZWQgPSBjcmVhdGUocHJvdG90eXBlKTtcblx0XHRvd25LZXlzS2VlcGVycy5zZXQob2JqZWN0LCBuZXcgU2V0KTtcblx0XHRyZXR1cm4gbmV3IFByb3h5KG9iamVjdCwgaGFuZGxlcnMpO1xuXHR9XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IC8qI19fUFVSRV9fKi8gZnVuY3Rpb24gKCkge1xuXHRkZWxldGUgT3JkZXJpZmllZC5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cdE9iamVjdC5mcmVlemUoT3JkZXJpZmllZC5wcm90b3R5cGUpO1xuXHRyZXR1cm4gT3JkZXJpZmllZC5wcm90b3R5cGU7XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0dmVyc2lvbixcblx0b3JkZXJpZnksXG5cdE9yZGVyaWZpZWQsXG5cdGdldCBkZWZhdWx0ICgpIHsgcmV0dXJuIHRoaXM7IH0sXG59O1xuIl19",
			"﻿import './j-orderify!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-orderify */",
			"import { orderify } from '@ltd/j-orderify';\nimport create from '.Object.create';\nexport function Table() { }\nexport const OrderedTable = function Table() { return orderify(this); };\nOrderedTable.prototype = Table.prototype = create(null);\nexport const isTable = (value) => value instanceof Table;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUVwQyxNQUFNLFVBQVUsS0FBSyxLQUFZLENBQUM7QUFDbEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLFNBQVMsS0FBSyxLQUEwQixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUc3RixZQUFZLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVUsRUFBVyxFQUFFLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9yZGVyaWZ5IH0gZnJvbSAnQGx0ZC9qLW9yZGVyaWZ5JztcbmltcG9ydCBjcmVhdGUgZnJvbSAnLk9iamVjdC5jcmVhdGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFibGUgKCkgOnZvaWQgeyB9XG5leHBvcnQgY29uc3QgT3JkZXJlZFRhYmxlID0gZnVuY3Rpb24gVGFibGUgKHRoaXMgOm9iamVjdCkgOm9iamVjdCB7IHJldHVybiBvcmRlcmlmeSh0aGlzKTsgfTtcbmV4cG9ydCB0eXBlIFRhYmxlID0gdHlwZW9mIFRhYmxlIHwgdHlwZW9mIE9yZGVyZWRUYWJsZTtcblxuT3JkZXJlZFRhYmxlLnByb3RvdHlwZSA9IFRhYmxlLnByb3RvdHlwZSA9IGNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGNvbnN0IGlzVGFibGUgPSAodmFsdWUgOmFueSkgOmJvb2xlYW4gPT4gdmFsdWUgaW5zdGFuY2VvZiBUYWJsZTtcbiJdfQ==",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\nconst INTEGER = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)$/;\nconst XOB_INTEGER = /^\\+?0(?:x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*)$/;\nconst UNDERSCORES_SIGN = /_|^[-+]/g;\nexport const NumberInteger = (literal) => {\n    INTEGER.test(literal)\n        || options.xob && XOB_INTEGER.test(literal)\n        || iterator.throws(SyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where()));\n    const number = literal.startsWith('-')\n        ? -literal.replace(UNDERSCORES_SIGN, '')\n        : +literal.replace(UNDERSCORES_SIGN, '');\n    options.allowLonger\n        || isSafeInteger(number)\n        || iterator.throws(RangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes ' + literal + ' meet at ' + iterator.where()));\n    return number;\n};\nexport const BigIntInteger = (literal) => {\n    INTEGER.test(literal)\n        || options.xob && XOB_INTEGER.test(literal)\n        || iterator.throws(SyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where()));\n    let bigInt = BigInt(literal.replace(UNDERSCORES_SIGN, ''));\n    if (literal.startsWith('-')) {\n        bigInt = -bigInt;\n    }\n    options.allowLonger\n        || -9223372036854775808n <= bigInt && bigInt <= 9223372036854775807n // ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n        || iterator.throws(RangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes ' + literal + ' meet at ' + iterator.where()));\n    return bigInt;\n};\nexport const DependInteger = (literal) => {\n    const bigInt = BigIntInteger(literal);\n    return options.IntegerMin <= bigInt && bigInt <= options.IntegerMax ? +(bigInt + '') : bigInt;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsRUFBRSxDQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUMzRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3ludGF4RXJyb3IgZnJvbSAnLlN5bnRheEVycm9yJztcbmltcG9ydCBSYW5nZUVycm9yIGZyb20gJy5SYW5nZUVycm9yJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcbmltcG9ydCAqIGFzIG9wdGlvbnMgZnJvbSAnLi4vc2hhcmUvb3B0aW9ucyc7XG5pbXBvcnQgaXNTYWZlSW50ZWdlciBmcm9tICcuTnVtYmVyLmlzU2FmZUludGVnZXInO1xuaW1wb3J0IEJpZ0ludCBmcm9tICcuQmlnSW50JztcblxuY29uc3QgSU5URUdFUiA9IC9eWy0rXT8oPzowfFsxLTldXFxkKig/Ol9cXGQrKSopJC87XG5jb25zdCBYT0JfSU5URUdFUiA9IC9eXFwrPzAoPzp4WzAtOUEtRmEtZl0rKD86X1swLTlBLUZhLWZdKykqfG9bMC03XSsoPzpfWzAtN10rKSp8YlswMV0rKD86X1swMV0rKSopJC87XG5jb25zdCBVTkRFUlNDT1JFU19TSUdOID0gL198XlstK10vZztcblxuZXhwb3J0IGNvbnN0IE51bWJlckludGVnZXIgPSAobGl0ZXJhbCA6c3RyaW5nKSA6bnVtYmVyID0+IHtcblx0SU5URUdFUi50ZXN0KGxpdGVyYWwpXG5cdHx8IG9wdGlvbnMueG9iICYmIFhPQl9JTlRFR0VSLnRlc3QobGl0ZXJhbClcblx0fHwgaXRlcmF0b3IudGhyb3dzKFN5bnRheEVycm9yKCdJbnZhbGlkIEludGVnZXIgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKSk7XG5cdGNvbnN0IG51bWJlciA9IGxpdGVyYWwuc3RhcnRzV2l0aCgnLScpXG5cdFx0PyAtbGl0ZXJhbC5yZXBsYWNlKFVOREVSU0NPUkVTX1NJR04sICcnKVxuXHRcdDogK2xpdGVyYWwucmVwbGFjZShVTkRFUlNDT1JFU19TSUdOLCAnJyk7XG5cdG9wdGlvbnMuYWxsb3dMb25nZXJcblx0fHwgaXNTYWZlSW50ZWdlcihudW1iZXIpXG5cdHx8IGl0ZXJhdG9yLnRocm93cyhSYW5nZUVycm9yKCdJbnRlZ2VyIGRpZCBub3QgdXNlIEJpdEludCBtdXN0IGJlIE51bWJlci5pc1NhZmVJbnRlZ2VyLCBub3QgaW5jbHVkZXMgJytsaXRlcmFsKycgbWVldCBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpKTtcblx0cmV0dXJuIG51bWJlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBCaWdJbnRJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgOmJpZ2ludCA9PiB7XG5cdElOVEVHRVIudGVzdChsaXRlcmFsKVxuXHR8fCBvcHRpb25zLnhvYiAmJiBYT0JfSU5URUdFUi50ZXN0KGxpdGVyYWwpXG5cdHx8IGl0ZXJhdG9yLnRocm93cyhTeW50YXhFcnJvcignSW52YWxpZCBJbnRlZ2VyICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSkpO1xuXHRsZXQgYmlnSW50IDpiaWdpbnQgPSBCaWdJbnQobGl0ZXJhbC5yZXBsYWNlKFVOREVSU0NPUkVTX1NJR04sICcnKSk7XG5cdGlmICggbGl0ZXJhbC5zdGFydHNXaXRoKCctJykgKSB7IGJpZ0ludCA9IC1iaWdJbnQ7IH1cblx0b3B0aW9ucy5hbGxvd0xvbmdlclxuXHR8fCAtOTIyMzM3MjAzNjg1NDc3NTgwOG48PWJpZ0ludCAmJiBiaWdJbnQ8PTkyMjMzNzIwMzY4NTQ3NzU4MDduLy8gKCBtaW4gPSAtKDJuKiooNjRuLTFuKSkgfHwgfm1heCApIDw9IGxvbmcgPD0gKCBtYXggPSAybioqKDY0bi0xbiktMW4gfHwgfm1pbiApXG5cdHx8IGl0ZXJhdG9yLnRocm93cyhSYW5nZUVycm9yKCdJbnRlZ2VyIGV4cGVjdCA2NCBiaXQgcmFuZ2UgKC05LDIyMywzNzIsMDM2LDg1NCw3NzUsODA4IHRvIDksMjIzLDM3MiwwMzYsODU0LDc3NSw4MDcpLCBub3QgaW5jbHVkZXMgJytsaXRlcmFsKycgbWVldCBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpKTtcblx0cmV0dXJuIGJpZ0ludDtcbn07XG5cbmV4cG9ydCBjb25zdCBEZXBlbmRJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgPT4ge1xuXHRjb25zdCBiaWdJbnQgOmJpZ2ludCA9IEJpZ0ludEludGVnZXIobGl0ZXJhbCk7XG5cdHJldHVybiBvcHRpb25zLkludGVnZXJNaW48PWJpZ0ludCAmJiBiaWdJbnQ8PW9wdGlvbnMuSW50ZWdlck1heCA/ICsoIGJpZ0ludCsnJyApIDogYmlnSW50O1xufTtcbiJdfQ==",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport Proxy from '.Proxy';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from '../types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from '../types/Integer';\nimport * as iterator from './iterator';\n/* options */\nexport let useWhatToJoinMultiLineString;\nexport let IntegerDepends, IntegerMin, IntegerMax;\nexport let moreDatetime;\nexport let ctrl7F;\nexport let nonEmptyKey;\nexport let xob;\nexport let sFloat;\nexport let TableDepends;\nexport let openable;\nexport let allowLonger;\nexport let enableNull;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma;\nexport let enableInterpolationString;\nexport let asNulls, asStrings, asTables, asArrays, asBooleans, asFloats, asIntegers;\nexport let asOffsetDateTimes, asLocalDateTimes, asLocalDates, asLocalTimes;\nlet processor;\n/* xOptions.mix */\nexport const unType = (array) => array;\nexport const { asInlineArrayOfNulls, asInlineArrayOfStrings, asInlineArrayOfTables, asInlineArrayOfArrays, asInlineArrayOfBooleans, asInlineArrayOfFloats, asInlineArrayOfIntegers, asInlineArrayOfOffsetDateTimes, asInlineArrayOfLocalDateTimes, asInlineArrayOfLocalDates, asInlineArrayOfLocalTimes, } = new Proxy(new WeakMap, {\n    get: (arrayTypes) => function typify(array) {\n        if (arrayTypes.has(array)) {\n            arrayTypes.get(array) === typify\n                || iterator.throws(TypeError('Types in array must be same. Check ' + iterator.where()));\n        }\n        else {\n            arrayTypes.set(array, typify);\n        }\n        return array;\n    }\n});\nlet collection = [];\nfunction collect_on(each) { collection.push(each); }\nfunction collect_off(each) { throw iterator.throws(SyntaxError(iterator.where())); }\nexport let collect = collect_off;\nexport function process() {\n    let index = collection.length;\n    if (index) {\n        iterator.done();\n        const process = processor;\n        const queue = collection;\n        processor = null;\n        collection = [];\n        while (index--) {\n            process(queue.pop());\n        }\n    }\n}\n/* use & clear */\nexport function clear() {\n    processor = null;\n    collection.length = 0;\n}\nexport function use(specificationVersion, multiLineJoiner, useBigInt, xOptions) {\n    if (specificationVersion !== 0.5 && specificationVersion !== 0.4) {\n        throw new Error('TOML.parse(,specificationVersion)');\n    }\n    if (typeof multiLineJoiner !== 'string') {\n        throw new TypeError('TOML.parse(,,multiLineJoiner)');\n    }\n    if (useBigInt === true) {\n        IntegerDepends = BigIntInteger;\n    }\n    else if (useBigInt === false) {\n        IntegerDepends = NumberInteger;\n    }\n    else {\n        if (typeof useBigInt !== 'number') {\n            throw new TypeError('TOML.parse(,,,useBigInt)');\n        }\n        if (!isSafeInteger(useBigInt)) {\n            throw new RangeError('TOML.parse(...useBigInt)');\n        }\n        IntegerDepends = DependInteger;\n        if (useBigInt >= 0) {\n            IntegerMax = useBigInt;\n            IntegerMin = -useBigInt;\n        }\n        else {\n            IntegerMin = useBigInt;\n            IntegerMax = -useBigInt - 1;\n        }\n    }\n    useWhatToJoinMultiLineString = multiLineJoiner;\n    moreDatetime = ctrl7F = xob = sFloat = specificationVersion === 0.5;\n    nonEmptyKey = openable = specificationVersion === 0.4;\n    let typify;\n    if (xOptions === null) {\n        TableDepends = Table;\n        allowLonger = enableNull = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = false;\n        processor = null;\n        typify = true;\n    }\n    else {\n        TableDepends = xOptions.order ? OrderedTable : Table;\n        allowLonger = !!xOptions.longer;\n        enableNull = !!xOptions.null;\n        allowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!xOptions.multi;\n        enableInterpolationString = !!xOptions.ins;\n        typify = !xOptions.mix;\n        processor = xOptions.new || null;\n        if (processor) {\n            if (typeof processor !== 'function') {\n                throw new TypeError('TOML.parse(,,,,xOptions.tag)');\n            }\n            if (typify) {\n                throw new Error('TOML.parse(,,,,xOptions) xOptions.tag needs xOptions.mix to be true');\n            }\n            collect = collect_on;\n        }\n        else {\n            collect = collect_off;\n        }\n    }\n    if (typify) {\n        asNulls = asInlineArrayOfNulls;\n        asStrings = asInlineArrayOfStrings;\n        asTables = asInlineArrayOfTables;\n        asArrays = asInlineArrayOfArrays;\n        asBooleans = asInlineArrayOfBooleans;\n        asFloats = asInlineArrayOfFloats;\n        asIntegers = asInlineArrayOfIntegers;\n        asOffsetDateTimes = asInlineArrayOfOffsetDateTimes;\n        asLocalDateTimes = asInlineArrayOfLocalDateTimes;\n        asLocalDates = asInlineArrayOfLocalDates;\n        asLocalTimes = asInlineArrayOfLocalTimes;\n    }\n    else {\n        asNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = unType;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"/*!\n * 模块名称：@ltd/j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。\n   　　　　　More readable way for creating RegExp.\n * 模块版本：1.0.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */",
			"import version from './version?text';\nexport { version };\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\nvar NT = /[\\n\\t]/g;\nfunction Source(raw, substitutions) {\n    var source = raw[0];\n    for (var length = substitutions.length, index = 0; index < length;) {\n        var substitution = substitutions[index];\n        source += (typeof substitution === 'string' ? substitution : substitution.source) + raw[++index];\n    }\n    return source.replace(NT, '');\n}\nfunction newRegExp(template) {\n    return RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\nexport { newRegExp };\nexport function NewRegExp(flags) {\n    return function newRegExp(template) {\n        return RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n    };\n}\nvar jRegExp = {\n    newRegExp: newRegExp,\n    NewRegExp: NewRegExp,\n    version: version\n};\njRegExp['default'] = jRegExp;\nexport default jRegExp;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFFbkIsT0FBTyxNQUFNLE1BQU0sU0FBUyxDQUFDO0FBQzdCLE9BQU8sS0FBSyxNQUFNLHdCQUF3QixDQUFDO0FBRTNDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQztBQUVuQixTQUFTLE1BQU0sQ0FBRSxHQUFHLEVBQUUsYUFBYTtJQUNsQyxJQUFJLE1BQU0sR0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUIsS0FBTSxJQUFJLE1BQU0sR0FBVyxhQUFhLENBQUMsTUFBTSxFQUFFLEtBQUssR0FBVyxDQUFDLEVBQUUsS0FBSyxHQUFDLE1BQU0sR0FBSTtRQUNuRixJQUFJLFlBQVksR0FBb0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pELE1BQU0sSUFBSSxDQUFFLE9BQU8sWUFBWSxLQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFFLEdBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDL0Y7SUFDRCxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFHRCxTQUFTLFNBQVMsQ0FBRSxRQUE4QjtJQUNqRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUNELE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUVyQixNQUFNLFVBQVUsU0FBUyxDQUFFLEtBQWE7SUFDdkMsT0FBTyxTQUFTLFNBQVMsQ0FBRSxRQUE4QjtRQUN4RCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RFLENBQUMsQ0FBQztBQUNILENBQUM7QUFFRCxJQUFJLE9BQU8sR0FBRztJQUNiLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLE9BQU8sRUFBRSxPQUFPO0NBQ2hCLENBQUM7QUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQzdCLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uP3RleHQnO1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuXG5pbXBvcnQgUmVnRXhwIGZyb20gJy5SZWdFeHAnO1xuaW1wb3J0IHNsaWNlIGZyb20gJy5BcnJheS5wcm90b3R5cGUuc2xpY2UnO1xuXG52YXIgTlQgPSAvW1xcblxcdF0vZztcblxuZnVuY3Rpb24gU291cmNlIChyYXcsIHN1YnN0aXR1dGlvbnMpIDpzdHJpbmcge1xuXHR2YXIgc291cmNlIDpzdHJpbmcgPSByYXdbMF07XG5cdGZvciAoIHZhciBsZW5ndGggOm51bWJlciA9IHN1YnN0aXR1dGlvbnMubGVuZ3RoLCBpbmRleCA6bnVtYmVyID0gMDsgaW5kZXg8bGVuZ3RoOyApIHtcblx0XHR2YXIgc3Vic3RpdHV0aW9uIDpzdHJpbmcgfCBSZWdFeHAgPSBzdWJzdGl0dXRpb25zW2luZGV4XTtcblx0XHRzb3VyY2UgKz0gKCB0eXBlb2Ygc3Vic3RpdHV0aW9uPT09J3N0cmluZycgPyBzdWJzdGl0dXRpb24gOiBzdWJzdGl0dXRpb24uc291cmNlICkrcmF3WysraW5kZXhdO1xuXHR9XG5cdHJldHVybiBzb3VyY2UucmVwbGFjZShOVCwgJycpO1xufVxuXG5mdW5jdGlvbiBuZXdSZWdFeHAgKHRlbXBsYXRlIDpUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4uc3Vic3RpdHV0aW9ucyA6KCBzdHJpbmcgfCBSZWdFeHAgKVtdKSA6UmVnRXhwO1xuZnVuY3Rpb24gbmV3UmVnRXhwICh0ZW1wbGF0ZSA6VGVtcGxhdGVTdHJpbmdzQXJyYXkpIDpSZWdFeHAge1xuXHRyZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSkpO1xufVxuZXhwb3J0IHsgbmV3UmVnRXhwIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBOZXdSZWdFeHAgKGZsYWdzIDpzdHJpbmcpIDp0eXBlb2YgbmV3UmVnRXhwIHtcblx0cmV0dXJuIGZ1bmN0aW9uIG5ld1JlZ0V4cCAodGVtcGxhdGUgOlRlbXBsYXRlU3RyaW5nc0FycmF5KSA6UmVnRXhwIHtcblx0XHRyZXR1cm4gUmVnRXhwKFNvdXJjZSh0ZW1wbGF0ZS5yYXcsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSksIGZsYWdzKTtcblx0fTtcbn1cblxudmFyIGpSZWdFeHAgPSB7XG5cdG5ld1JlZ0V4cDogbmV3UmVnRXhwLFxuXHROZXdSZWdFeHA6IE5ld1JlZ0V4cCxcblx0dmVyc2lvbjogdmVyc2lvblxufTtcbmpSZWdFeHBbJ2RlZmF1bHQnXSA9IGpSZWdFeHA7XG5leHBvcnQgZGVmYXVsdCBqUmVnRXhwO1xuIl19",
			"﻿import './j-regexp!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-regexp */",
			"import { newRegExp } from '@ltd/j-regexp';\n/* types */\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\nconst YMD = newRegExp `\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t(?:0[13578]|1[02])-${_31_}\n\t|\n\t\t(?:0[469]|11)-${_30_}\n\t|\n\t\t02-${_29_}\n\t)`;\nconst HMS_ = newRegExp `\n\t${_23_}:${_59_}:${_59_}(?:\\.\\d+)?`;\nexport const OFFSET = /(?:Z|[+-]\\d\\d:\\d\\d)$/;\nexport const OFFSET_DATETIME = newRegExp `\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t${OFFSET}`;\nexport const LOCAL_DATETIME = newRegExp `\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t$`;\nexport const LOCAL_DATE = newRegExp `\n\t^\n\t${YMD}\n\t$`;\nexport const LOCAL_TIME = newRegExp `\n\t^\n\t${HMS_}\n\t$`;\n/* parse */\nconst Whitespace = /[ \\t]/;\nexport const PRE_WHITESPACE = newRegExp `\n\t^${Whitespace}+`;\nexport const KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\nexport const VALUE_REST = newRegExp `\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\nexport const LITERAL_STRING = newRegExp `\n\t^\n\t'([^']*)'\n\t${Whitespace}*\n\t([^]*)`;\nexport const MULTI_LINE_LITERAL_STRING = newRegExp `\n\t^\n\t([^]*?)\n\t'''\n\t${Whitespace}*\n\t([^]*)`;\nexport const SYM_WHITESPACE = newRegExp `\n\t^\n\t[^]\n\t${Whitespace}*`;\nconst Tag = /[^()\\\\\"'`\\r\\n\\u2028\\u2029]+/;\nexport const KEY_VALUE_PAIR = newRegExp `\n\t^\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t=\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t(\n\t\t[^ \\t#]\n\t\t[^]*\n\t)\n\t$`;\nexport const _VALUE_PAIR = newRegExp `\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^ \\t#][^]*)\n\t$`;\nexport const TAG_REST = newRegExp `\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lc3RlZCAocmVhZGFibGUpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsV0FBVztBQUVYLE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDO0FBQ3JDLE1BQU0sSUFBSSxHQUFHLHNCQUFzQixDQUFDO0FBQ3BDLE1BQU0sSUFBSSxHQUFHLHlCQUF5QixDQUFDO0FBQ3ZDLE1BQU0sSUFBSSxHQUFHLG1CQUFtQixDQUFDO0FBQ2pDLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQztBQUV2QixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUE7Ozt1QkFHRSxJQUFJOztrQkFFVCxJQUFJOztPQUVmLElBQUk7R0FDUixDQUFDO0FBRUosTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFBO0dBQ25CLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxZQUFZLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLHNCQUFzQixDQUFDO0FBRTdDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUE7O0dBRXJDLEdBQUc7O0dBRUgsSUFBSTtHQUNKLE1BQU0sRUFBRSxDQUFDO0FBRVosTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQTs7R0FFcEMsR0FBRzs7R0FFSCxJQUFJO0dBQ0osQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUE7O0dBRWhDLEdBQUc7R0FDSCxDQUFDO0FBRUosTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQTs7R0FFaEMsSUFBSTtHQUNKLENBQUM7QUFFSixXQUFXO0FBRVgsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBRTNCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUE7SUFDbkMsVUFBVSxHQUFHLENBQUM7QUFFbEIsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLHNDQUFzQyxDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUE7Ozs7OztHQU1oQyxVQUFVOztHQUVWLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFBOzs7R0FHcEMsVUFBVTtRQUNMLENBQUM7QUFFVCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxTQUFTLENBQUE7Ozs7R0FJL0MsVUFBVTtRQUNMLENBQUM7QUFFVCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFBOzs7R0FHcEMsVUFBVSxHQUFHLENBQUM7QUFHakIsTUFBTSxHQUFHLEdBQUcsNkJBQTZCLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQTs7R0FFcEMsVUFBVTs7T0FFTixHQUFHO0lBQ04sVUFBVTs7O0dBR1gsVUFBVTs7T0FFTixHQUFHO0lBQ04sVUFBVTs7Ozs7O0dBTVgsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUE7O01BRTlCLEdBQUc7R0FDTixVQUFVOztHQUVWLENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFBOztNQUUzQixHQUFHO0dBQ04sVUFBVTs7R0FFVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmV3UmVnRXhwIH0gZnJvbSAnQGx0ZC9qLXJlZ2V4cCc7XG5cbi8qIHR5cGVzICovXG5cbmNvbnN0IF8yOV8gPSAvKD86MFsxLTldfDFcXGR8MlswLTldKS87XG5jb25zdCBfMzBfID0gLyg/OjBbMS05XXxbMTJdXFxkfDMwKS87XG5jb25zdCBfMzFfID0gLyg/OjBbMS05XXxbMTJdXFxkfDNbMDFdKS87XG5jb25zdCBfMjNfID0gLyg/OlswMV1cXGR8MlswLTNdKS87XG5jb25zdCBfNTlfID0gL1swLTVdXFxkLztcblxuY29uc3QgWU1EID0gbmV3UmVnRXhwYFxuXHRcXGRcXGRcXGRcXGQtXG5cdCg/OlxuXHRcdCg/OjBbMTM1NzhdfDFbMDJdKS0ke18zMV99XG5cdHxcblx0XHQoPzowWzQ2OV18MTEpLSR7XzMwX31cblx0fFxuXHRcdDAyLSR7XzI5X31cblx0KWA7XG5cbmNvbnN0IEhNU18gPSBuZXdSZWdFeHBgXG5cdCR7XzIzX306JHtfNTlffToke181OV99KD86XFwuXFxkKyk/YDtcblxuZXhwb3J0IGNvbnN0IE9GRlNFVCA9IC8oPzpafFsrLV1cXGRcXGQ6XFxkXFxkKSQvO1xuXG5leHBvcnQgY29uc3QgT0ZGU0VUX0RBVEVUSU1FID0gbmV3UmVnRXhwYFxuXHReXG5cdCR7WU1EfVxuXHRbVCBdXG5cdCR7SE1TX31cblx0JHtPRkZTRVR9YDtcblxuZXhwb3J0IGNvbnN0IExPQ0FMX0RBVEVUSU1FID0gbmV3UmVnRXhwYFxuXHReXG5cdCR7WU1EfVxuXHRbVCBdXG5cdCR7SE1TX31cblx0JGA7XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9EQVRFID0gbmV3UmVnRXhwYFxuXHReXG5cdCR7WU1EfVxuXHQkYDtcblxuZXhwb3J0IGNvbnN0IExPQ0FMX1RJTUUgPSBuZXdSZWdFeHBgXG5cdF5cblx0JHtITVNffVxuXHQkYDtcblxuLyogcGFyc2UgKi9cblxuY29uc3QgV2hpdGVzcGFjZSA9IC9bIFxcdF0vO1xuXG5leHBvcnQgY29uc3QgUFJFX1dISVRFU1BBQ0UgPSBuZXdSZWdFeHBgXG5cdF4ke1doaXRlc3BhY2V9K2A7XG5cbmV4cG9ydCBjb25zdCBLRVlTID0gL1tcXHctXSt8XCIoPzpbXlxcXFxcIl0rfFxcXFxbXl0pKlwifCdbXiddKicvZztcblxuZXhwb3J0IGNvbnN0IFZBTFVFX1JFU1QgPSBuZXdSZWdFeHBgXG5cdF5cblx0KFxuXHRcdCg/OlxcZFxcZFxcZFxcZC1cXGRcXGQtXFxkXFxkIFxcZCk/XG5cdFx0W1xcd1xcLSsuOl0rXG5cdClcblx0JHtXaGl0ZXNwYWNlfSpcblx0KFteXSopXG5cdCRgO1xuXG5leHBvcnQgY29uc3QgTElURVJBTF9TVFJJTkcgPSBuZXdSZWdFeHBgXG5cdF5cblx0JyhbXiddKiknXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXl0qKWA7XG5cbmV4cG9ydCBjb25zdCBNVUxUSV9MSU5FX0xJVEVSQUxfU1RSSU5HID0gbmV3UmVnRXhwYFxuXHReXG5cdChbXl0qPylcblx0JycnXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXl0qKWA7XG5cbmV4cG9ydCBjb25zdCBTWU1fV0hJVEVTUEFDRSA9IG5ld1JlZ0V4cGBcblx0XlxuXHRbXl1cblx0JHtXaGl0ZXNwYWNlfSpgO1xuXG5cbmNvbnN0IFRhZyA9IC9bXigpXFxcXFwiJ2BcXHJcXG5cXHUyMDI4XFx1MjAyOV0rLztcblxuZXhwb3J0IGNvbnN0IEtFWV9WQUxVRV9QQUlSID0gbmV3UmVnRXhwYFxuXHReXG5cdCR7V2hpdGVzcGFjZX0qXG5cdCg/OlxuXHRcdFxcKCgke1RhZ30pXFwpXG5cdFx0JHtXaGl0ZXNwYWNlfSpcblx0KT9cblx0PVxuXHQke1doaXRlc3BhY2V9KlxuXHQoPzpcblx0XHRcXCgoJHtUYWd9KVxcKVxuXHRcdCR7V2hpdGVzcGFjZX0qXG5cdCk/XG5cdChcblx0XHRbXiBcXHQjXVxuXHRcdFteXSpcblx0KVxuXHQkYDtcblxuZXhwb3J0IGNvbnN0IF9WQUxVRV9QQUlSID0gbmV3UmVnRXhwYFxuXHReXG5cdFxcKCgke1RhZ30pXFwpXG5cdCR7V2hpdGVzcGFjZX0qXG5cdChbXiBcXHQjXVteXSopXG5cdCRgO1xuXG5leHBvcnQgY29uc3QgVEFHX1JFU1QgPSBuZXdSZWdFeHBgXG5cdF5cblx0XFwoKCR7VGFnfSlcXClcblx0JHtXaGl0ZXNwYWNlfSpcblx0KFteXSopXG5cdCRgO1xuIl19",
			"import SyntaxError from '.SyntaxError';\nimport * as options from '../options';\nimport * as iterator from '../iterator';\nimport * as RE from './nested (readable)';\n/* parser */\nconst MULTI_LINE_BASIC_STRING = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0(_) {\n    for (let _0 = '';;) {\n        if (_ === '') {\n            return _0;\n        }\n        const $ = MULTI_LINE_BASIC_STRING.exec(_);\n        if ($ === null) {\n            return _0;\n        }\n        _0 += $[0];\n        _ = _.slice($[0].length);\n    }\n}\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(_) {\n    return _.replace(options.ctrl7F ? ESCAPED_EXCLUDE_CONTROL_CHARACTER : ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER, '') === '';\n}\nconst BASIC_STRING = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nconst BASIC_STRING_LESSER = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec(_2) {\n    const basic_string = options.ctrl7F ? BASIC_STRING : BASIC_STRING_LESSER;\n    _2 = _2.slice(1);\n    for (let _1 = '';;) {\n        const $ = basic_string.exec(_2);\n        if ($ === null) {\n            _2.startsWith('\"') || iterator.throws(SyntaxError(iterator.where()));\n            return { 1: _1, 2: _2.replace(RE.SYM_WHITESPACE, '') };\n        }\n        _1 += $[0];\n        _2 = _2.slice($[0].length);\n    }\n}\nconst BARE_KEY = /^[\\w-]+/;\nconst LITERAL_KEY = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst LITERAL_KEY_LESSER = /^'[^'\\x00-\\x08\\x0B-\\x1F]*'/;\nconst DOT_KEY = /^[ \\t]*\\.[ \\t]*/;\nexport function TABLE_DEFINITION_exec_groups(_) {\n    const $_asArrayItem$$ = _.charAt(1) === '[';\n    _ = _.slice($_asArrayItem$$ ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    const keys = getKeys(_);\n    _ = _.slice(keys.length).replace(RE.PRE_WHITESPACE, '');\n    let tagInner = '';\n    if (_.startsWith('(')) {\n        ({ 1: tagInner, 2: _ } = RE.TAG_REST.exec(_) || iterator.throws(SyntaxError(iterator.where())));\n    }\n    _.startsWith(']') || iterator.throws(SyntaxError(iterator.where()));\n    const $$asArrayItem$_ = _.charAt(1) === ']';\n    _ = _.slice($$asArrayItem$_ ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    let tagOuter = '';\n    if (_.startsWith('(')) {\n        ({ 1: tagOuter, 2: _ } = RE.TAG_REST.exec(_) || iterator.throws(SyntaxError(iterator.where())));\n    }\n    _ === '' || _.startsWith('#') || iterator.throws(SyntaxError(iterator.where()));\n    return { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter };\n}\nexport function KEY_VALUE_PAIR_exec_groups(_) {\n    const _1 = getKeys(_);\n    const $ = RE.KEY_VALUE_PAIR.exec(_.slice(_1.length)) || iterator.throws(SyntaxError(iterator.where()));\n    return { left: _1, tagLeft: $[1] || '', tagRight: $[2] || '', right: $[3] };\n}\nfunction getKeys(_) {\n    const literal_key = options.ctrl7F ? LITERAL_KEY : LITERAL_KEY_LESSER;\n    for (let keys = '';;) {\n        if (_.startsWith('\"')) {\n            _ = _.slice(1);\n            for (let key = '\"';;) {\n                const $ = BASIC_STRING.exec(_);\n                if ($ === null) {\n                    _.startsWith('\"') || iterator.throws(SyntaxError(iterator.where()));\n                    _ = _.slice(1);\n                    keys += key + '\"';\n                    break;\n                }\n                _ = _.slice($[0].length);\n                key += $[0];\n            }\n        }\n        else {\n            const key = ((_.startsWith('\\'') ? literal_key : BARE_KEY).exec(_) || iterator.throws(SyntaxError(iterator.where())))[0];\n            _ = _.slice(key.length);\n            keys += key;\n        }\n        const $ = DOT_KEY.exec(_);\n        if ($ === null) {\n            return keys;\n        }\n        _ = _.slice($[0].length);\n        keys += $[0];\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport WeakMap from '.WeakMap';\nimport Date from '.Date';\nimport * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\nconst literal_cache = new WeakMap;\nconst value_cache = new WeakMap;\nclass Datetime extends Date {\n    constructor(expression, literal) {\n        super(expression);\n        literal_cache.set(this, literal);\n        value_cache.set(this, this.getTime());\n    }\n    // Date.prototype.toJSON => toISOString\n    toISOString() {\n        if (this.getTime() === value_cache.get(this)) {\n            return literal_cache.get(this);\n        }\n        throw new Error('Datetime value has been modified.');\n    }\n}\nexport class OffsetDateTime extends Datetime {\n    constructor(literal) {\n        RE.OFFSET_DATETIME.test(literal)\n            || iterator.throws(SyntaxError('Invalid Offset Date-Time ' + literal + ' at ' + iterator.where()));\n        super(literal.replace(' ', 'T'), literal);\n    }\n    get '.'() {\n        const index = literal_cache.get(this).indexOf('.') + 1;\n        return index ? literal_cache.get(this).slice(index).replace(RE.OFFSET, '') : '';\n    }\n}\nexport class LocalDateTime extends Datetime {\n    constructor(literal) {\n        RE.LOCAL_DATETIME.test(literal)\n            || iterator.throws(SyntaxError('Invalid Local Date-Time ' + literal + ' at ' + iterator.where()));\n        super(literal.replace(' ', 'T'), literal);\n    }\n    get '.'() {\n        const index = literal_cache.get(this).indexOf('.') + 1;\n        return index ? literal_cache.get(this).slice(index) : '';\n    }\n}\nexport class LocalDate extends Datetime {\n    constructor(literal) {\n        RE.LOCAL_DATE.test(literal)\n            || iterator.throws(SyntaxError('Invalid Local Date ' + literal + ' at ' + iterator.where()));\n        super(literal + 'T00:00:00.000', literal);\n    }\n    get '.'() { return ''; }\n}\nexport class LocalTime extends Datetime {\n    constructor(literal) {\n        RE.LOCAL_TIME.test(literal)\n            || iterator.throws(SyntaxError('Invalid Local Time ' + literal + ' at ' + iterator.where()));\n        super('1970-01-01T' + literal, literal);\n    }\n    get '.'() {\n        const index = literal_cache.get(this).indexOf('.') + 1;\n        return index ? literal_cache.get(this).slice(index) : '';\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QztJQUMxRCxDQUFDO0NBQ0Q7QUFFRCxNQUFNLE9BQU8sU0FBVSxTQUFRLFFBQVE7SUFDdEMsWUFBYSxPQUFlO1FBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztlQUN4QixRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsR0FBQyxPQUFPLEdBQUMsTUFBTSxHQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkYsS0FBSyxDQUFDLE9BQU8sR0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELElBQUksR0FBRyxLQUFNLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN6QjtBQUVELE1BQU0sT0FBTyxTQUFVLFNBQVEsUUFBUTtJQUN0QyxZQUFhLE9BQWU7UUFDM0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2VBQ3hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLHFCQUFxQixHQUFDLE9BQU8sR0FBQyxNQUFNLEdBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RixLQUFLLENBQUMsYUFBYSxHQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsSUFBSSxHQUFHO1FBQ04sTUFBTSxLQUFLLEdBQVcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1FBQzdELE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFELENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTeW50YXhFcnJvciBmcm9tICcuU3ludGF4RXJyb3InO1xuaW1wb3J0IEVycm9yIGZyb20gJy5FcnJvcic7XG5pbXBvcnQgV2Vha01hcCBmcm9tICcuV2Vha01hcCc7XG5pbXBvcnQgRGF0ZSBmcm9tICcuRGF0ZSc7XG5pbXBvcnQgKiBhcyBSRSBmcm9tICcuLi9zaGFyZS9SRSc7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICcuLi9zaGFyZS9pdGVyYXRvcic7XG5cbmNvbnN0IGxpdGVyYWxfY2FjaGUgPSBuZXcgV2Vha01hcDtcbmNvbnN0IHZhbHVlX2NhY2hlID0gbmV3IFdlYWtNYXA7XG5cbmNsYXNzIERhdGV0aW1lIGV4dGVuZHMgRGF0ZSB7XG5cdGNvbnN0cnVjdG9yIChleHByZXNzaW9uIDpzdHJpbmcsIGxpdGVyYWwgOnN0cmluZykge1xuXHRcdHN1cGVyKGV4cHJlc3Npb24pO1xuXHRcdGxpdGVyYWxfY2FjaGUuc2V0KHRoaXMsIGxpdGVyYWwpO1xuXHRcdHZhbHVlX2NhY2hlLnNldCh0aGlzLCB0aGlzLmdldFRpbWUoKSk7XG5cdH1cblx0Ly8gRGF0ZS5wcm90b3R5cGUudG9KU09OID0+IHRvSVNPU3RyaW5nXG5cdHRvSVNPU3RyaW5nICh0aGlzIDpEYXRldGltZSkgOnN0cmluZyB7XG5cdFx0aWYgKCB0aGlzLmdldFRpbWUoKT09PXZhbHVlX2NhY2hlLmdldCh0aGlzKSApIHsgcmV0dXJuIGxpdGVyYWxfY2FjaGUuZ2V0KHRoaXMpOyB9XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdEYXRldGltZSB2YWx1ZSBoYXMgYmVlbiBtb2RpZmllZC4nKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgT2Zmc2V0RGF0ZVRpbWUgZXh0ZW5kcyBEYXRldGltZSB7XG5cdGNvbnN0cnVjdG9yIChsaXRlcmFsIDpzdHJpbmcpIHtcblx0XHRSRS5PRkZTRVRfREFURVRJTUUudGVzdChsaXRlcmFsKVxuXHRcdHx8IGl0ZXJhdG9yLnRocm93cyhTeW50YXhFcnJvcignSW52YWxpZCBPZmZzZXQgRGF0ZS1UaW1lICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSkpO1xuXHRcdHN1cGVyKGxpdGVyYWwucmVwbGFjZSgnICcsICdUJyksIGxpdGVyYWwpO1xuXHR9XG5cdGdldCAnLicgKCkge1xuXHRcdGNvbnN0IGluZGV4IDpudW1iZXIgPSBsaXRlcmFsX2NhY2hlLmdldCh0aGlzKS5pbmRleE9mKCcuJykrMTtcblx0XHRyZXR1cm4gaW5kZXggPyBsaXRlcmFsX2NhY2hlLmdldCh0aGlzKS5zbGljZShpbmRleCkucmVwbGFjZShSRS5PRkZTRVQsICcnKSA6ICcnO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbERhdGVUaW1lIGV4dGVuZHMgRGF0ZXRpbWUge1xuXHRjb25zdHJ1Y3RvciAobGl0ZXJhbCA6c3RyaW5nKSB7XG5cdFx0UkUuTE9DQUxfREFURVRJTUUudGVzdChsaXRlcmFsKVxuXHRcdHx8IGl0ZXJhdG9yLnRocm93cyhTeW50YXhFcnJvcignSW52YWxpZCBMb2NhbCBEYXRlLVRpbWUgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKSk7XG5cdFx0c3VwZXIobGl0ZXJhbC5yZXBsYWNlKCcgJywgJ1QnKSwgbGl0ZXJhbCk7XG5cdH1cblx0Z2V0ICcuJyAoKSB7XG5cdFx0Y29uc3QgaW5kZXggOm51bWJlciA9IGxpdGVyYWxfY2FjaGUuZ2V0KHRoaXMpLmluZGV4T2YoJy4nKSsxO1xuXHRcdHJldHVybiBpbmRleCA/IGxpdGVyYWxfY2FjaGUuZ2V0KHRoaXMpLnNsaWNlKGluZGV4KSA6ICcnO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2NhbERhdGUgZXh0ZW5kcyBEYXRldGltZSB7XG5cdGNvbnN0cnVjdG9yIChsaXRlcmFsIDpzdHJpbmcpIHtcblx0XHRSRS5MT0NBTF9EQVRFLnRlc3QobGl0ZXJhbClcblx0XHR8fCBpdGVyYXRvci50aHJvd3MoU3ludGF4RXJyb3IoJ0ludmFsaWQgTG9jYWwgRGF0ZSAnK2xpdGVyYWwrJyBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpKTtcblx0XHRzdXBlcihsaXRlcmFsKydUMDA6MDA6MDAuMDAwJywgbGl0ZXJhbCk7XG5cdH1cblx0Z2V0ICcuJyAoKSB7IHJldHVybiAnJzsgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9jYWxUaW1lIGV4dGVuZHMgRGF0ZXRpbWUge1xuXHRjb25zdHJ1Y3RvciAobGl0ZXJhbCA6c3RyaW5nKSB7XG5cdFx0UkUuTE9DQUxfVElNRS50ZXN0KGxpdGVyYWwpXG5cdFx0fHwgaXRlcmF0b3IudGhyb3dzKFN5bnRheEVycm9yKCdJbnZhbGlkIExvY2FsIFRpbWUgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKSk7XG5cdFx0c3VwZXIoJzE5NzAtMDEtMDFUJytsaXRlcmFsLCBsaXRlcmFsKTtcblx0fVxuXHRnZXQgJy4nICgpIHtcblx0XHRjb25zdCBpbmRleCA6bnVtYmVyID0gbGl0ZXJhbF9jYWNoZS5nZXQodGhpcykuaW5kZXhPZignLicpKzE7XG5cdFx0cmV0dXJuIGluZGV4ID8gbGl0ZXJhbF9jYWNoZS5nZXQodGhpcykuc2xpY2UoaW5kZXgpIDogJyc7XG5cdH1cbn1cbiJdfQ==",
			"import SyntaxError from '.SyntaxError';\n//import Infinity, NaN from '.Infinity'+'.NaN';\nimport * as options from '../share/options';\nimport * as iterator from '../share/iterator';\nconst FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nconst FLOAT_NOT_INTEGER = /[.eE]/;\nconst UNDERSCORES = /_/g;\nexport const Float = (literal) => {\n    if (FLOAT.test(literal) && FLOAT_NOT_INTEGER.test(literal)) {\n        if (options.sFloat) {\n            return +literal.replace(UNDERSCORES, '');\n        }\n        else {\n            const number = +literal.replace(UNDERSCORES, '');\n            isFinite(number) || iterator.throws(RangeError('Float can not be as big as Infinity before TOML v0.5, like ' + literal + ' at ' + iterator.where()));\n            return number;\n        }\n    }\n    //if ( options.sFloat ) {\n    //\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n    //\tif ( literal==='-inf' ) { return -Infinity; }\n    //\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n    //}\n    throw iterator.throws(SyntaxError('Invalid Float ' + literal + ' at ' + iterator.where()));\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsb2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sV0FBVyxNQUFNLGNBQWMsQ0FBQztBQUN2QywrQ0FBK0M7QUFDL0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEtBQUssUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLE1BQU0sS0FBSyxHQUFHLDZFQUE2RSxDQUFDO0FBQzVGLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDO0FBQ2xDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQztBQUV6QixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUNoRCxJQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFHO1FBQzdELElBQUssT0FBTyxDQUFDLE1BQU0sRUFBRztZQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUFFO2FBQzlEO1lBQ0osTUFBTSxNQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRCxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsNkRBQTZELEdBQUMsT0FBTyxHQUFDLE1BQU0sR0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9JLE9BQU8sTUFBTSxDQUFDO1NBQ2Q7S0FDRDtJQUNELHlCQUF5QjtJQUN6QixrRUFBa0U7SUFDbEUsZ0RBQWdEO0lBQ2hELGlGQUFpRjtJQUNqRixHQUFHO0lBQ0gsTUFBTSxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsR0FBQyxPQUFPLEdBQUMsTUFBTSxHQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5bnRheEVycm9yIGZyb20gJy5TeW50YXhFcnJvcic7XG4vL2ltcG9ydCBJbmZpbml0eSwgTmFOIGZyb20gJy5JbmZpbml0eScrJy5OYU4nO1xuaW1wb3J0ICogYXMgb3B0aW9ucyBmcm9tICcuLi9zaGFyZS9vcHRpb25zJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcblxuY29uc3QgRkxPQVQgPSAvXlstK10/KD86MHxbMS05XVxcZCooPzpfXFxkKykqKSg/OlxcLlxcZCsoPzpfXFxkKykqKT8oPzpbZUVdWy0rXT9cXGQrKD86X1xcZCspKik/JC87XG5jb25zdCBGTE9BVF9OT1RfSU5URUdFUiA9IC9bLmVFXS87XG5jb25zdCBVTkRFUlNDT1JFUyA9IC9fL2c7XG5cbmV4cG9ydCBjb25zdCBGbG9hdCA9IChsaXRlcmFsIDpzdHJpbmcpIDpudW1iZXIgPT4ge1xuXHRpZiAoIEZMT0FULnRlc3QobGl0ZXJhbCkgJiYgRkxPQVRfTk9UX0lOVEVHRVIudGVzdChsaXRlcmFsKSApIHtcblx0XHRpZiAoIG9wdGlvbnMuc0Zsb2F0ICkgeyByZXR1cm4gK2xpdGVyYWwucmVwbGFjZShVTkRFUlNDT1JFUywgJycpOyB9XG5cdFx0ZWxzZSB7XG5cdFx0XHRjb25zdCBudW1iZXIgPSArbGl0ZXJhbC5yZXBsYWNlKFVOREVSU0NPUkVTLCAnJyk7XG5cdFx0XHRpc0Zpbml0ZShudW1iZXIpIHx8IGl0ZXJhdG9yLnRocm93cyhSYW5nZUVycm9yKCdGbG9hdCBjYW4gbm90IGJlIGFzIGJpZyBhcyBJbmZpbml0eSBiZWZvcmUgVE9NTCB2MC41LCBsaWtlICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSkpO1xuXHRcdFx0cmV0dXJuIG51bWJlcjtcblx0XHR9XG5cdH1cblx0Ly9pZiAoIG9wdGlvbnMuc0Zsb2F0ICkge1xuXHQvL1x0aWYgKCBsaXRlcmFsPT09J2luZicgfHwgbGl0ZXJhbD09PScraW5mJyApIHsgcmV0dXJuIEluZmluaXR5OyB9XG5cdC8vXHRpZiAoIGxpdGVyYWw9PT0nLWluZicgKSB7IHJldHVybiAtSW5maW5pdHk7IH1cblx0Ly9cdGlmICggbGl0ZXJhbD09PSduYW4nIHx8IGxpdGVyYWw9PT0nK25hbicgfHwgbGl0ZXJhbD09PSctbmFuJyApIHsgcmV0dXJuIE5hTjsgfVxuXHQvL31cblx0dGhyb3cgaXRlcmF0b3IudGhyb3dzKFN5bnRheEVycm9yKCdJbnZhbGlkIEZsb2F0ICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSkpO1xufTtcbiJdfQ==",
			"import RangeError from '.RangeError';\nimport parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nconst ESCAPE_ALIAS = { '\\\\': '\\\\', '\"': '\"', b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\nconst ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"btnfr])|u(.{4})|U(.{8}))/g;\nconst ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?: *(\\n)[ \\n]*|([\\\\\"btnfr])|u([^]{4})|U([^]{8}))/g;\nconst unEscapeSingleLine = (match, p1, p2, p3) => {\n    if (p1) {\n        return ESCAPE_ALIAS[p1];\n    }\n    const codePoint = parseInt(p2 || p3, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throws(RangeError('Invalid Unicode Scalar ' + (p2 ? '\\\\u' + p2 : '\\\\U' + p3) + ' at ' + iterator.where()));\n    return fromCodePoint(codePoint);\n};\nconst unEscapeMultiLine = (match, p1, p2, p3, p4) => {\n    if (match === '\\n') {\n        return options.useWhatToJoinMultiLineString;\n    }\n    if (p1) {\n        return '';\n    }\n    if (p2) {\n        return ESCAPE_ALIAS[p2];\n    }\n    const codePoint = parseInt(p3 || p4, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throws(RangeError('Invalid Unicode Scalar ' + (p3 ? '\\\\u' + p3 : '\\\\U' + p4) + ' at ' + iterator.where()));\n    return fromCodePoint(codePoint);\n};\nexport const BasicString = (literal) => literal.replace(ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\nexport const MultiLineBasicString = (literal) => literal.replace(ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSYW5nZUVycm9yIGZyb20gJy5SYW5nZUVycm9yJztcbmltcG9ydCBwYXJzZUludCBmcm9tICcucGFyc2VJbnQnO1xuaW1wb3J0IGZyb21Db2RlUG9pbnQgZnJvbSAnLlN0cmluZy5mcm9tQ29kZVBvaW50JztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcbmltcG9ydCAqIGFzIG9wdGlvbnMgZnJvbSAnLi4vc2hhcmUvb3B0aW9ucyc7XG5cbmNvbnN0IEVTQ0FQRV9BTElBUyA9IHsgJ1xcXFwnOiAnXFxcXCcsICdcIic6ICdcIicsIGI6ICdcXGInLCB0OiAnXFx0JywgbjogJ1xcbicsIGY6ICdcXGYnLCByOiAnXFxyJyB9O1xuXG5jb25zdCBFU0NBUEVEX0lOX1NJTkdMRV9MSU5FID0gL1xcXFwoPzooW1xcXFxcImJ0bmZyXSl8dSguezR9KXxVKC57OH0pKS9nO1xuY29uc3QgRVNDQVBFRF9JTl9NVUxUSV9MSU5FID0gL1xcbnxcXFxcKD86ICooXFxuKVsgXFxuXSp8KFtcXFxcXCJidG5mcl0pfHUoW15dezR9KXxVKFteXXs4fSkpL2c7XG5cbnR5cGUgX19idG5mciA9ICdcXFxcJyB8ICdcIicgfCAnYicgfCAnYicgfCAnbicgfCAnZicgfCAncicgfCB1bmRlZmluZWQ7XG5cbmNvbnN0IHVuRXNjYXBlU2luZ2xlTGluZSA9IChtYXRjaCA6c3RyaW5nLCBwMSA6X19idG5mciwgcDIgOnN0cmluZyB8IHVuZGVmaW5lZCwgcDMgOnN0cmluZyB8IHVuZGVmaW5lZCkgOnN0cmluZyA9PiB7XG5cdGlmICggcDEgKSB7IHJldHVybiBFU0NBUEVfQUxJQVNbcDFdOyB9XG5cdGNvbnN0IGNvZGVQb2ludCA6bnVtYmVyID0gcGFyc2VJbnQocDIgfHwgPHN0cmluZz5wMywgMTYpO1xuXHQoIDB4RDdGRjxjb2RlUG9pbnQgJiYgY29kZVBvaW50PDB4RTAwMCB8fCAweDEwRkZGRjxjb2RlUG9pbnQgKVxuXHQmJiBpdGVyYXRvci50aHJvd3MoUmFuZ2VFcnJvcignSW52YWxpZCBVbmljb2RlIFNjYWxhciAnKyggcDIgPyAnXFxcXHUnK3AyIDogJ1xcXFxVJytwMyApKycgYXQgJytpdGVyYXRvci53aGVyZSgpKSk7XG5cdHJldHVybiBmcm9tQ29kZVBvaW50KGNvZGVQb2ludCk7XG59O1xuXG5jb25zdCB1bkVzY2FwZU11bHRpTGluZSA9IChtYXRjaCA6c3RyaW5nLCBwMSA6J1xcbicgfCB1bmRlZmluZWQsIHAyIDpfX2J0bmZyLCBwMyA6c3RyaW5nIHwgdW5kZWZpbmVkLCBwNCA6c3RyaW5nIHwgdW5kZWZpbmVkKSA6c3RyaW5nID0+IHtcblx0aWYgKCBtYXRjaD09PSdcXG4nICkgeyByZXR1cm4gb3B0aW9ucy51c2VXaGF0VG9Kb2luTXVsdGlMaW5lU3RyaW5nOyB9XG5cdGlmICggcDEgKSB7IHJldHVybiAnJzsgfVxuXHRpZiAoIHAyICkgeyByZXR1cm4gRVNDQVBFX0FMSUFTW3AyXTsgfVxuXHRjb25zdCBjb2RlUG9pbnQgOm51bWJlciA9IHBhcnNlSW50KHAzIHx8IDxzdHJpbmc+cDQsIDE2KTtcblx0KCAweEQ3RkY8Y29kZVBvaW50ICYmIGNvZGVQb2ludDwweEUwMDAgfHwgMHgxMEZGRkY8Y29kZVBvaW50IClcblx0JiYgaXRlcmF0b3IudGhyb3dzKFJhbmdlRXJyb3IoJ0ludmFsaWQgVW5pY29kZSBTY2FsYXIgJysoIHAzID8gJ1xcXFx1JytwMyA6ICdcXFxcVScrcDQgKSsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSkpO1xuXHRyZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IEJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoRVNDQVBFRF9JTl9TSU5HTEVfTElORSwgdW5Fc2NhcGVTaW5nbGVMaW5lKTtcblxuZXhwb3J0IGNvbnN0IE11bHRpTGluZUJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoRVNDQVBFRF9JTl9NVUxUSV9MSU5FLCB1bkVzY2FwZU11bHRpTGluZSk7XG4iXX0=",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport isArray from '.Array.isArray';\nimport WeakSet from '.WeakSet';\nimport * as iterator from '../share/iterator';\nimport { isTable } from '../types/Table';\nimport { BasicString, MultiLineBasicString } from '../types/String';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nexport const sealedInline = new WeakSet;\nconst openTables = new WeakSet;\nconst openedTables = new WeakSet;\nexport function appendTable(table, key_key, asArrayItem, tag) {\n    const leadingKeys = parseKeys(key_key);\n    const finalKey = leadingKeys.pop();\n    table = prepareTable(table, leadingKeys);\n    let lastTable;\n    if (asArrayItem) {\n        let arrayOfTables;\n        if (finalKey in table) {\n            sealedInline.has(arrayOfTables = table[finalKey]) && iterator.throws(Error('Trying to push Table to non-ArrayOfTables value at ' + iterator.where()));\n        }\n        else {\n            arrayOfTables = table[finalKey] = [];\n        }\n        tag && options.collect({ table, key: finalKey, array: arrayOfTables, index: arrayOfTables.length, tag });\n        arrayOfTables.push(lastTable = new options.TableDepends);\n    }\n    else {\n        if (finalKey in table) {\n            options.openable && openTables.has(lastTable = table[finalKey]) && !openedTables.has(lastTable) || iterator.throws(Error('Duplicate Table definition at ' + iterator.where()));\n            openTables.delete(lastTable);\n        }\n        else {\n            table[finalKey] = lastTable = new options.TableDepends;\n            options.openable && openedTables.add(lastTable);\n        }\n        tag && options.collect({ table, key: finalKey, tag });\n    }\n    return lastTable;\n}\nexport function parseKeys(key_key) {\n    const keys = key_key.match(RE.KEYS);\n    for (let index = keys.length; index--;) {\n        const key = keys[index];\n        if (key.startsWith('\\'')) {\n            keys[index] = key.slice(1, -1);\n        }\n        else if (key.startsWith('\"')) {\n            keys[index] = BasicString(key.slice(1, -1));\n        }\n    }\n    if (options.nonEmptyKey) {\n        for (let index = keys.length; index--;) {\n            keys[index] || iterator.throws(SyntaxError('Empty key is not allowed before TOML v0.4, which at ' + iterator.where()));\n        }\n    }\n    return keys;\n}\nfunction prepareTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            if (isTable(table)) {\n                sealedInline.has(table) && iterator.throws(Error('Trying to define table through static Inline Object at ' + iterator.where()));\n            }\n            else if (isArray(table)) {\n                sealedInline.has(table) && iterator.throws(Error('Trying to append value to static Inline Array at ' + iterator.where()));\n                // @ts-ignore\n                table = table[table.length - 1];\n            }\n            else {\n                iterator.throws(Error('Trying to define table through non-Table value at ' + iterator.where()));\n            }\n        }\n        else {\n            openTables.add(table = table[key] = new options.TableDepends);\n            while (index < length) {\n                openTables.add(table = table[keys[index++]] = new options.TableDepends);\n            }\n            return table;\n        }\n    }\n    return table;\n}\nexport function prepareInlineTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            isTable(table) || iterator.throws(Error('Trying to assign property through non-Table value at ' + iterator.where()));\n            sealedInline.has(table) && iterator.throws(Error('Trying to assign property through static Inline Object at ' + iterator.where()));\n        }\n        else {\n            table = table[key] = new options.TableDepends;\n            while (index < length) {\n                table = table[keys[index++]] = new options.TableDepends;\n            }\n            return table;\n        }\n    }\n    return table;\n}\nexport function assignLiteralString(table, finalKey, literal) {\n    let $;\n    if (literal.charAt(1) !== '\\'' || literal.charAt(2) !== '\\'') {\n        $ = RE.LITERAL_STRING.exec(literal) || iterator.throws(SyntaxError(iterator.where()));\n        table[finalKey] = checkLiteralString($[1]);\n        return $[2];\n    }\n    literal = literal.slice(3);\n    $ = RE.MULTI_LINE_LITERAL_STRING.exec(literal);\n    if ($) {\n        table[finalKey] = checkLiteralString($[1]);\n        return $[2];\n    }\n    if (literal) {\n        checkLiteralString(literal);\n        literal += options.useWhatToJoinMultiLineString;\n    }\n    const start = iterator.mark();\n    for (;;) {\n        const line = iterator.must('Literal String', start);\n        $ = RE.MULTI_LINE_LITERAL_STRING.exec(line);\n        if ($) {\n            table[finalKey] = literal + checkLiteralString($[1]);\n            return $[2];\n        }\n        literal += line + options.useWhatToJoinMultiLineString;\n    }\n}\nconst CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nconst CONTROL_CHARACTER_EXCLUDE_TAB_LESSER = /[\\x00-\\x08\\x0B-\\x1F]/;\nfunction checkLiteralString(literal) {\n    (options.ctrl7F ? CONTROL_CHARACTER_EXCLUDE_TAB : CONTROL_CHARACTER_EXCLUDE_TAB_LESSER).test(literal) && iterator.throws(SyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at ' + iterator.where()));\n    return literal;\n}\nexport function assignBasicString(table, finalKey, literal) {\n    if (literal.charAt(1) !== '\"' || literal.charAt(2) !== '\"') {\n        const $ = RE.BASIC_STRING_exec(literal);\n        table[finalKey] = BasicString($[1]);\n        return $[2];\n    }\n    literal = literal.slice(3);\n    const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(literal);\n    if (literal.startsWith('\"\"\"', $.length)) {\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throws(SyntaxError(iterator.where()));\n        table[finalKey] = MultiLineBasicString($);\n        return literal.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n    }\n    if (literal) {\n        literal += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || iterator.throws(SyntaxError(iterator.where()));\n    }\n    const start = iterator.mark();\n    for (;;) {\n        let line = iterator.must('Basic String', start);\n        const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(line);\n        if (line.startsWith('\"\"\"', $.length)) {\n            RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throws(SyntaxError(iterator.where()));\n            table[finalKey] = MultiLineBasicString(literal + $);\n            return line.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n        }\n        line += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || iterator.throws(SyntaxError(iterator.where()));\n        literal += line;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import SyntaxError from '.SyntaxError';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nconst DELIMITER_CHECK = /[^`]/;\nexport function assignInterpolationString(table, finalKey, delimiter) {\n    options.enableInterpolationString || iterator.throws(SyntaxError(iterator.where()));\n    DELIMITER_CHECK.test(delimiter) && iterator.throws(SyntaxError('Interpolation String opening tag incorrect at ' + iterator.where()));\n    let string;\n    let lineRest;\n    {\n        const literals = [];\n        for (const start = iterator.mark();;) {\n            const literal = iterator.must('Interpolation String', start);\n            if (literal.startsWith(delimiter)) {\n                lineRest = literal.slice(delimiter.length).replace(RE.PRE_WHITESPACE, '');\n                break;\n            }\n            literals.push(literal);\n        }\n        string = literals.join('\\n');\n    }\n    table[finalKey] = string;\n    return lineRest;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIngtZmVhdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxLQUFLLFFBQVEsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEtBQUssT0FBTyxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxDLE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQztBQUUvQixNQUFNLFVBQVUseUJBQXlCLENBQUUsS0FBYSxFQUFFLFFBQWdCLEVBQUUsU0FBaUI7SUFDNUYsT0FBTyxDQUFDLHlCQUF5QixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEYsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnREFBZ0QsR0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25JLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksUUFBZ0IsQ0FBQztJQUNyQjtRQUNDLE1BQU0sUUFBUSxHQUFhLEVBQUUsQ0FBQztRQUM5QixLQUFNLE1BQU0sS0FBSyxHQUFXLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBTTtZQUNoRCxNQUFNLE9BQU8sR0FBVyxRQUFRLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JFLElBQUssT0FBTyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRztnQkFDcEMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMxRSxNQUFNO2FBQ047WUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZCO1FBQ0QsTUFBTSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDN0I7SUFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3ludGF4RXJyb3IgZnJvbSAnLlN5bnRheEVycm9yJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcbmltcG9ydCAqIGFzIG9wdGlvbnMgZnJvbSAnLi4vc2hhcmUvb3B0aW9ucyc7XG5pbXBvcnQgKiBhcyBSRSBmcm9tICcuLi9zaGFyZS9SRSc7XG5cbmNvbnN0IERFTElNSVRFUl9DSEVDSyA9IC9bXmBdLztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbkludGVycG9sYXRpb25TdHJpbmcgKHRhYmxlIDpvYmplY3QsIGZpbmFsS2V5IDpzdHJpbmcsIGRlbGltaXRlciA6c3RyaW5nKSA6c3RyaW5nIHtcblx0b3B0aW9ucy5lbmFibGVJbnRlcnBvbGF0aW9uU3RyaW5nIHx8IGl0ZXJhdG9yLnRocm93cyhTeW50YXhFcnJvcihpdGVyYXRvci53aGVyZSgpKSk7XG5cdERFTElNSVRFUl9DSEVDSy50ZXN0KGRlbGltaXRlcikgJiYgaXRlcmF0b3IudGhyb3dzKFN5bnRheEVycm9yKCdJbnRlcnBvbGF0aW9uIFN0cmluZyBvcGVuaW5nIHRhZyBpbmNvcnJlY3QgYXQgJytpdGVyYXRvci53aGVyZSgpKSk7XG5cdGxldCBzdHJpbmcgOnN0cmluZztcblx0bGV0IGxpbmVSZXN0IDpzdHJpbmc7XG5cdHtcblx0XHRjb25zdCBsaXRlcmFscyA6c3RyaW5nW10gPSBbXTtcblx0XHRmb3IgKCBjb25zdCBzdGFydCA6bnVtYmVyID0gaXRlcmF0b3IubWFyaygpOyA7ICkge1xuXHRcdFx0Y29uc3QgbGl0ZXJhbCA6c3RyaW5nID0gaXRlcmF0b3IubXVzdCgnSW50ZXJwb2xhdGlvbiBTdHJpbmcnLCBzdGFydCk7XG5cdFx0XHRpZiAoIGxpdGVyYWwuc3RhcnRzV2l0aChkZWxpbWl0ZXIpICkge1xuXHRcdFx0XHRsaW5lUmVzdCA9IGxpdGVyYWwuc2xpY2UoZGVsaW1pdGVyLmxlbmd0aCkucmVwbGFjZShSRS5QUkVfV0hJVEVTUEFDRSwgJycpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGxpdGVyYWxzLnB1c2gobGl0ZXJhbCk7XG5cdFx0fVxuXHRcdHN0cmluZyA9IGxpdGVyYWxzLmpvaW4oJ1xcbicpO1xuXHR9XG5cdHRhYmxlW2ZpbmFsS2V5XSA9IHN0cmluZztcblx0cmV0dXJuIGxpbmVSZXN0O1xufVxuIl19",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport * as iterator from '../share/iterator';\nimport { OffsetDateTime, LocalDateTime, LocalDate, LocalTime } from '../types/Datetime';\nimport { Float } from '../types/Float';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nimport { sealedInline, appendTable, parseKeys, prepareInlineTable, assignLiteralString, assignBasicString } from './on-the-spot';\nimport { assignInterpolationString } from './x-feature';\nconst OFFSET = /(?:[+-]\\d\\d:\\d\\d|Z)$/;\nexport default function Root() {\n    const rootTable = new options.TableDepends;\n    let lastSectionTable = rootTable;\n    while (iterator.rest()) {\n        const line = iterator.next().replace(RE.PRE_WHITESPACE, '');\n        if (line === '') { }\n        else if (line.startsWith('#')) { }\n        else if (line.startsWith('[')) {\n            const { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter } = RE.TABLE_DEFINITION_exec_groups(line);\n            $_asArrayItem$$ === $$asArrayItem$_ || iterator.throws(SyntaxError('Square brackets of table define statement not match at ' + iterator.where()));\n            tagInner && tagOuter && iterator.throws(SyntaxError('Tag for table define statement can not both in and out, which at ' + iterator.where()));\n            lastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, tagOuter || tagInner);\n        }\n        else {\n            let rest = assign(lastSectionTable, line);\n            while (iterator.stacks_length) {\n                rest = iterator.stacks_pop()(rest);\n            }\n            rest === '' || rest.startsWith('#') || iterator.throws(SyntaxError(iterator.where()));\n        }\n    }\n    return rootTable;\n}\n;\nfunction assign(lastInlineTable_array, lineRest) {\n    let left;\n    let tagLeft;\n    let tagRight;\n    ({ left, tagLeft, tagRight, right: lineRest } = RE.KEY_VALUE_PAIR_exec_groups(lineRest));\n    const leadingKeys = parseKeys(left);\n    const finalKey = leadingKeys.pop();\n    const table = prepareInlineTable(lastInlineTable_array, leadingKeys);\n    finalKey in table && iterator.throws(Error('Duplicate property definition at ' + iterator.where()));\n    tagLeft && options.collect({ table, key: finalKey, tag: tagLeft });\n    tagRight && options.collect({ table, key: finalKey, tag: tagRight });\n    switch (lineRest[0]) {\n        case '\\'':\n            lineRest = assignLiteralString(table, finalKey, lineRest);\n            if (lineRest.startsWith('(')) {\n                tagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ table, key: finalKey, tag: tagRight });\n            }\n            return lineRest;\n        case '\"':\n            lineRest = assignBasicString(table, finalKey, lineRest);\n            if (lineRest.startsWith('(')) {\n                tagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ table, key: finalKey, tag: tagRight });\n            }\n            return lineRest;\n        case '`':\n            lineRest = assignInterpolationString(table, finalKey, lineRest);\n            if (lineRest.startsWith('(')) {\n                tagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ table, key: finalKey, tag: tagRight });\n            }\n            return lineRest;\n        case '{':\n            iterator.stacks_push(lineRest => equalInlineTable(table, finalKey, lineRest));\n            return lineRest;\n        case '[':\n            iterator.stacks_push(lineRest => equalInlineArray(table, finalKey, lineRest));\n            return lineRest;\n    }\n    let literal;\n    ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n    if (lineRest.startsWith('(')) {\n        tagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n        ({ 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n        options.collect({ table, key: finalKey, tag: tagRight });\n    }\n    if (options.sFloat) {\n        if (literal === 'inf' || literal === '+inf') {\n            table[finalKey] = Infinity;\n            return lineRest;\n        }\n        if (literal === '-inf') {\n            table[finalKey] = -Infinity;\n            return lineRest;\n        }\n        if (literal === 'nan' || literal === '+nan' || literal === '-nan') {\n            table[finalKey] = NaN;\n            return lineRest;\n        }\n    }\n    if (literal.includes(':')) {\n        if (literal.includes('-')) {\n            if (OFFSET.test(literal)) {\n                table[finalKey] = new OffsetDateTime(literal);\n            }\n            else {\n                options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n                table[finalKey] = new LocalDateTime(literal);\n            }\n        }\n        else {\n            options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n            table[finalKey] = new LocalTime(literal);\n        }\n        return lineRest;\n    }\n    if (literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-')) {\n        options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n        table[finalKey] = new LocalDate(literal);\n        return lineRest;\n    }\n    table[finalKey] =\n        literal === 'true' ? true : literal === 'false' ? false :\n            literal.includes(':') || literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-') ? new Datetime(literal) :\n                literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x') ? Float(literal) :\n                    options.enableNull && literal === 'null' ? null :\n                        options.IntegerDepends(literal);\n    return lineRest;\n}\nfunction push(lastInlineTable_array, lineRest) {\n    let alreadyBefore = lineRest.startsWith('(');\n    let tag;\n    if (alreadyBefore) {\n        ({ 1: tag, 2: lineRest } = RE._VALUE_PAIR.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n        options.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n    }\n    const lastIndex = '' + lastInlineTable_array.length;\n    switch (lineRest[0]) {\n        case '\\'':\n            lineRest = assignLiteralString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n            if (lineRest.startsWith('(')) {\n                alreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length - 1, tag });\n            }\n            return lineRest;\n        case '\"':\n            lineRest = assignBasicString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n            if (lineRest.startsWith('(')) {\n                alreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length - 1, tag });\n            }\n            return lineRest;\n        case '`':\n            lineRest = assignInterpolationString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n            if (lineRest.startsWith('(')) {\n                alreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n                ({ 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n                options.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length - 1, tag });\n            }\n            return lineRest;\n        case '{':\n            iterator.stacks_push(lineRest => equalInlineTable(options.asTables(lastInlineTable_array), lastIndex, lineRest));\n            return lineRest;\n        case '[':\n            iterator.stacks_push(lineRest => equalInlineArray(options.asArrays(lastInlineTable_array), lastIndex, lineRest));\n            return lineRest;\n    }\n    let literal;\n    ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n    if (lineRest.startsWith('(')) {\n        alreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at ' + iterator.where()));\n        ({ 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())));\n        options.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n    }\n    if (options.sFloat) {\n        if (literal === 'inf' || literal === '+inf') {\n            options.asFloats(lastInlineTable_array).push(Infinity);\n            return lineRest;\n        }\n        if (literal === '-inf') {\n            options.asFloats(lastInlineTable_array).push(-Infinity);\n            return lineRest;\n        }\n        if (literal === 'nan' || literal === '+nan' || literal === '-nan') {\n            options.asFloats(lastInlineTable_array).push(NaN);\n            return lineRest;\n        }\n    }\n    if (literal.includes(':')) {\n        if (literal.includes('-')) {\n            if (OFFSET.test(literal)) {\n                options.asOffsetDateTimes(lastInlineTable_array).push(new OffsetDateTime(literal));\n            }\n            else {\n                options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n                options.asLocalDateTimes(lastInlineTable_array).push(new LocalDateTime(literal));\n            }\n        }\n        else {\n            options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n            options.asLocalTimes(lastInlineTable_array).push(new LocalTime(literal));\n        }\n        return lineRest;\n    }\n    if (literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-')) {\n        options.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n        options.asLocalDates(lastInlineTable_array).push(new LocalDate(literal));\n        return lineRest;\n    }\n    if (literal === 'true') {\n        options.asBooleans(lastInlineTable_array).push(true);\n    }\n    else if (literal === 'false') {\n        options.asBooleans(lastInlineTable_array).push(false);\n    }\n    else if (literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x')) {\n        options.asFloats(lastInlineTable_array).push(Float(literal));\n    }\n    else if (options.enableNull && literal === 'null') {\n        options.asNulls(lastInlineTable_array).push(null);\n    }\n    else {\n        options.asIntegers(lastInlineTable_array).push(options.IntegerDepends(literal));\n    }\n    return lineRest;\n}\nfunction equalInlineTable(table, finalKey, lineRest) {\n    const inlineTable = table[finalKey] = new options.TableDepends;\n    sealedInline.add(inlineTable);\n    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n    if (options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma) {\n        const start = iterator.mark();\n        const length = iterator.stacks_length;\n        return function callee(lineRest) {\n            for (;;) {\n                while (lineRest === '' || lineRest.startsWith('#')) {\n                    lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n                }\n                if (lineRest.startsWith('}')) {\n                    return lineRest.replace(RE.SYM_WHITESPACE, '');\n                }\n                lineRest = assign(inlineTable, lineRest);\n                if (iterator.stacks_length > length) {\n                    iterator.stacks_insertBeforeLast(function inserted(lineRest) {\n                        //\n                        while (lineRest === '' || lineRest.startsWith('#')) { //\n                            lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, ''); //\n                        } //\n                        if (lineRest.startsWith(',')) {\n                            lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                        } //\n                        //\n                        return callee(lineRest);\n                    });\n                    return lineRest;\n                }\n                while (lineRest === '' || lineRest.startsWith('#')) {\n                    lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n                }\n                if (lineRest.startsWith(',')) {\n                    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                }\n            }\n        }(lineRest);\n    }\n    else {\n        if (lineRest.startsWith('}')) {\n            return lineRest.replace(RE.SYM_WHITESPACE, '');\n        }\n        (lineRest === '' || lineRest.startsWith('#')) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where()));\n        const length = iterator.stacks_length;\n        return function callee(lineRest) {\n            for (;;) {\n                lineRest = assign(inlineTable, lineRest);\n                if (iterator.stacks_length > length) {\n                    iterator.stacks_insertBeforeLast(function inserted(lineRest) {\n                        //\n                        if (lineRest.startsWith('}')) {\n                            return lineRest.replace(RE.SYM_WHITESPACE, '');\n                        } //\n                        if (lineRest.startsWith(',')) { //\n                            lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); //\n                            lineRest.startsWith('}') && iterator.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at ' + iterator.where())); //\n                        } //\n                        (lineRest === '' || lineRest.startsWith('#')) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where())); //\n                        //\n                        return callee(lineRest);\n                    });\n                    return lineRest;\n                }\n                if (lineRest.startsWith('}')) {\n                    return lineRest.replace(RE.SYM_WHITESPACE, '');\n                }\n                if (lineRest.startsWith(',')) {\n                    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                    lineRest.startsWith('}') && iterator.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at ' + iterator.where()));\n                }\n                (lineRest === '' || lineRest.startsWith('#')) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where()));\n            }\n        }(lineRest);\n    }\n}\nfunction equalInlineArray(table, finalKey, lineRest) {\n    const inlineArray = table[finalKey] = [];\n    sealedInline.add(inlineArray);\n    const start = iterator.mark();\n    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n    while (lineRest === '' || lineRest.startsWith('#')) {\n        lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n    }\n    if (lineRest.startsWith(']')) {\n        return lineRest.replace(RE.SYM_WHITESPACE, '');\n    }\n    const length = iterator.stacks_length;\n    return function callee(lineRest) {\n        for (;;) {\n            lineRest = push(inlineArray, lineRest);\n            if (iterator.stacks_length > length) {\n                iterator.stacks_insertBeforeLast(function inserted(lineRest) {\n                    //\n                    while (lineRest === '' || lineRest.startsWith('#')) { //\n                        lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, ''); //\n                    } //\n                    if (lineRest.startsWith(',')) { //\n                        lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); //\n                        while (lineRest === '' || lineRest.startsWith('#')) { //\n                            lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, ''); //\n                        } //\n                        if (lineRest.startsWith(']')) {\n                            return lineRest.replace(RE.SYM_WHITESPACE, '');\n                        } //\n                    } //\n                    else { //\n                        if (lineRest.startsWith(']')) {\n                            return lineRest.replace(RE.SYM_WHITESPACE, '');\n                        } //\n                        iterator.throws(SyntaxError(iterator.where())); //\n                    } //\n                    //\n                    return callee(lineRest);\n                });\n                return lineRest;\n            }\n            while (lineRest === '' || lineRest.startsWith('#')) {\n                lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n            }\n            if (lineRest.startsWith(',')) {\n                lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                while (lineRest === '' || lineRest.startsWith('#')) {\n                    lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n                }\n                if (lineRest.startsWith(']')) {\n                    return lineRest.replace(RE.SYM_WHITESPACE, '');\n                }\n            }\n            else {\n                if (lineRest.startsWith(']')) {\n                    return lineRest.replace(RE.SYM_WHITESPACE, '');\n                }\n                iterator.throws(SyntaxError(iterator.where()));\n            }\n        }\n    }(lineRest);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import Error from '.Error';\nimport TypeError from '.TypeError';\nimport isBuffer from '.Buffer.isBuffer';\nimport from from '.Buffer.from';\nimport * as iterator from './share/iterator';\nimport * as options from './share/options';\nimport Root from './parse/level-loop';\nconst BOM = /^\\uFEFF/;\nconst NON_SCALAR = /[\\uD800-\\uDFFF]/u; // \\u{10FFFF}- > \\uFFFD\nexport default function parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt = true, xOptions = null) {\n    iterator.could();\n    if (isBuffer(sourceContent)) {\n        const buffer = sourceContent;\n        sourceContent = buffer.toString();\n        if (!from(buffer).equals(buffer)) {\n            throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any unknown code point.');\n        }\n        sourceContent = sourceContent.replace(BOM, '');\n    }\n    if (typeof sourceContent !== 'string') {\n        throw new TypeError('TOML.parse(sourceContent)');\n    }\n    if (NON_SCALAR.test(sourceContent)) {\n        throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any uncoupled UCS-4 character code.');\n    }\n    try {\n        options.use(specificationVersion, multiLineJoiner, useBigInt, xOptions);\n        iterator.todo(sourceContent);\n        try {\n            const rootTable = Root();\n            options.process();\n            return rootTable;\n        }\n        finally {\n            iterator.done();\n        }\n    }\n    finally {\n        options.clear();\n    }\n}\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLFFBQVEsQ0FBQztBQUMzQixPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxRQUFRLE1BQU0sa0JBQWtCLENBQUM7QUFDeEMsT0FBTyxJQUFJLE1BQU0sY0FBYyxDQUFDO0FBQ2hDLE9BQU8sS0FBSyxRQUFRLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLElBQUksTUFBTSxvQkFBb0IsQ0FBQztBQUd0QyxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUM7QUFDdEIsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsQ0FBQSx1QkFBdUI7QUFFN0QsTUFBTSxDQUFDLE9BQU8sVUFBVSxLQUFLLENBQzVCLGFBQThCLEVBQzlCLG9CQUErQixFQUMvQixlQUF1QixFQUN2QixZQUE4QixJQUFJLEVBQ2xDLFFBQVEsR0FBc0IsSUFBSTtJQUVsQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsSUFBSyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUc7UUFDOUIsTUFBTSxNQUFNLEdBQVcsYUFBYSxDQUFDO1FBQ3JDLGFBQWEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbEMsSUFBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUc7WUFBRSxNQUFNLEtBQUssQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO1NBQUU7UUFDM0ksYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQy9DO0lBQ0QsSUFBSyxPQUFPLGFBQWEsS0FBRyxRQUFRLEVBQUc7UUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FBRTtJQUM1RixJQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUc7UUFBRSxNQUFNLEtBQUssQ0FBQyxpR0FBaUcsQ0FBQyxDQUFDO0tBQUU7SUFDekosSUFBSTtRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RSxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzdCLElBQUk7WUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLEVBQUUsQ0FBQztZQUN6QixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEIsT0FBTyxTQUFTLENBQUM7U0FDakI7Z0JBQ087WUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FBRTtLQUM1QjtZQUNPO1FBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQUU7QUFDN0IsQ0FBQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXJyb3IgZnJvbSAnLkVycm9yJztcbmltcG9ydCBUeXBlRXJyb3IgZnJvbSAnLlR5cGVFcnJvcic7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLkJ1ZmZlci5pc0J1ZmZlcic7XG5pbXBvcnQgZnJvbSBmcm9tICcuQnVmZmVyLmZyb20nO1xuaW1wb3J0ICogYXMgaXRlcmF0b3IgZnJvbSAnLi9zaGFyZS9pdGVyYXRvcic7XG5pbXBvcnQgKiBhcyBvcHRpb25zIGZyb20gJy4vc2hhcmUvb3B0aW9ucyc7XG5pbXBvcnQgUm9vdCBmcm9tICcuL3BhcnNlL2xldmVsLWxvb3AnO1xuXG5cbmNvbnN0IEJPTSA9IC9eXFx1RkVGRi87XG5jb25zdCBOT05fU0NBTEFSID0gL1tcXHVEODAwLVxcdURGRkZdL3U7Ly8gXFx1ezEwRkZGRn0tID4gXFx1RkZGRFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZSAoXG5cdHNvdXJjZUNvbnRlbnQgOkJ1ZmZlciB8IHN0cmluZyxcblx0c3BlY2lmaWNhdGlvblZlcnNpb24gOjAuNSB8IDAuNCxcblx0bXVsdGlMaW5lSm9pbmVyIDpzdHJpbmcsXG5cdHVzZUJpZ0ludCA6Ym9vbGVhbiB8IG51bWJlciA9IHRydWUsXG5cdHhPcHRpb25zICAgICAgICAgICAgICAgICAgICA9IG51bGxcbikgOm9iamVjdCB7XG5cdGl0ZXJhdG9yLmNvdWxkKCk7XG5cdGlmICggaXNCdWZmZXIoc291cmNlQ29udGVudCkgKSB7XG5cdFx0Y29uc3QgYnVmZmVyIDpCdWZmZXIgPSBzb3VyY2VDb250ZW50O1xuXHRcdHNvdXJjZUNvbnRlbnQgPSBidWZmZXIudG9TdHJpbmcoKTtcblx0XHRpZiAoICFmcm9tKGJ1ZmZlcikuZXF1YWxzKGJ1ZmZlcikgKSB7IHRocm93IEVycm9yKCdBIFRPTUwgZG9jIG11c3QgYmUgYSAoZnVsLXNjYWxhcikgdmFsaWQgVVRGLTggZmlsZSwgd2l0aG91dCBhbnkgdW5rbm93biBjb2RlIHBvaW50LicpOyB9XG5cdFx0c291cmNlQ29udGVudCA9IHNvdXJjZUNvbnRlbnQucmVwbGFjZShCT00sICcnKTtcblx0fVxuXHRpZiAoIHR5cGVvZiBzb3VyY2VDb250ZW50IT09J3N0cmluZycgKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ1RPTUwucGFyc2Uoc291cmNlQ29udGVudCknKTsgfVxuXHRpZiAoIE5PTl9TQ0FMQVIudGVzdChzb3VyY2VDb250ZW50KSApIHsgdGhyb3cgRXJyb3IoJ0EgVE9NTCBkb2MgbXVzdCBiZSBhIChmdWwtc2NhbGFyKSB2YWxpZCBVVEYtOCBmaWxlLCB3aXRob3V0IGFueSB1bmNvdXBsZWQgVUNTLTQgY2hhcmFjdGVyIGNvZGUuJyk7IH1cblx0dHJ5IHtcblx0XHRvcHRpb25zLnVzZShzcGVjaWZpY2F0aW9uVmVyc2lvbiwgbXVsdGlMaW5lSm9pbmVyLCB1c2VCaWdJbnQsIHhPcHRpb25zKTtcblx0XHRpdGVyYXRvci50b2RvKHNvdXJjZUNvbnRlbnQpO1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCByb290VGFibGUgPSBSb290KCk7XG5cdFx0XHRvcHRpb25zLnByb2Nlc3MoKTtcblx0XHRcdHJldHVybiByb290VGFibGU7XG5cdFx0fVxuXHRcdGZpbmFsbHkgeyBpdGVyYXRvci5kb25lKCk7IH1cblx0fVxuXHRmaW5hbGx5IHsgb3B0aW9ucy5jbGVhcigpOyB9XG59O1xuIl19",
			"import TypeError from '.TypeError';\nimport parse from './parse';\nexport default function install(readFileSync, specificationVersion, multiLineJoiner, useBigInt = true, xOptions = null) {\n    if (typeof readFileSync !== 'function') {\n        throw new TypeError('TOML.install(readFileSync)');\n    }\n    parse('', specificationVersion, multiLineJoiner, useBigInt, xOptions);\n    require.extensions['.toml'] = function (module, filename) {\n        module.exports = parse(readFileSync(filename), specificationVersion, multiLineJoiner, useBigInt, xOptions);\n    };\n}\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluc3RhbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sS0FBSyxNQUFNLFNBQVMsQ0FBQztBQUU1QixNQUFNLENBQUMsT0FBTyxVQUFVLE9BQU8sQ0FDOUIsWUFBOEIsRUFDOUIsb0JBQStCLEVBQy9CLGVBQXVCLEVBQ3ZCLFlBQThCLElBQUksRUFDbEMsUUFBUSxHQUFzQixJQUFJO0lBRWxDLElBQUssT0FBTyxZQUFZLEtBQUcsVUFBVSxFQUFHO1FBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0tBQUU7SUFDOUYsS0FBSyxDQUFDLEVBQUUsRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEdBQUcsVUFBVSxNQUFNLEVBQUUsUUFBUTtRQUN2RCxNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM1RyxDQUFDLENBQUM7QUFDSCxDQUFDO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUeXBlRXJyb3IgZnJvbSAnLlR5cGVFcnJvcic7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluc3RhbGwgKFxuXHRyZWFkRmlsZVN5bmMgOihwYXRoKSA9PiBCdWZmZXIsXG5cdHNwZWNpZmljYXRpb25WZXJzaW9uIDowLjUgfCAwLjQsXG5cdG11bHRpTGluZUpvaW5lciA6c3RyaW5nLFxuXHR1c2VCaWdJbnQgOmJvb2xlYW4gfCBudW1iZXIgPSB0cnVlLFxuXHR4T3B0aW9ucyAgICAgICAgICAgICAgICAgICAgPSBudWxsXG4pIHtcblx0aWYgKCB0eXBlb2YgcmVhZEZpbGVTeW5jIT09J2Z1bmN0aW9uJyApIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignVE9NTC5pbnN0YWxsKHJlYWRGaWxlU3luYyknKTsgfVxuXHRwYXJzZSgnJywgc3BlY2lmaWNhdGlvblZlcnNpb24sIG11bHRpTGluZUpvaW5lciwgdXNlQmlnSW50LCB4T3B0aW9ucyk7XG5cdHJlcXVpcmUuZXh0ZW5zaW9uc1snLnRvbWwnXSA9IGZ1bmN0aW9uIChtb2R1bGUsIGZpbGVuYW1lKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBwYXJzZShyZWFkRmlsZVN5bmMoZmlsZW5hbWUpLCBzcGVjaWZpY2F0aW9uVmVyc2lvbiwgbXVsdGlMaW5lSm9pbmVyLCB1c2VCaWdJbnQsIHhPcHRpb25zKTtcblx0fTtcbn07XG4iXX0=",
			"import version from './version?text';\nimport parse from './parse';\nimport install from './install';\nconst TOML = {\n    parse,\n    install,\n    version,\n    get default() { return this; }\n};\nexport default TOML;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQzVCLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUVoQyxNQUFNLElBQUksR0FBRztJQUNaLEtBQUs7SUFDTCxPQUFPO0lBQ1AsT0FBTztJQUNQLElBQUksT0FBTyxLQUFNLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztDQUMvQixDQUFDO0FBRUYsZUFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmVyc2lvbiBmcm9tICcuL3ZlcnNpb24/dGV4dCc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XG5pbXBvcnQgaW5zdGFsbCBmcm9tICcuL2luc3RhbGwnO1xuXG5jb25zdCBUT01MID0ge1xuXHRwYXJzZSxcblx0aW5zdGFsbCxcblx0dmVyc2lvbixcblx0Z2V0IGRlZmF1bHQgKCkgeyByZXR1cm4gdGhpczsgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVE9NTDtcbiJdfQ=="
		]
}