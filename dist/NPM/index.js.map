{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","share/iterator.ts","../../j-orderify/dist/ESM/j-orderify.js","types/Table.ts","share/RE-native.ts","share/RE-higher.RegExp.ts","share/RE-never-slow-nor-overflow.ts","types/Datetime.ts","types/Float.ts","types/Integer.ts","share/options.ts","types/String.ts","parser-extension.ts","parser.ts","default.ts"],
	"names":
		["iterator.throwSyntaxError","iterator.where","RE.SYM_WHITESPACE","RE.PRE_WHITESPACE","RE.DATETIME","RE.FLOAT","RE.FLOAT_NOT_INTEGER","RE.UNDERSCORES","RE.XOB_INTEGER","RE.INTEGER","options.allowLonger","iterator.throwRangeError","options.IntegerMin","options.IntegerMax","iterator.throwTypeError","options.useWhatToJoinMultiLineString","RE.ESCAPED_IN_SINGLE_LINE","RE.ESCAPED_IN_MULTI_LINE","options.enableInterpolationString","RE.DELIMITER_CHECK","iterator.mark","iterator.must","RE.INTERPOLATIONS","RE.INTERPOLATION","RE.REGEXP_MODE","RE.PATTERN_FLAGS_REPLACER","RE.WHOLE_AND_SUBS","RE.SUB","RE.DOLLAR","RE.INTERPOLATION_TOKEN","options.customConstructors","options.FUNCTION","iterator.throwError","options.use","options.TableDepends","iterator.from","RE.BOM","RE.EOL","iterator.rest","iterator.next","options.keepComment","RE.TABLE_DEFINITION_exec","iterator.done","options.clear","options.open","RE.KEYS","RE.KEY_VALUE_PAIR_exec","RE.VALUE_REST","options.enableNull","options.enableNil","options.IntegerDepends","RE.LITERAL_STRING","RE.MULTI_LINE_LITERAL_STRING","RE.CONTROL_CHARACTER_EXCLUDE_TAB","RE.BASIC_STRING_exec","RE.MULTI_LINE_BASIC_STRING_exec_0","RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","RE._VALUE_PAIR","options.asStrings","options.asTables","options.asArrays","options.asBooleans","options.asFloats","options.asDatetimes","options.asNulls","options.asIntegers"],
	"mappings":
		"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",
	"sourcesContent":
		[
			"export default '0.5.57';",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nconst NONE = [];\nlet sourceLines = NONE;\nlet lastLineIndex = -1;\nlet lineIndex = -1;\nexport const from = (array) => {\n    sourceLines = array;\n    lastLineIndex = sourceLines.length - 1;\n    lineIndex = -1;\n};\nexport const done = () => { sourceLines = NONE; };\nexport const next = () => sourceLines[++lineIndex];\nexport const rest = () => lineIndex !== lastLineIndex;\nexport const mark = () => lineIndex;\nexport const must = (message, startIndex) => {\n    lineIndex === lastLineIndex\n        && throws(new SyntaxError(message + ' is not close until the end of the file, which started from line ' + (startIndex + 1) + ': ' + sourceLines[startIndex]));\n    return sourceLines[++lineIndex];\n};\nexport const where = () => 'line ' + (lineIndex + 1) + ': ' + sourceLines[lineIndex];\nexport const throwSyntaxError = (message) => throws(new SyntaxError(message));\nexport const throwRangeError = (message) => throws(new RangeError(message));\nexport const throwTypeError = (message) => throws(new TypeError(message));\nexport const throwError = (message) => throws(new Error(message));\nfunction throws(error) {\n    if (sourceLines !== NONE) {\n        error.lineIndex = lineIndex;\n        error.lineNumber = lineIndex + 1;\n        //done();\n    }\n    throw error;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cnJvcic7XG5pbXBvcnQgUmFuZ2VFcnJvciBmcm9tICcuUmFuZ2VFcnJvcic7XG5pbXBvcnQgVHlwZUVycm9yIGZyb20gJy5UeXBlRXJyb3InO1xuaW1wb3J0IEVycm9yIGZyb20gJy5FcnJvcic7XG5cbmNvbnN0IE5PTkUgOnN0cmluZ1tdID0gW107XG5sZXQgc291cmNlTGluZXMgOnN0cmluZ1tdID0gTk9ORTtcbmxldCBsYXN0TGluZUluZGV4IDpudW1iZXIgPSAtMTtcbmxldCBsaW5lSW5kZXggOm51bWJlciA9IC0xO1xuXG5leHBvcnQgY29uc3QgZnJvbSA9IChhcnJheSA6c3RyaW5nW10pIDp2b2lkID0+IHtcblx0c291cmNlTGluZXMgPSBhcnJheTtcblx0bGFzdExpbmVJbmRleCA9IHNvdXJjZUxpbmVzLmxlbmd0aC0xO1xuXHRsaW5lSW5kZXggPSAtMTtcbn07XG5cbmV4cG9ydCBjb25zdCBkb25lID0gKCkgOnZvaWQgPT4geyBzb3VyY2VMaW5lcyA9IE5PTkU7IH07XG5cbmV4cG9ydCBjb25zdCBuZXh0ID0gKCkgOnN0cmluZyA9PiBzb3VyY2VMaW5lc1srK2xpbmVJbmRleF07XG5cbmV4cG9ydCBjb25zdCByZXN0ID0gKCkgOmJvb2xlYW4gPT4gbGluZUluZGV4IT09bGFzdExpbmVJbmRleDtcblxuZXhwb3J0IGNvbnN0IG1hcmsgPSAoKSA6bnVtYmVyID0+IGxpbmVJbmRleDtcblxuZGVjbGFyZSBjbGFzcyBGcmllbmRseUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRsaW5lSW5kZXg/IDpudW1iZXI7XG5cdGxpbmVOdW1iZXI/IDpudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBtdXN0ID0gKG1lc3NhZ2UgOnN0cmluZywgc3RhcnRJbmRleCA6bnVtYmVyKSA6c3RyaW5nID0+IHtcblx0bGluZUluZGV4PT09bGFzdExpbmVJbmRleFxuXHQmJiB0aHJvd3MobmV3IFN5bnRheEVycm9yKG1lc3NhZ2UrJyBpcyBub3QgY2xvc2UgdW50aWwgdGhlIGVuZCBvZiB0aGUgZmlsZSwgd2hpY2ggc3RhcnRlZCBmcm9tIGxpbmUgJysoIHN0YXJ0SW5kZXgrMSApKyc6ICcrc291cmNlTGluZXNbc3RhcnRJbmRleF0pKTtcblx0cmV0dXJuIHNvdXJjZUxpbmVzWysrbGluZUluZGV4XTtcbn07XG5cbmV4cG9ydCBjb25zdCB3aGVyZSA9ICgpIDpzdHJpbmcgPT4gJ2xpbmUgJysoIGxpbmVJbmRleCsxICkrJzogJytzb3VyY2VMaW5lc1tsaW5lSW5kZXhdO1xuXG5leHBvcnQgY29uc3QgdGhyb3dTeW50YXhFcnJvciA9IChtZXNzYWdlIDpzdHJpbmcpIDpuZXZlciA9PiB0aHJvd3MobmV3IFN5bnRheEVycm9yKG1lc3NhZ2UpKTtcblxuZXhwb3J0IGNvbnN0IHRocm93UmFuZ2VFcnJvciA9IChtZXNzYWdlIDpzdHJpbmcpIDpuZXZlciA9PiB0aHJvd3MobmV3IFJhbmdlRXJyb3IobWVzc2FnZSkpO1xuXG5leHBvcnQgY29uc3QgdGhyb3dUeXBlRXJyb3IgPSAobWVzc2FnZSA6c3RyaW5nKSA6bmV2ZXIgPT4gdGhyb3dzKG5ldyBUeXBlRXJyb3IobWVzc2FnZSkpO1xuXG5leHBvcnQgY29uc3QgdGhyb3dFcnJvciA9IChtZXNzYWdlIDpzdHJpbmcpIDpuZXZlciA9PiB0aHJvd3MobmV3IEVycm9yKG1lc3NhZ2UpKTtcblxuZnVuY3Rpb24gdGhyb3dzIChlcnJvciA6RnJpZW5kbHlFcnJvcikgOm5ldmVyIHtcblx0aWYgKCBzb3VyY2VMaW5lcyE9PU5PTkUgKSB7XG5cdFx0ZXJyb3IubGluZUluZGV4ID0gbGluZUluZGV4O1xuXHRcdGVycm9yLmxpbmVOdW1iZXIgPSBsaW5lSW5kZXgrMTtcblx0XHQvL2RvbmUoKTtcblx0fVxuXHR0aHJvdyBlcnJvcjtcbn1cbiJdfQ==",
			"﻿/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.4.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */\n\nconst version = '2.4.0';\n\nconst create = Object.create;\n\nconst defineProperty = Reflect.defineProperty;\n\nconst deleteProperty = Reflect.deleteProperty;\n\nconst ownKeys = Reflect.ownKeys;\n\nconst ownKeysKeepers = new WeakMap;\nconst handlers = Object.create(null, {\n    defineProperty: {\n        value(target, key, descriptor) {\n            if (defineProperty(target, key, descriptor)) {\n                ownKeysKeepers.get(target).add(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    deleteProperty: {\n        value(target, key) {\n            if (deleteProperty(target, key)) {\n                ownKeysKeepers.get(target).delete(key);\n                return true;\n            }\n            return false;\n        }\n    },\n    ownKeys: {\n        value(target) {\n            return [...ownKeysKeepers.get(target)];\n        }\n    },\n});\nconst orderify = (object) => {\n    ownKeysKeepers.set(object, new Set(ownKeys(object)));\n    return new Proxy(object, handlers);\n};\nclass Orderified extends null {\n    constructor() {\n        const object = create(prototype);\n        ownKeysKeepers.set(object, new Set);\n        return new Proxy(object, handlers);\n    }\n}\nconst prototype = /*#__PURE__*/ function () {\n    delete Orderified.prototype.constructor;\n    Object.freeze(Orderified.prototype);\n    return Orderified.prototype;\n}();\nconst _export = {\n    version,\n    orderify,\n    Orderified,\n    get default() { return this; },\n};\n\nexport default _export;\nexport { version, orderify, Orderified };\n\n/*¡ @ltd/j-orderify */\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import { orderify } from '@ltd/j-orderify';\nimport create from '.Object.create';\nimport WeakSet from '.WeakSet';\nexport function Table() { }\nexport const OrderedTable = function Table() { return orderify(this); };\nOrderedTable.prototype = Table.prototype = create(null);\nexport const isTable = (value) => value instanceof Table;\nexport const closeTables = new WeakSet;\nexport const openTables = new WeakSet;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLE1BQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUNwQyxPQUFPLE9BQU8sTUFBTSxVQUFVLENBQUM7QUFFL0IsTUFBTSxVQUFVLEtBQUssS0FBWSxDQUFDO0FBQ2xDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxTQUFTLEtBQUssS0FBMEIsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFHN0YsWUFBWSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxLQUFVLEVBQVcsRUFBRSxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUM7QUFFdkUsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLElBQUksT0FBTyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9yZGVyaWZ5IH0gZnJvbSAnQGx0ZC9qLW9yZGVyaWZ5JztcbmltcG9ydCBjcmVhdGUgZnJvbSAnLk9iamVjdC5jcmVhdGUnO1xuaW1wb3J0IFdlYWtTZXQgZnJvbSAnLldlYWtTZXQnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFibGUgKCkgOnZvaWQgeyB9XG5leHBvcnQgY29uc3QgT3JkZXJlZFRhYmxlID0gZnVuY3Rpb24gVGFibGUgKHRoaXMgOm9iamVjdCkgOm9iamVjdCB7IHJldHVybiBvcmRlcmlmeSh0aGlzKTsgfTtcbmV4cG9ydCB0eXBlIFRhYmxlID0gdHlwZW9mIFRhYmxlIHwgdHlwZW9mIE9yZGVyZWRUYWJsZTtcblxuT3JkZXJlZFRhYmxlLnByb3RvdHlwZSA9IFRhYmxlLnByb3RvdHlwZSA9IGNyZWF0ZShudWxsKTtcblxuZXhwb3J0IGNvbnN0IGlzVGFibGUgPSAodmFsdWUgOmFueSkgOmJvb2xlYW4gPT4gdmFsdWUgaW5zdGFuY2VvZiBUYWJsZTtcblxuZXhwb3J0IGNvbnN0IGNsb3NlVGFibGVzID0gbmV3IFdlYWtTZXQ7XG5leHBvcnQgY29uc3Qgb3BlblRhYmxlcyA9IG5ldyBXZWFrU2V0O1xuIl19",
			"/* types */\nexport const ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"])|([btnfr])|u(.{4})|U(.{8}))/g;\nexport const UNDERSCORES = /_/g;\nexport const XOB_INTEGER = /^0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*$/;\nexport const INTEGER = /^[-+]?[1-9]\\d*(?:_\\d+)*$/;\nexport const FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nexport const FLOAT_NOT_INTEGER = /[.eE]/;\n/* parser */\nexport const BOM = /^\\uFEFF/;\nexport const EOL = /\\r?\\n/;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJFLW5hdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxXQUFXO0FBRVgsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQVcsMENBQTBDLENBQUM7QUFFekYsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQztBQUV4QyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQVcsMEVBQTBFLENBQUM7QUFDOUcsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFXLDBCQUEwQixDQUFDO0FBRTFELE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBVyw2RUFBNkUsQ0FBQztBQUMzRyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBVyxPQUFPLENBQUM7QUFFakQsWUFBWTtBQUVaLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBVyxTQUFTLENBQUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFXLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyogdHlwZXMgKi9cblxuZXhwb3J0IGNvbnN0IEVTQ0FQRURfSU5fU0lOR0xFX0xJTkUgOlJlZ0V4cCA9IC9cXFxcKD86KFtcXFxcXCJdKXwoW2J0bmZyXSl8dSguezR9KXxVKC57OH0pKS9nO1xuXG5leHBvcnQgY29uc3QgVU5ERVJTQ09SRVMgOlJlZ0V4cCA9IC9fL2c7XG5cbmV4cG9ydCBjb25zdCBYT0JfSU5URUdFUiA6UmVnRXhwID0gL14weFswLTlBLUZhLWZdKyg/Ol9bMC05QS1GYS1mXSspKnxvWzAtN10rKD86X1swLTddKykqfGJbMDFdKyg/Ol9bMDFdKykqJC87XG5leHBvcnQgY29uc3QgSU5URUdFUiA6UmVnRXhwID0gL15bLStdP1sxLTldXFxkKig/Ol9cXGQrKSokLztcblxuZXhwb3J0IGNvbnN0IEZMT0FUIDpSZWdFeHAgPSAvXlstK10/KD86MHxbMS05XVxcZCooPzpfXFxkKykqKSg/OlxcLlxcZCsoPzpfXFxkKykqKT8oPzpbZUVdWy0rXT9cXGQrKD86X1xcZCspKik/JC87XG5leHBvcnQgY29uc3QgRkxPQVRfTk9UX0lOVEVHRVIgOlJlZ0V4cCA9IC9bLmVFXS87XG5cbi8qIHBhcnNlciAqL1xuXG5leHBvcnQgY29uc3QgQk9NIDpSZWdFeHAgPSAvXlxcdUZFRkYvO1xuZXhwb3J0IGNvbnN0IEVPTCA6UmVnRXhwID0gL1xccj9cXG4vO1xuIl19",
			"/* types */\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\nconst YMD = /\\d\\d\\d\\d-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|02-(?:0[1-9]|1\\d|2[0-9]))/;\nconst T = /[T ]/;\nconst HMS = /(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?/;\nconst Z = /Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d/;\nexport const DATETIME = /^(?:(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?|(\\d\\d\\d\\d-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|02-(?:0[1-9]|1\\d|2[0-9])))(?:([T ])((?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?)(Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)?)?)$/;\n/* parser */\nconst Whitespace = /[ \\t]/;\nexport const PRE_WHITESPACE = /^[ \\t]+/;\nexport const KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\nexport const VALUE_REST = /^((?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?[\\w\\-+.:]+)[ \\t]*([^]*)$/;\nexport const LITERAL_STRING = /^'([^'\\x00-\\x08\\x0B-\\x1F\\x7F]*)'[ \\t]*([^]*)/;\nexport const MULTI_LINE_LITERAL_STRING = /^([^]*?)'''(?!')[ \\t]*([^]*)/;\nexport const CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nexport const ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?:([ \\n]+)|([\\\\\"])|([btnfr])|u([^]{4})|U([^]{8}))/g;\nexport const SYM_WHITESPACE = /^[^][ \\t]*/;\nexport const _VALUE_PAIR = /^!!([\\w-]*)[ \\t]+([^ \\t#][^]*)$/;\n/* parser-extension */\nconst String_ = /'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"/;\nconst KeyValuePairs = /(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*/;\nconst NonEmptyObject = /{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}/;\nconst Object = /{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}/;\nconst StringOrArray = /'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+]/;\nconst RegExpContent = /(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+/;\nconst Rule = /\\([ \\t]*(?:\\/(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+\\/[a-z]*[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])[ \\t]*|(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*)\\)/;\nexport const SUB = /{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}/g;\nexport const DELIMITER_CHECK = /[^`]/;\nexport const INTERPOLATION = /\\([ \\t]*(?:\\/(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+\\/[a-z]*[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])[ \\t]*|(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*)\\)/g;\nexport const INTERPOLATIONS = /^(?:\\([ \\t]*(?:\\/(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+\\/[a-z]*[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])[ \\t]*|(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*)\\)[ \\t]*)*[ \\t]*([^]*)$/;\nexport const INTERPOLATION_TOKEN = /'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"/g;\nexport const REGEXP_MODE = /^\\([ \\t]*\\//;\nexport const PATTERN_FLAGS_REPLACER = /\\/((?:[^\\\\[/]+|\\[(?:[^\\\\\\]]+|\\\\[^])*]|\\\\[^])+)\\/([a-z]*)[ \\t]*=[ \\t]*('[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])/;\nexport const WHOLE_AND_SUBS = /('[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*([^]*)/;\nexport const DOLLAR = /\\$(?:[1-9]\\d?|\\$)/g;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJFLWhpZ2hlci5SZWdFeHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsV0FBVztBQUVYLE1BQU0sSUFBSSxHQUFXLHVCQUF1QixDQUFDO0FBQzdDLE1BQU0sSUFBSSxHQUFXLHNCQUFzQixDQUFDO0FBQzVDLE1BQU0sSUFBSSxHQUFXLHlCQUF5QixDQUFDO0FBQy9DLE1BQU0sSUFBSSxHQUFXLG1CQUFtQixDQUFDO0FBQ3pDLE1BQU0sSUFBSSxHQUFXLFNBQVMsQ0FBQztBQUMvQixNQUFNLEdBQUcsR0FBVyx1RUFBdUUsQ0FBQztBQUM1RixNQUFNLENBQUMsR0FBVyxNQUFNLENBQUM7QUFDekIsTUFBTSxHQUFHLEdBQVcsZ0NBQWdDLENBQUM7QUFDckQsTUFBTSxDQUFDLEdBQVcscUJBQXFCLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFXLDRDQUE0QyxDQUFDO0FBRTdFLFlBQVk7QUFFWixNQUFNLFVBQVUsR0FBVyxPQUFPLENBQUM7QUFFbkMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFXLGdCQUFnQixDQUFDO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBVyxzQ0FBc0MsQ0FBQztBQUNuRSxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQVcsNkRBQTZELENBQUM7QUFDaEcsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFXLHFEQUFxRCxDQUFDO0FBQzVGLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFXLHFDQUFxQyxDQUFDO0FBQ3ZGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFXLDBCQUEwQixDQUFDO0FBQ2hGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFXLDBEQUEwRCxDQUFDO0FBQ3hHLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBVyxtQkFBbUIsQ0FBQztBQUUxRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQVcsd0NBQXdDLENBQUM7QUFFNUUsc0JBQXNCO0FBRXRCLE1BQU0sT0FBTyxHQUFXLDhCQUE4QixDQUFDO0FBQ3ZELE1BQU0sYUFBYSxHQUFXLHlKQUF5SixDQUFDO0FBQ3hMLE1BQU0sY0FBYyxHQUFXLGdDQUFnQyxDQUFDO0FBQ2hFLE1BQU0sTUFBTSxHQUFXLGtDQUFrQyxDQUFDO0FBQzFELE1BQU0sYUFBYSxHQUFXLG1IQUFtSCxDQUFDO0FBQ2xKLE1BQU0sYUFBYSxHQUFXLDRDQUE0QyxDQUFDO0FBQzNFLE1BQU0sSUFBSSxHQUFXLDJIQUEySCxDQUFDO0FBRWpKLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBVyxXQUFXLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFXLE1BQU0sQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQVcsU0FBUyxDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBVywrQ0FBK0MsQ0FBQztBQUN0RixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBVyxZQUFZLENBQUM7QUFDeEQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFXLG9CQUFvQixDQUFDO0FBQ3hELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFXLDJFQUEyRSxDQUFDO0FBQzFILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBVyxnQ0FBZ0MsQ0FBQztBQUN2RSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQVcsb0JBQW9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qIHR5cGVzICovXG5cbmNvbnN0IF8yOV8gOlJlZ0V4cCA9IC8oPzowWzEtOV18MVxcZHwyWzAtOV0pLztcbmNvbnN0IF8zMF8gOlJlZ0V4cCA9IC8oPzowWzEtOV18WzEyXVxcZHwzMCkvO1xuY29uc3QgXzMxXyA6UmVnRXhwID0gLyg/OjBbMS05XXxbMTJdXFxkfDNbMDFdKS87XG5jb25zdCBfMjNfIDpSZWdFeHAgPSAvKD86WzAxXVxcZHwyWzAtM10pLztcbmNvbnN0IF81OV8gOlJlZ0V4cCA9IC9bMC01XVxcZC87XG5jb25zdCBZTUQgOlJlZ0V4cCA9IC9cXGRcXGRcXGRcXGQtKD86KD86MFsxMzU3OF18MVswMl0pLTxfMzFfPnwoPzowWzQ2OV18MTEpLTxfMzBfPnwwMi08XzI5Xz4pLztcbmNvbnN0IFQgOlJlZ0V4cCA9IC9bVCBdLztcbmNvbnN0IEhNUyA6UmVnRXhwID0gLzxfMjNfPjo8XzU5Xz46PF81OV8+KD86XFwuXFxkKyk/LztcbmNvbnN0IFogOlJlZ0V4cCA9IC9afFsrLV08XzIzXz46PF81OV8+LztcbmV4cG9ydCBjb25zdCBEQVRFVElNRSA6UmVnRXhwID0gL14oPzo8SE1TPnwoPFlNRD4pKD86KDxUPikoPEhNUz4pKDxaPik/KT8pJC87XG5cbi8qIHBhcnNlciAqL1xuXG5jb25zdCBXaGl0ZXNwYWNlIDpSZWdFeHAgPSAvWyBcXHRdLztcblxuZXhwb3J0IGNvbnN0IFBSRV9XSElURVNQQUNFIDpSZWdFeHAgPSAvXjxXaGl0ZXNwYWNlPisvO1xuZXhwb3J0IGNvbnN0IEtFWVMgOlJlZ0V4cCA9IC9bXFx3LV0rfFwiKD86W15cXFxcXCJdK3xcXFxcW15dKSpcInwnW14nXSonL2c7XG5leHBvcnQgY29uc3QgVkFMVUVfUkVTVCA6UmVnRXhwID0gL14oKD86XFxkXFxkXFxkXFxkLVxcZFxcZC1cXGRcXGQgXFxkKT9bXFx3XFwtKy46XSspPFdoaXRlc3BhY2U+KihbXl0qKSQvO1xuZXhwb3J0IGNvbnN0IExJVEVSQUxfU1RSSU5HIDpSZWdFeHAgPSAvXicoW14nXFx4MDAtXFx4MDhcXHgwQi1cXHgxRlxceDdGXSopJzxXaGl0ZXNwYWNlPiooW15dKikvO1xuZXhwb3J0IGNvbnN0IE1VTFRJX0xJTkVfTElURVJBTF9TVFJJTkcgOlJlZ0V4cCA9IC9eKFteXSo/KScnJyg/IScpPFdoaXRlc3BhY2U+KihbXl0qKS87XG5leHBvcnQgY29uc3QgQ09OVFJPTF9DSEFSQUNURVJfRVhDTFVERV9UQUIgOlJlZ0V4cCA9IC9bXFx4MDAtXFx4MDhcXHgwQi1cXHgxRlxceDdGXS87XG5leHBvcnQgY29uc3QgRVNDQVBFRF9JTl9NVUxUSV9MSU5FIDpSZWdFeHAgPSAvXFxufFxcXFwoPzooWyBcXG5dKyl8KFtcXFxcXCJdKXwoW2J0bmZyXSl8dShbXl17NH0pfFUoW15dezh9KSkvZztcbmV4cG9ydCBjb25zdCBTWU1fV0hJVEVTUEFDRSA6UmVnRXhwID0gL15bXl08V2hpdGVzcGFjZT4qLztcblxuZXhwb3J0IGNvbnN0IF9WQUxVRV9QQUlSIDpSZWdFeHAgPSAvXiEhKFtcXHctXSopPFdoaXRlc3BhY2U+KyhbXiBcXHQjXVteXSopJC87XG5cbi8qIHBhcnNlci1leHRlbnNpb24gKi9cblxuY29uc3QgU3RyaW5nXyA6UmVnRXhwID0gLydbXiddKid8XCIoPzpbXlxcXFxcIl0rfFxcXFxbXl0pKlwiLztcbmNvbnN0IEtleVZhbHVlUGFpcnMgOlJlZ0V4cCA9IC8oPzo8U3RyaW5nXz4pPFdoaXRlc3BhY2U+Kj08V2hpdGVzcGFjZT4qKD86PFN0cmluZ18+KTxXaGl0ZXNwYWNlPiooPzosPFdoaXRlc3BhY2U+Kig/OjxTdHJpbmdfPik8V2hpdGVzcGFjZT4qPTxXaGl0ZXNwYWNlPiooPzo8U3RyaW5nXz4pPFdoaXRlc3BhY2U+KikqLztcbmNvbnN0IE5vbkVtcHR5T2JqZWN0IDpSZWdFeHAgPSAvezxXaGl0ZXNwYWNlPio8S2V5VmFsdWVQYWlycz59LztcbmNvbnN0IE9iamVjdCA6UmVnRXhwID0gL3s8V2hpdGVzcGFjZT4qfXw8Tm9uRW1wdHlPYmplY3Q+LztcbmNvbnN0IFN0cmluZ09yQXJyYXkgOlJlZ0V4cCA9IC88U3RyaW5nXz58PE5vbkVtcHR5T2JqZWN0PnxcXFs8V2hpdGVzcGFjZT4rKD86PFN0cmluZ18+KTxXaGl0ZXNwYWNlPiooPzosPFdoaXRlc3BhY2U+Kig/OjxPYmplY3Q+KTxXaGl0ZXNwYWNlPiopK10vO1xuY29uc3QgUmVnRXhwQ29udGVudCA6UmVnRXhwID0gLyg/OlteXFxcXFsvXSt8XFxbKD86W15cXFxcXFxdXSt8XFxcXFteXSkqXXxcXFxcW15dKSsvO1xuY29uc3QgUnVsZSA6UmVnRXhwID0gL1xcKDxXaGl0ZXNwYWNlPiooPzpcXC88UmVnRXhwQ29udGVudD5cXC9bYS16XSo8V2hpdGVzcGFjZT4qPTxXaGl0ZXNwYWNlPiooPzo8U3RyaW5nT3JBcnJheT4pPFdoaXRlc3BhY2U+Knw8S2V5VmFsdWVQYWlycz4pXFwpLztcblxuZXhwb3J0IGNvbnN0IFNVQiA6UmVnRXhwID0gLzxPYmplY3Q+L2c7XG5leHBvcnQgY29uc3QgREVMSU1JVEVSX0NIRUNLIDpSZWdFeHAgPSAvW15gXS87XG5leHBvcnQgY29uc3QgSU5URVJQT0xBVElPTiA6UmVnRXhwID0gLzxSdWxlPi9nO1xuZXhwb3J0IGNvbnN0IElOVEVSUE9MQVRJT05TIDpSZWdFeHAgPSAvXig/OjxSdWxlPjxXaGl0ZXNwYWNlPiopKjxXaGl0ZXNwYWNlPiooW15dKikkLztcbmV4cG9ydCBjb25zdCBJTlRFUlBPTEFUSU9OX1RPS0VOIDpSZWdFeHAgPSAvPFN0cmluZ18+L2c7XG5leHBvcnQgY29uc3QgUkVHRVhQX01PREUgOlJlZ0V4cCA9IC9eXFwoPFdoaXRlc3BhY2U+KlxcLy87XG5leHBvcnQgY29uc3QgUEFUVEVSTl9GTEFHU19SRVBMQUNFUiA6UmVnRXhwID0gL1xcLyg8UmVnRXhwQ29udGVudD4pXFwvKFthLXpdKik8V2hpdGVzcGFjZT4qPTxXaGl0ZXNwYWNlPiooPFN0cmluZ09yQXJyYXk+KS87XG5leHBvcnQgY29uc3QgV0hPTEVfQU5EX1NVQlMgOlJlZ0V4cCA9IC8oPFN0cmluZ18+KTxXaGl0ZXNwYWNlPiooW15dKikvO1xuZXhwb3J0IGNvbnN0IERPTExBUiA6UmVnRXhwID0gL1xcJCg/OlsxLTldXFxkP3xcXCQpL2c7XG4iXX0=",
			"import * as iterator from './iterator';\nimport * as RE from './RE-higher.RegExp';\n/* parser */\nconst MULTI_LINE_BASIC_STRING = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0(_) {\n    for (let _0 = '';;) {\n        if (_ === '') {\n            return _0;\n        }\n        const $ = MULTI_LINE_BASIC_STRING.exec(_);\n        if ($ === null) {\n            return _0;\n        }\n        _0 += $[0];\n        _ = _.slice($[0].length);\n    }\n}\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\ \\n]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(_) {\n    return _.replace(ESCAPED_EXCLUDE_CONTROL_CHARACTER, '') === '';\n}\nconst BASIC_STRING = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec(_2) {\n    _2 = _2.slice(1);\n    for (let _1 = '';;) {\n        const $ = BASIC_STRING.exec(_2);\n        if ($ === null) {\n            _2.startsWith('\"')\n                || iterator.throwSyntaxError(iterator.where());\n            return { 1: _1, 2: _2.replace(RE.SYM_WHITESPACE, '') };\n        }\n        _1 += $[0];\n        _2 = _2.slice($[0].length);\n    }\n}\nconst BARE_KEY = /^[\\w-]+/;\nconst LITERAL_KEY = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst DOT_KEY = /^[ \\t]*\\.[ \\t]*/;\nexport function TABLE_DEFINITION_exec(_) {\n    const _1 = _.charAt(1) === '[';\n    _ = _.slice(_1 ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    const _2 = getKeys(_);\n    _ = _.slice(_2.length).replace(RE.PRE_WHITESPACE, '');\n    _.startsWith(']')\n        || iterator.throwSyntaxError(iterator.where());\n    const _3 = _.charAt(1) === ']';\n    _ = _.slice(_3 ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n    _ === ''\n        || _.startsWith('#')\n        || iterator.throwSyntaxError(iterator.where());\n    return { 1: _1, 2: _2, 3: _3, 4: _ };\n}\nconst KEY_VALUE_PAIR = /^[ \\t]*=[ \\t]*(!!([\\w-]*)[ \\t]+)?([^ \\t#][^]*)$/;\nexport function KEY_VALUE_PAIR_exec(_) {\n    const _1 = getKeys(_);\n    const $ = KEY_VALUE_PAIR.exec(_.slice(_1.length));\n    $\n        || iterator.throwSyntaxError(iterator.where());\n    return { 1: _1, 2: $[1], 3: $[2], 4: $[3] };\n}\nfunction getKeys(_) {\n    for (let keys = '';;) {\n        if (_.startsWith('\"')) {\n            _ = _.slice(1);\n            for (let key = '\"';;) {\n                const $ = BASIC_STRING.exec(_);\n                if ($ === null) {\n                    _.startsWith('\"')\n                        || iterator.throwSyntaxError(iterator.where());\n                    _ = _.slice(1);\n                    keys += key + '\"';\n                    break;\n                }\n                _ = _.slice($[0].length);\n                key += $[0];\n            }\n        }\n        else {\n            const key = ((_.startsWith('\\'') ? LITERAL_KEY : BARE_KEY).exec(_) || iterator.throwSyntaxError(iterator.where()))[0];\n            _ = _.slice(key.length);\n            keys += key;\n        }\n        const $ = DOT_KEY.exec(_);\n        if ($ === null) {\n            return keys;\n        }\n        _ = _.slice($[0].length);\n        keys += $[0];\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import Symbol from '.Symbol';\nimport Date from '.Date';\nimport * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\nconst literal_cache = Symbol('literal_cache');\nconst value_cache = Symbol('value_cache');\nexport class Datetime extends Date {\n    constructor(literal) {\n        // @ts-ignore\n        const { 0: hms_ms = '', 1: YMD = '', 2: T = '', 3: HMS_MS = hms_ms, 4: Z = '' } = RE.DATETIME.exec(literal) || iterator.throwSyntaxError('Invalid Datetime ' + literal + ' at ' + iterator.where());\n        super(Z ? YMD + 'T' + HMS_MS + Z :\n            T ? YMD + 'T' + HMS_MS :\n                YMD ? YMD + 'T00:00:00.000'\n                    : '1970-01-01T' + HMS_MS);\n        this.type =\n            Z ? 'Offset Date-Time' :\n                T ? 'Local Date-Time' :\n                    YMD ? 'Local Date'\n                        : 'Local Time';\n        this[literal_cache] = literal;\n        this[value_cache] = this.getTime();\n    }\n    //static isDatetime (value :any) :boolean { return value instanceof Datetime; }\n    //toJSON (this :Datetime) :string { return this.toISOString(); }\n    toISOString() {\n        if (this.getTime() === this[value_cache]) {\n            return this[literal_cache];\n        }\n        throw new Error('Datetime value has been modified.');\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRhdGV0aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLElBQUksTUFBTSxPQUFPLENBQUM7QUFDekIsT0FBTyxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbEMsT0FBTyxLQUFLLFFBQVEsTUFBTSxtQkFBbUIsQ0FBQztBQUU5QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDOUMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxRQUFTLFNBQVEsSUFBSTtJQUlqQyxZQUFhLE9BQWU7UUFDM0IsYUFBYTtRQUNiLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFvQixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEdBQUMsT0FBTyxHQUFDLE1BQU0sR0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMvTSxLQUFLLENBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBQyxHQUFHLEdBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLGVBQWU7b0JBQ3hCLENBQUMsQ0FBQyxhQUFhLEdBQUMsTUFBTSxDQUN6QixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUk7WUFDUixDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZO3dCQUNqQixDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsK0VBQStFO0lBRS9FLGdFQUFnRTtJQUNoRSxXQUFXO1FBQ1YsSUFBSyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFHO1lBQUUsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FBRTtRQUN6RSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5bWJvbCBmcm9tICcuU3ltYm9sJztcbmltcG9ydCBEYXRlIGZyb20gJy5EYXRlJztcbmltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcbmltcG9ydCAqIGFzIGl0ZXJhdG9yIGZyb20gJy4uL3NoYXJlL2l0ZXJhdG9yJztcblxuY29uc3QgbGl0ZXJhbF9jYWNoZSA9IFN5bWJvbCgnbGl0ZXJhbF9jYWNoZScpO1xuY29uc3QgdmFsdWVfY2FjaGUgPSBTeW1ib2woJ3ZhbHVlX2NhY2hlJyk7XG5cbmV4cG9ydCBjbGFzcyBEYXRldGltZSBleHRlbmRzIERhdGUge1xuXHRcblx0dHlwZSA6c3RyaW5nO1xuXHRcblx0Y29uc3RydWN0b3IgKGxpdGVyYWwgOnN0cmluZykge1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRjb25zdCB7IDA6IGhtc19tcyA9ICcnLCAxOiBZTUQgPSAnJywgMjogVCA9ICcnLCAzOiBITVNfTVMgPSBobXNfbXMsIDQ6IFogPSAnJyB9IDpSZWdFeHBFeGVjQXJyYXkgPSBSRS5EQVRFVElNRS5leGVjKGxpdGVyYWwpIHx8IGl0ZXJhdG9yLnRocm93U3ludGF4RXJyb3IoJ0ludmFsaWQgRGF0ZXRpbWUgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcblx0XHRzdXBlcihcblx0XHRcdFogPyBZTUQrJ1QnK0hNU19NUytaIDpcblx0XHRcdFx0VCA/IFlNRCsnVCcrSE1TX01TIDpcblx0XHRcdFx0XHRZTUQgPyBZTUQrJ1QwMDowMDowMC4wMDAnXG5cdFx0XHRcdFx0XHQ6ICcxOTcwLTAxLTAxVCcrSE1TX01TXG5cdFx0KTtcblx0XHR0aGlzLnR5cGUgPVxuXHRcdFx0WiA/ICdPZmZzZXQgRGF0ZS1UaW1lJyA6XG5cdFx0XHRcdFQgPyAnTG9jYWwgRGF0ZS1UaW1lJyA6XG5cdFx0XHRcdFx0WU1EID8gJ0xvY2FsIERhdGUnXG5cdFx0XHRcdFx0XHQ6ICdMb2NhbCBUaW1lJztcblx0XHR0aGlzW2xpdGVyYWxfY2FjaGVdID0gbGl0ZXJhbDtcblx0XHR0aGlzW3ZhbHVlX2NhY2hlXSA9IHRoaXMuZ2V0VGltZSgpO1xuXHR9XG5cdFxuXHQvL3N0YXRpYyBpc0RhdGV0aW1lICh2YWx1ZSA6YW55KSA6Ym9vbGVhbiB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGV0aW1lOyB9XG5cdFxuXHQvL3RvSlNPTiAodGhpcyA6RGF0ZXRpbWUpIDpzdHJpbmcgeyByZXR1cm4gdGhpcy50b0lTT1N0cmluZygpOyB9XG5cdHRvSVNPU3RyaW5nICh0aGlzIDpEYXRldGltZSkgOnN0cmluZyB7XG5cdFx0aWYgKCB0aGlzLmdldFRpbWUoKT09PXRoaXNbdmFsdWVfY2FjaGVdICkgeyByZXR1cm4gdGhpc1tsaXRlcmFsX2NhY2hlXTsgfVxuXHRcdHRocm93IG5ldyBFcnJvcignRGF0ZXRpbWUgdmFsdWUgaGFzIGJlZW4gbW9kaWZpZWQuJyk7XG5cdH1cblx0XG59XG4iXX0=",
			"import * as RE from '../share/RE';\n//import Infinity, NaN from '.Infinity'+'.NaN';\nimport * as iterator from '../share/iterator';\n// @ts-ignore\nexport const Float = (literal) => {\n    if (RE.FLOAT.test(literal) && RE.FLOAT_NOT_INTEGER.test(literal)) {\n        return +literal.replace(RE.UNDERSCORES, '');\n        //const number = +literal.replace(RE.UNDERSCORES, '');\n        //isFinite(number) || iterator.throwRangeError('Float can not be as big as Infinity, like '+literal+' at '+where());\n        //return number;\n    }\n    //if ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n    //if ( literal==='-inf' ) { return -Infinity; }\n    //if ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n    iterator.throwSyntaxError('Invalid Float ' + literal + ' at ' + iterator.where());\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsb2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLCtDQUErQztBQUMvQyxPQUFPLEtBQUssUUFBUSxNQUFNLG1CQUFtQixDQUFDO0FBRTlDLGFBQWE7QUFDYixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUNoRCxJQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUc7UUFDbkUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QyxzREFBc0Q7UUFDdEQsb0hBQW9IO1FBQ3BILGdCQUFnQjtLQUNoQjtJQUNELGlFQUFpRTtJQUNqRSwrQ0FBK0M7SUFDL0MsZ0ZBQWdGO0lBQ2hGLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsR0FBQyxPQUFPLEdBQUMsTUFBTSxHQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcbi8vaW1wb3J0IEluZmluaXR5LCBOYU4gZnJvbSAnLkluZmluaXR5JysnLk5hTic7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICcuLi9zaGFyZS9pdGVyYXRvcic7XG5cbi8vIEB0cy1pZ25vcmVcbmV4cG9ydCBjb25zdCBGbG9hdCA9IChsaXRlcmFsIDpzdHJpbmcpIDpudW1iZXIgPT4ge1xuXHRpZiAoIFJFLkZMT0FULnRlc3QobGl0ZXJhbCkgJiYgUkUuRkxPQVRfTk9UX0lOVEVHRVIudGVzdChsaXRlcmFsKSApIHtcblx0XHRyZXR1cm4gK2xpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpO1xuXHRcdC8vY29uc3QgbnVtYmVyID0gK2xpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpO1xuXHRcdC8vaXNGaW5pdGUobnVtYmVyKSB8fCBpdGVyYXRvci50aHJvd1JhbmdlRXJyb3IoJ0Zsb2F0IGNhbiBub3QgYmUgYXMgYmlnIGFzIEluZmluaXR5LCBsaWtlICcrbGl0ZXJhbCsnIGF0ICcrd2hlcmUoKSk7XG5cdFx0Ly9yZXR1cm4gbnVtYmVyO1xuXHR9XG5cdC8vaWYgKCBsaXRlcmFsPT09J2luZicgfHwgbGl0ZXJhbD09PScraW5mJyApIHsgcmV0dXJuIEluZmluaXR5OyB9XG5cdC8vaWYgKCBsaXRlcmFsPT09Jy1pbmYnICkgeyByZXR1cm4gLUluZmluaXR5OyB9XG5cdC8vaWYgKCBsaXRlcmFsPT09J25hbicgfHwgbGl0ZXJhbD09PScrbmFuJyB8fCBsaXRlcmFsPT09Jy1uYW4nICkgeyByZXR1cm4gTmFOOyB9XG5cdGl0ZXJhdG9yLnRocm93U3ludGF4RXJyb3IoJ0ludmFsaWQgRmxvYXQgJytsaXRlcmFsKycgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcbn07XG4iXX0=",
			"import * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\nexport const NumberInteger = (literal) => {\n    if (literal === '0' || literal === '+0' || literal === '-0') {\n        return 0;\n    }\n    (literal.charAt(0) === '0' ? RE.XOB_INTEGER : RE.INTEGER).test(literal)\n        || iterator.throwSyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where());\n    const number = +literal.replace(RE.UNDERSCORES, '');\n    options.allowLonger\n        || isSafeInteger(number)\n        || iterator.throwRangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes ' + literal + ' meet at ' + iterator.where());\n    return number;\n};\nexport const BigIntInteger = (literal) => {\n    if (literal === '0' || literal === '+0' || literal === '-0') {\n        return 0n;\n    }\n    (literal.charAt(0) === '0' ? RE.XOB_INTEGER : RE.INTEGER).test(literal) || iterator.throwSyntaxError('Invalid Integer ' + literal + ' at ' + iterator.where());\n    const bigInt = BigInt(literal.replace(RE.UNDERSCORES, ''));\n    options.allowLonger\n        || -9223372036854775808n <= bigInt && bigInt <= 9223372036854775807n // ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n        || iterator.throwRangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes ' + literal + ' meet at ' + iterator.where());\n    return bigInt;\n};\nexport const DependInteger = (literal) => {\n    const bigInt = BigIntInteger(literal);\n    return options.IntegerMin <= bigInt && bigInt <= options.IntegerMax ? +(bigInt + '') : bigInt;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dGVudCI6WyJpbXBvcnQgKiBhcyBSRSBmcm9tICcuLi9zaGFyZS9SRSc7XG5pbXBvcnQgKiBhcyBpdGVyYXRvciBmcm9tICcuLi9zaGFyZS9pdGVyYXRvcic7XG5pbXBvcnQgKiBhcyBvcHRpb25zIGZyb20gJy4uL3NoYXJlL29wdGlvbnMnO1xuaW1wb3J0IGlzU2FmZUludGVnZXIgZnJvbSAnLk51bWJlci5pc1NhZmVJbnRlZ2VyJztcbmltcG9ydCBCaWdJbnQgZnJvbSAnLkJpZ0ludCc7XG5cbmV4cG9ydCBjb25zdCBOdW1iZXJJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgOm51bWJlciA9PiB7XG5cdGlmICggbGl0ZXJhbD09PScwJyB8fCBsaXRlcmFsPT09JyswJyB8fCBsaXRlcmFsPT09Jy0wJyApIHsgcmV0dXJuIDA7IH1cblx0KCBsaXRlcmFsLmNoYXJBdCgwKT09PScwJyA/IFJFLlhPQl9JTlRFR0VSIDogUkUuSU5URUdFUiApLnRlc3QobGl0ZXJhbClcblx0fHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcignSW52YWxpZCBJbnRlZ2VyICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdGNvbnN0IG51bWJlciA9ICtsaXRlcmFsLnJlcGxhY2UoUkUuVU5ERVJTQ09SRVMsICcnKTtcblx0b3B0aW9ucy5hbGxvd0xvbmdlclxuXHR8fCBpc1NhZmVJbnRlZ2VyKG51bWJlcilcblx0fHwgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnRlZ2VyIGRpZCBub3QgdXNlIEJpdEludCBtdXN0IGJlIE51bWJlci5pc1NhZmVJbnRlZ2VyLCBub3QgaW5jbHVkZXMgJytsaXRlcmFsKycgbWVldCBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IEJpZ0ludEludGVnZXIgPSAobGl0ZXJhbCA6c3RyaW5nKSA6YmlnaW50ID0+IHtcblx0aWYgKCBsaXRlcmFsPT09JzAnIHx8IGxpdGVyYWw9PT0nKzAnIHx8IGxpdGVyYWw9PT0nLTAnICkgeyByZXR1cm4gMG47IH1cblx0KCBsaXRlcmFsLmNoYXJBdCgwKT09PScwJyA/IFJFLlhPQl9JTlRFR0VSIDogUkUuSU5URUdFUiApLnRlc3QobGl0ZXJhbCkgfHwgaXRlcmF0b3IudGhyb3dTeW50YXhFcnJvcignSW52YWxpZCBJbnRlZ2VyICcrbGl0ZXJhbCsnIGF0ICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdGNvbnN0IGJpZ0ludCA6YmlnaW50ID0gQmlnSW50KGxpdGVyYWwucmVwbGFjZShSRS5VTkRFUlNDT1JFUywgJycpKTtcblx0b3B0aW9ucy5hbGxvd0xvbmdlclxuXHR8fCAtOTIyMzM3MjAzNjg1NDc3NTgwOG48PWJpZ0ludCAmJiBiaWdJbnQ8PTkyMjMzNzIwMzY4NTQ3NzU4MDduLy8gKCBtaW4gPSAtKDJuKiooNjRuLTFuKSkgfHwgfm1heCApIDw9IGxvbmcgPD0gKCBtYXggPSAybioqKDY0bi0xbiktMW4gfHwgfm1pbiApXG5cdHx8IGl0ZXJhdG9yLnRocm93UmFuZ2VFcnJvcignSW50ZWdlciBleHBlY3QgNjQgYml0IHJhbmdlICgtOSwyMjMsMzcyLDAzNiw4NTQsNzc1LDgwOCB0byA5LDIyMywzNzIsMDM2LDg1NCw3NzUsODA3KSwgbm90IGluY2x1ZGVzICcrbGl0ZXJhbCsnIG1lZXQgYXQgJytpdGVyYXRvci53aGVyZSgpKTtcblx0cmV0dXJuIGJpZ0ludDtcbn07XG5cbmV4cG9ydCBjb25zdCBEZXBlbmRJbnRlZ2VyID0gKGxpdGVyYWwgOnN0cmluZykgPT4ge1xuXHRjb25zdCBiaWdJbnQgOmJpZ2ludCA9IEJpZ0ludEludGVnZXIobGl0ZXJhbCk7XG5cdHJldHVybiBvcHRpb25zLkludGVnZXJNaW48PWJpZ0ludCAmJiBiaWdJbnQ8PW9wdGlvbnMuSW50ZWdlck1heCA/ICsoIGJpZ0ludCsnJyApIDogYmlnSW50O1xufTtcbiJdfQ==",
			"import WeakSet from '.WeakSet';\nimport create from '.Object.create';\nimport Error from '.Error';\nimport getOwnPropertyNames from '.Object.getOwnPropertyNames';\nimport getPrototypeOf from '.Reflect.getPrototypeOf';\nimport stringify from '.JSON.stringify';\nimport TypeError from '.TypeError';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport RangeError from '.RangeError';\nimport Proxy from '.Proxy';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from '../types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from '../types/Integer';\nimport * as iterator from './iterator';\nexport const FUNCTION = new WeakSet;\nexport const unType = (array) => array;\nexport const { asInlineArrayOfNulls, asInlineArrayOfStrings, asInlineArrayOfTables, asInlineArrayOfArrays, asInlineArrayOfBooleans, asInlineArrayOfFloats, asInlineArrayOfDatetimes, asInlineArrayOfIntegers } = new Proxy(new WeakMap, {\n    get: (arrayTypes) => function typify(array) {\n        if (arrayTypes.has(array)) {\n            arrayTypes.get(array) === typify\n                || iterator.throwTypeError('Types in array must be same. Check ' + iterator.where());\n        }\n        else {\n            arrayTypes.set(array, typify);\n        }\n        return array;\n    }\n});\nexport let useWhatToJoinMultiLineString;\nexport let IntegerDepends, IntegerMin, IntegerMax;\nexport let TableDepends;\nexport let open;\nexport let allowLonger;\nexport let keepComment;\nexport let enableNull;\nexport let enableNil;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma;\nexport let enableInterpolationString;\nexport let asNulls, asStrings, asTables, asArrays, asBooleans, asFloats, asDatetimes, asIntegers;\nexport let customConstructors;\nexport function use(useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger, extensionOptions) {\n    if (typeof useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines !== 'string') {\n        throw new TypeError('TOML.parse(,,multiLineJoiner)');\n    }\n    if (useBigInt_forInteger === true) {\n        IntegerDepends = BigIntInteger;\n    }\n    else if (useBigInt_forInteger === false) {\n        IntegerDepends = NumberInteger;\n    }\n    else {\n        if (typeof useBigInt_forInteger !== 'number') {\n            throw new TypeError('TOML.parse(,,,useBigInt)');\n        }\n        if (!isSafeInteger(useBigInt_forInteger)) {\n            throw new RangeError('TOML.parse(...useBigInt)');\n        }\n        IntegerDepends = DependInteger;\n        if (useBigInt_forInteger >= 0) {\n            IntegerMax = useBigInt_forInteger;\n            IntegerMin = -useBigInt_forInteger;\n        }\n        else {\n            IntegerMin = useBigInt_forInteger;\n            IntegerMax = -useBigInt_forInteger - 1;\n        }\n    }\n    useWhatToJoinMultiLineString = useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines;\n    let typify;\n    if (extensionOptions === null) {\n        TableDepends = Table;\n        open = allowLonger = keepComment = enableNull = enableNil = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = false;\n        customConstructors = null;\n        typify = true;\n    }\n    else {\n        TableDepends = extensionOptions.order ? OrderedTable : Table;\n        open = !!extensionOptions.open;\n        allowLonger = !!extensionOptions.longer;\n        keepComment = !!extensionOptions.hash;\n        enableNull = !!extensionOptions.null;\n        enableNil = !!extensionOptions.nil;\n        allowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!extensionOptions.multi;\n        enableInterpolationString = !!extensionOptions.ins;\n        typify = !extensionOptions.mix;\n        customConstructors = extensionOptions.new || null;\n        if (customConstructors !== null) {\n            if (typeof customConstructors === 'function') {\n                if (typify) {\n                    customConstructors = null;\n                    throw new Error('TOML.parse(,,,,{ mix:false, new(){} })');\n                }\n                if (customConstructors.length !== 2) {\n                    throw new Error('TOML.parse(,,,,xOptions.new.length)');\n                }\n                FUNCTION.add(customConstructors);\n            }\n            else if (typeof customConstructors === 'object') {\n                if (typify) {\n                    customConstructors = null;\n                    throw new Error('TOML.parse(,,,,{ mix:false, new:{} })');\n                }\n                if (getPrototypeOf(customConstructors) === null) {\n                    for (const type of getOwnPropertyNames(customConstructors)) {\n                        if (typeof customConstructors[type] !== 'function') {\n                            customConstructors = null;\n                            throw new TypeError('TOML.parse(,,,,xOptions.new[' + stringify(type) + '])');\n                        }\n                        if (customConstructors[type].length) {\n                            customConstructors = null;\n                            throw new Error('TOML.parse(,,,,xOptions.new[' + stringify(type) + '].length)');\n                        }\n                    }\n                }\n                else {\n                    const origin = customConstructors;\n                    customConstructors = create(null);\n                    for (const type of getOwnPropertyNames(origin)) {\n                        const customConstructor = origin[type];\n                        if (typeof customConstructor !== 'function') {\n                            customConstructors = null;\n                            throw new TypeError('TOML.parse(,,,,xOptions.new[' + stringify(type) + '])');\n                        }\n                        if (customConstructors[type].length) {\n                            customConstructors = null;\n                            throw new Error('TOML.parse(,,,,xOptions.new[' + stringify(type) + '].length)');\n                        }\n                        customConstructors[type] = customConstructor;\n                    }\n                }\n            }\n            else {\n                throw new TypeError('TOML.parse(,,,,xOptions.new)');\n            }\n        }\n    }\n    if (typify) {\n        asNulls = asInlineArrayOfNulls;\n        asStrings = asInlineArrayOfStrings;\n        asTables = asInlineArrayOfTables;\n        asArrays = asInlineArrayOfArrays;\n        asBooleans = asInlineArrayOfBooleans;\n        asFloats = asInlineArrayOfFloats;\n        asDatetimes = asInlineArrayOfDatetimes;\n        asIntegers = asInlineArrayOfIntegers;\n    }\n    else {\n        asNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asDatetimes = asIntegers = unType;\n    }\n}\nexport function clear() {\n    customConstructors = null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nconst ESCAPE_ALIAS = { b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\nconst unEscapeSingleLine = (match, p1, p2, p3, p4) => {\n    if (p1) {\n        return p1;\n    }\n    if (p2) {\n        return ESCAPE_ALIAS[p2];\n    }\n    const codePoint = parseInt(p3 || p4, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throwRangeError('Invalid Unicode Scalar ' + (p3 ? '\\\\u' + p3 : '\\\\U' + p4) + ' at ' + iterator.where());\n    return fromCodePoint(codePoint);\n};\nconst unEscapeMultiLine = (match, p1, p2, p3, p4, p5) => {\n    if (match === '\\n') {\n        return options.useWhatToJoinMultiLineString;\n    }\n    if (p1) {\n        p1.includes('\\n')\n            || iterator.throwSyntaxError('Back slash leading whitespaces can only appear at the end of a line, but see ' + iterator.where());\n        return '';\n    }\n    if (p2) {\n        return p2;\n    }\n    if (p3) {\n        return ESCAPE_ALIAS[p3];\n    }\n    const codePoint = parseInt(p4 || p5, 16);\n    (0xD7FF < codePoint && codePoint < 0xE000 || 0x10FFFF < codePoint)\n        && iterator.throwRangeError('Invalid Unicode Scalar ' + (p4 ? '\\\\u' + p4 : '\\\\U' + p5) + ' at ' + iterator.where());\n    return fromCodePoint(codePoint);\n};\nexport const BasicString = (literal) => literal.replace(RE.ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\nexport const MultiLineBasicString = (literal) => literal.replace(RE.ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNLG9CQUFvQixHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlSW50IGZyb20gJy5wYXJzZUludCc7XG5pbXBvcnQgZnJvbUNvZGVQb2ludCBmcm9tICcuU3RyaW5nLmZyb21Db2RlUG9pbnQnO1xuaW1wb3J0ICogYXMgaXRlcmF0b3IgZnJvbSAnLi4vc2hhcmUvaXRlcmF0b3InO1xuaW1wb3J0ICogYXMgb3B0aW9ucyBmcm9tICcuLi9zaGFyZS9vcHRpb25zJztcbmltcG9ydCAqIGFzIFJFIGZyb20gJy4uL3NoYXJlL1JFJztcblxuY29uc3QgRVNDQVBFX0FMSUFTID0geyBiOiAnXFxiJywgdDogJ1xcdCcsIG46ICdcXG4nLCBmOiAnXFxmJywgcjogJ1xccicgfTtcblxudHlwZSBwID0gc3RyaW5nIHwgdW5kZWZpbmVkO1xudHlwZSBidG5mciA9ICdiJyB8ICdiJyB8ICduJyB8ICdmJyB8ICdyJyB8IHVuZGVmaW5lZDtcblxuY29uc3QgdW5Fc2NhcGVTaW5nbGVMaW5lID0gKG1hdGNoIDpzdHJpbmcsIHAxIDonXCInIHwgdW5kZWZpbmVkLCBwMiA6YnRuZnIsIHAzIDpwLCBwNCA6cCkgOnN0cmluZyA9PiB7XG5cdGlmICggcDEgKSB7IHJldHVybiBwMTsgfVxuXHRpZiAoIHAyICkgeyByZXR1cm4gRVNDQVBFX0FMSUFTW3AyXTsgfVxuXHRjb25zdCBjb2RlUG9pbnQgOm51bWJlciA9IHBhcnNlSW50KHAzIHx8IDxzdHJpbmc+cDQsIDE2KTtcblx0KCAweEQ3RkY8Y29kZVBvaW50ICYmIGNvZGVQb2ludDwweEUwMDAgfHwgMHgxMEZGRkY8Y29kZVBvaW50IClcblx0JiYgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnZhbGlkIFVuaWNvZGUgU2NhbGFyICcrKCBwMyA/ICdcXFxcdScrcDMgOiAnXFxcXFUnK3A0ICkrJyBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufTtcblxuY29uc3QgdW5Fc2NhcGVNdWx0aUxpbmUgPSAobWF0Y2ggOnN0cmluZywgcDEgOidcXG4nIHwgdW5kZWZpbmVkLCBwMiA6J1wiJywgcDMgOmJ0bmZyLCBwNCA6cCwgcDUgOnApIDpzdHJpbmcgPT4ge1xuXHRpZiAoIG1hdGNoPT09J1xcbicgKSB7IHJldHVybiBvcHRpb25zLnVzZVdoYXRUb0pvaW5NdWx0aUxpbmVTdHJpbmc7IH1cblx0aWYgKCBwMSApIHtcblx0XHRwMS5pbmNsdWRlcygnXFxuJylcblx0XHR8fCBpdGVyYXRvci50aHJvd1N5bnRheEVycm9yKCdCYWNrIHNsYXNoIGxlYWRpbmcgd2hpdGVzcGFjZXMgY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSBlbmQgb2YgYSBsaW5lLCBidXQgc2VlICcraXRlcmF0b3Iud2hlcmUoKSk7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdGlmICggcDIgKSB7IHJldHVybiBwMjsgfVxuXHRpZiAoIHAzICkgeyByZXR1cm4gRVNDQVBFX0FMSUFTW3AzXTsgfVxuXHRjb25zdCBjb2RlUG9pbnQgOm51bWJlciA9IHBhcnNlSW50KHA0IHx8IDxzdHJpbmc+cDUsIDE2KTtcblx0KCAweEQ3RkY8Y29kZVBvaW50ICYmIGNvZGVQb2ludDwweEUwMDAgfHwgMHgxMEZGRkY8Y29kZVBvaW50IClcblx0JiYgaXRlcmF0b3IudGhyb3dSYW5nZUVycm9yKCdJbnZhbGlkIFVuaWNvZGUgU2NhbGFyICcrKCBwNCA/ICdcXFxcdScrcDQgOiAnXFxcXFUnK3A1ICkrJyBhdCAnK2l0ZXJhdG9yLndoZXJlKCkpO1xuXHRyZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IEJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoUkUuRVNDQVBFRF9JTl9TSU5HTEVfTElORSwgdW5Fc2NhcGVTaW5nbGVMaW5lKTtcblxuZXhwb3J0IGNvbnN0IE11bHRpTGluZUJhc2ljU3RyaW5nID0gKGxpdGVyYWwgOnN0cmluZykgOnN0cmluZyA9PiBsaXRlcmFsLnJlcGxhY2UoUkUuRVNDQVBFRF9JTl9NVUxUSV9MSU5FLCB1bkVzY2FwZU11bHRpTGluZSk7XG4iXX0=",
			"import Map from '.Map';\nimport RegExp from '.RegExp';\nimport * as iterator from './share/iterator';\nimport * as options from './share/options';\nimport { BasicString } from './types/String';\nimport * as RE from './share/RE';\nexport function assignInterpolationString(table, finalKey, delimiter) {\n    options.enableInterpolationString || iterator.throwSyntaxError(iterator.where());\n    RE.DELIMITER_CHECK.test(delimiter) && iterator.throwSyntaxError('Interpolation String opening tag incorrect at ' + iterator.where());\n    let string;\n    let lineRest;\n    {\n        const literals = [];\n        for (const start = iterator.mark();;) {\n            const literal = iterator.must('Interpolation String', start);\n            if (literal.startsWith(delimiter)) {\n                lineRest = literal.slice(delimiter.length).replace(RE.PRE_WHITESPACE, '');\n                break;\n            }\n            literals.push(literal);\n        }\n        string = literals.join('\\n');\n    }\n    if (lineRest.startsWith('(')) {\n        const interpolations_rest = RE.INTERPOLATIONS.exec(lineRest) || iterator.throwSyntaxError(iterator.where());\n        lineRest = interpolations_rest[2];\n        for (const interpolation of interpolations_rest[1].match(RE.INTERPOLATION)) {\n            if (RE.REGEXP_MODE.test(interpolation)) {\n                const { 1: pattern, 2: flags, 3: Replacer } = RE.PATTERN_FLAGS_REPLACER.exec(interpolation);\n                let search;\n                try {\n                    search = new RegExp(pattern, flags);\n                }\n                catch (error) {\n                    throw iterator.throwSyntaxError('Invalid regExp at ' + iterator.where());\n                }\n                let replacer;\n                switch (Replacer[0]) {\n                    case '\\'':\n                        replacer = Replacer.slice(1, -1);\n                        break;\n                    case '\"':\n                        replacer = BasicString(Replacer.slice(1, -1));\n                        break;\n                    case '{':\n                        const map = newMap(Replacer, true);\n                        replacer = (match) => map.has(match) ? map.get(match) : match;\n                        break;\n                    case '[':\n                        const { 1: whole, 2: subs } = RE.WHOLE_AND_SUBS.exec(Replacer);\n                        const maps = [null];\n                        for (const sub of subs.match(RE.SUB)) {\n                            maps.push(newMap(sub, true));\n                        }\n                        replacer = (...args) => whole.replace(RE.DOLLAR, ($n) => {\n                            if ($n === '$$') {\n                                return '$';\n                            }\n                            const n = $n.slice(1);\n                            const arg = args[n] || '';\n                            const map = maps[n];\n                            return map && map.has(arg) ? map.get(arg) : arg;\n                        });\n                        break;\n                }\n                string = string.replace(search, replacer);\n            }\n            else {\n                const map = newMap(interpolation, false);\n                let round = '';\n                outer: for (let length = string.length, index = 0; index < length;) {\n                    for (const { 0: search, 1: replacer } of map) {\n                        if (string.startsWith(search, index)) {\n                            round += replacer;\n                            index += search.length;\n                            continue outer;\n                        }\n                    }\n                    round += string[index];\n                    ++index;\n                }\n                string = round;\n            }\n        }\n    }\n    table[finalKey] = string;\n    return lineRest;\n}\nfunction newMap(interpolation, usedForRegExp) {\n    const map = new Map;\n    const tokens = interpolation.match(RE.INTERPOLATION_TOKEN);\n    for (let length = tokens.length, index = 0; index < length;) {\n        let search = tokens[index++];\n        search = search[0] === '\\'' ? search.slice(1, -1) : BasicString(search.slice(1, -1));\n        usedForRegExp\n            || search\n            || iterator.throwSyntaxError('Characters to replace can not be empty, which was found at ' + iterator.where());\n        map.has(search)\n            && iterator.throwSyntaxError('Duplicate ' + (usedForRegExp ? 'replacer' : 'characters to replace') + ' at ' + iterator.where());\n        let replacer = tokens[index++];\n        replacer = replacer[0] === '\\'' ? replacer.slice(1, -1) : BasicString(replacer.slice(1, -1));\n        map.set(search, replacer);\n    }\n    return map;\n}\nexport function ensureConstructor(type) {\n    options.customConstructors\n        || iterator.throwSyntaxError(iterator.where());\n    options.FUNCTION.has(options.customConstructors)\n        || type in options.customConstructors\n        || iterator.throwError(iterator.where());\n}\nexport function construct(type, value) {\n    return options.FUNCTION.has(options.customConstructors)\n        ? options.customConstructors(type, value)\n        : options.customConstructors[type](value);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import Error from '.Error';\nimport TypeError from '.TypeError';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport isArray from '.Array.isArray';\nimport Symbol_for from '.Symbol.for';\nimport isBuffer from '.Buffer.isBuffer';\nimport Symbol from '.Symbol';\nimport * as iterator from './share/iterator';\nimport { isTable, closeTables, openTables } from './types/Table';\nimport { Datetime } from './types/Datetime';\nimport { Float } from './types/Float';\nimport { BasicString, MultiLineBasicString } from './types/String';\nimport * as options from './share/options';\nimport * as RE from './share/RE';\nimport { assignInterpolationString, ensureConstructor, construct } from './parser-extension';\nexport default function parse(toml_source, toml_version, useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger = true, extensionOptions = null) {\n    if (isBuffer(toml_source)) {\n        toml_source = toml_source.toString();\n    }\n    if (typeof toml_source !== 'string') {\n        throw new TypeError('TOML.parse(source)');\n    }\n    if (toml_version !== 0.5) {\n        throw new Error('TOML.parse(,version)');\n    }\n    options.use(useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger, extensionOptions);\n    const rootTable = new options.TableDepends;\n    try {\n        iterator.from(toml_source.replace(RE.BOM, '').split(RE.EOL));\n        let lastSectionTable = rootTable;\n        while (iterator.rest()) {\n            const line = iterator.next().replace(RE.PRE_WHITESPACE, '');\n            if (line === '') { }\n            else if (line.startsWith('#')) {\n                if (options.keepComment) {\n                    lastSectionTable[Symbol('#')] = line.slice(1);\n                }\n            }\n            else if (line.startsWith('[')) {\n                const { 1: $_asArrayItem$$, 2: keys, 3: $$asArrayItem$_, 4: hash } = RE.TABLE_DEFINITION_exec(line);\n                $_asArrayItem$$ === $$asArrayItem$_ || iterator.throwSyntaxError('Square brackets of table define statement not match at ' + iterator.where());\n                lastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, hash);\n            }\n            else {\n                const rest = assignInline(lastSectionTable, line);\n                if (rest === '') { }\n                else if (rest.startsWith('#')) {\n                    if (options.keepComment) {\n                        lastSectionTable[Symbol('#')] = rest.slice(1);\n                    }\n                }\n                else {\n                    iterator.throwSyntaxError(iterator.where());\n                }\n            }\n        }\n    }\n    finally {\n        iterator.done();\n        options.clear();\n    }\n    return rootTable;\n}\n;\nfunction appendTable(table, key_key, asArrayItem, hash) {\n    const leadingKeys = parseKeys(key_key);\n    const finalKey = leadingKeys.pop();\n    table = prepareTable(table, leadingKeys);\n    let lastTable;\n    if (asArrayItem) {\n        let arrayOfTables;\n        if (finalKey in table) {\n            closeTables.has(arrayOfTables = table[finalKey]) && iterator.throwError('Trying to push Table to non-ArrayOfTables value at ' + iterator.where());\n        }\n        else {\n            arrayOfTables = table[finalKey] = [];\n        }\n        arrayOfTables.push(lastTable = new options.TableDepends);\n    }\n    else {\n        if (finalKey in table) {\n            options.open && openTables.has(lastTable = table[finalKey]) || iterator.throwError('Duplicate Table definition at ' + iterator.where());\n            openTables.delete(lastTable);\n        }\n        else {\n            table[finalKey] = lastTable = new options.TableDepends;\n        }\n    }\n    if (options.keepComment && hash) {\n        table[Symbol_for(finalKey)] = hash.slice(1);\n    }\n    return lastTable;\n}\nfunction parseKeys(key_key) {\n    const keys = key_key.match(RE.KEYS);\n    for (let index = keys.length; index--;) {\n        const key = keys[index];\n        if (key.startsWith('\\'')) {\n            keys[index] = key.slice(1, -1);\n        }\n        else if (key.startsWith('\"')) {\n            keys[index] = BasicString(key.slice(1, -1));\n        }\n    }\n    return keys;\n}\nfunction prepareTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            if (isTable(table)) {\n                closeTables.has(table) && iterator.throwError('Trying to define table through static Inline Object at ' + iterator.where());\n            }\n            else if (isArray(table)) {\n                closeTables.has(table) && iterator.throwError('Trying to append value to static Inline Array at ' + iterator.where());\n                // @ts-ignore\n                table = table[table.length - 1];\n            }\n            else {\n                iterator.throwError('Trying to define table through non-Table value at ' + iterator.where());\n            }\n        }\n        else {\n            openTables.add(table = table[key] = new options.TableDepends);\n            while (index < length) {\n                openTables.add(table = table[keys[index++]] = new options.TableDepends);\n            }\n            return table;\n        }\n    }\n    return table;\n}\nfunction prepareInlineTable(table, keys) {\n    const { length } = keys;\n    let index = 0;\n    while (index < length) {\n        const key = keys[index++];\n        if (key in table) {\n            table = table[key];\n            isTable(table) || iterator.throwError('Trying to assign property through non-Table value at ' + iterator.where());\n            closeTables.has(table) && iterator.throwError('Trying to assign property through static Inline Object at ' + iterator.where());\n        }\n        else {\n            table = table[key] = new options.TableDepends;\n            while (index < length) {\n                table = table[keys[index++]] = new options.TableDepends;\n            }\n            return table;\n        }\n    }\n    return table;\n}\nfunction assignInline(lastInlineTable, lineRest) {\n    const { 1: left, 2: custom, 3: type, 4: right } = RE.KEY_VALUE_PAIR_exec(lineRest);\n    custom && ensureConstructor(type);\n    const leadingKeys = parseKeys(left);\n    const finalKey = leadingKeys.pop();\n    const table = prepareInlineTable(lastInlineTable, leadingKeys);\n    finalKey in table && iterator.throwError('Duplicate property definition at ' + iterator.where());\n    switch (right[0]) {\n        case '\\'':\n            lineRest = assignLiteralString(table, finalKey, right);\n            break;\n        case '\"':\n            lineRest = assignBasicString(table, finalKey, right);\n            break;\n        case '{':\n            lineRest = assignInlineTable(table, finalKey, right);\n            break;\n        case '[':\n            lineRest = assignInlineArray(table, finalKey, right);\n            break;\n        case '`':\n            lineRest = assignInterpolationString(table, finalKey, right);\n            break;\n        default:\n            let literal;\n            ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(right) || iterator.throwSyntaxError(iterator.where()));\n            table[finalKey] =\n                literal === 'true' ? true : literal === 'false' ? false :\n                    literal === 'inf' || literal === '+inf' ? Infinity : literal === '-inf' ? -Infinity :\n                        literal === 'nan' || literal === '+nan' || literal === '-nan' ? NaN :\n                            literal.includes(':') || literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-') ? new Datetime(literal) :\n                                literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x') ? Float(literal) :\n                                    options.enableNull && literal === 'null' || options.enableNil && literal === 'nil' ? null :\n                                        options.IntegerDepends(literal);\n            break;\n    }\n    if (custom) {\n        table[finalKey] = construct(type, table[finalKey]);\n    }\n    if (options.keepComment && lineRest.startsWith('#')) {\n        table[Symbol_for(finalKey)] = lineRest.slice(1);\n        return '';\n    }\n    return lineRest;\n}\nfunction assignLiteralString(table, finalKey, literal) {\n    let $;\n    if (literal.charAt(1) !== '\\'' || literal.charAt(2) !== '\\'') {\n        $ = RE.LITERAL_STRING.exec(literal) || iterator.throwSyntaxError(iterator.where());\n        table[finalKey] = $[1];\n        return $[2];\n    }\n    literal = literal.slice(3);\n    $ = RE.MULTI_LINE_LITERAL_STRING.exec(literal);\n    if ($) {\n        RE.CONTROL_CHARACTER_EXCLUDE_TAB.test($[1]) && iterator.throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at ' + iterator.where());\n        table[finalKey] = $[1];\n        return $[2];\n    }\n    if (literal) {\n        RE.CONTROL_CHARACTER_EXCLUDE_TAB.test(literal) && iterator.throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at ' + iterator.where());\n        literal += options.useWhatToJoinMultiLineString;\n    }\n    const start = iterator.mark();\n    for (;;) {\n        const line = iterator.must('Literal String', start);\n        $ = RE.MULTI_LINE_LITERAL_STRING.exec(line);\n        if ($) {\n            RE.CONTROL_CHARACTER_EXCLUDE_TAB.test($[1]) && iterator.throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at ' + iterator.where());\n            table[finalKey] = literal + $[1];\n            return $[2];\n        }\n        literal += line + options.useWhatToJoinMultiLineString;\n    }\n}\nfunction assignBasicString(table, finalKey, literal) {\n    if (literal.charAt(1) !== '\"' || literal.charAt(2) !== '\"') {\n        const $ = RE.BASIC_STRING_exec(literal);\n        table[finalKey] = BasicString($[1]);\n        return $[2];\n    }\n    literal = literal.slice(3);\n    const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(literal);\n    if (literal.startsWith('\"\"\"', $.length)) {\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throwSyntaxError(iterator.where());\n        table[finalKey] = BasicString($);\n        return literal.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n    }\n    if (literal) {\n        literal += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || iterator.throwSyntaxError(iterator.where());\n    }\n    const start = iterator.mark();\n    for (;;) {\n        let line = iterator.must('Basic String', start);\n        const $ = RE.MULTI_LINE_BASIC_STRING_exec_0(line);\n        if (line.startsWith('\"\"\"', $.length)) {\n            RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throwSyntaxError(iterator.where());\n            table[finalKey] = MultiLineBasicString(literal + $);\n            return line.slice($.length + 3).replace(RE.PRE_WHITESPACE, '');\n        }\n        line += '\\n';\n        RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || iterator.throwSyntaxError(iterator.where());\n        literal += line;\n    }\n}\nfunction assignInlineTable(table, finalKey, lineRest) {\n    const inlineTable = table[finalKey] = new options.TableDepends;\n    closeTables.add(inlineTable);\n    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n    if (options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma) {\n        const start = iterator.mark();\n        for (;;) {\n            for (;;) {\n                if (lineRest === '') { }\n                else if (lineRest.startsWith('#')) {\n                    if (options.keepComment) {\n                        table[Symbol('#')] = lineRest.slice(1);\n                    }\n                }\n                else {\n                    break;\n                }\n                lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n            }\n            if (lineRest.startsWith('}')) {\n                return lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n            lineRest = assignInline(inlineTable, lineRest);\n            for (;;) {\n                if (lineRest === '') { }\n                else if (lineRest.startsWith('#')) {\n                    if (options.keepComment) {\n                        table[Symbol('#')] = lineRest.slice(1);\n                    }\n                }\n                else {\n                    break;\n                }\n                lineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n            }\n            if (lineRest.startsWith(',')) {\n                lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n        }\n    }\n    else {\n        if (lineRest.startsWith('}')) {\n            return lineRest.replace(RE.SYM_WHITESPACE, '');\n        }\n        (lineRest === '' || lineRest.startsWith('#')) && iterator.throwSyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where());\n        for (;;) {\n            lineRest = assignInline(inlineTable, lineRest);\n            if (lineRest.startsWith('}')) {\n                return lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n            if (lineRest.startsWith(',')) {\n                lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n                lineRest.startsWith('}') && iterator.throwSyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at ' + iterator.where());\n            }\n            (lineRest === '' || lineRest.startsWith('#')) && iterator.throwSyntaxError('Inline Table is intended to appear on a single line, which broken at ' + iterator.where());\n        }\n    }\n}\nfunction assignInlineArray(table, finalKey, lineRest) {\n    const inlineArray = table[finalKey] = [];\n    closeTables.add(inlineArray);\n    const start = iterator.mark();\n    lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n    for (;;) {\n        if (lineRest === '') { }\n        else if (lineRest.startsWith('#')) {\n            if (options.keepComment) {\n                table[Symbol('#')] = lineRest.slice(1);\n            }\n        }\n        else {\n            break;\n        }\n        lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n    }\n    if (lineRest.startsWith(']')) {\n        return lineRest.replace(RE.SYM_WHITESPACE, '');\n    }\n    for (;;) {\n        lineRest = pushInline(inlineArray, lineRest);\n        for (;;) {\n            if (lineRest === '') { }\n            else if (lineRest.startsWith('#')) {\n                if (options.keepComment) {\n                    table[Symbol('#')] = lineRest.slice(1);\n                }\n            }\n            else {\n                break;\n            }\n            lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n        }\n        if (lineRest.startsWith(',')) {\n            lineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n            if (options.keepComment && lineRest.startsWith('#')) {\n                inlineArray[Symbol_for(inlineArray.length - 1 + '')] = lineRest.slice(1);\n                lineRest = '';\n            }\n            for (;;) {\n                if (lineRest === '') { }\n                else if (lineRest.startsWith('#')) {\n                    if (options.keepComment) {\n                        table[Symbol('#')] = lineRest.slice(1);\n                    }\n                }\n                else {\n                    break;\n                }\n                lineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n            }\n            if (lineRest.startsWith(']')) {\n                return lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n        }\n        else {\n            if (lineRest.startsWith(']')) {\n                return lineRest.replace(RE.SYM_WHITESPACE, '');\n            }\n            iterator.throwSyntaxError(iterator.where());\n        }\n    }\n}\nfunction pushInline(array, lineRest) {\n    const custom = lineRest.startsWith('!!');\n    let type;\n    if (custom) {\n        //options.typify && iterator.throwSyntaxError('Only mixable arrays could contain custom type. Check '+iterator.where());\n        ({ 1: type, 2: lineRest } = RE._VALUE_PAIR.exec(lineRest) || iterator.throwSyntaxError(iterator.where()));\n        ensureConstructor(type);\n    }\n    const lastIndex = '' + array.length;\n    switch (lineRest[0]) {\n        case '\\'':\n            lineRest = assignLiteralString(options.asStrings(array), lastIndex, lineRest);\n            break;\n        case '\"':\n            lineRest = assignBasicString(options.asStrings(array), lastIndex, lineRest);\n            break;\n        case '{':\n            lineRest = assignInlineTable(options.asTables(array), lastIndex, lineRest);\n            break;\n        case '[':\n            lineRest = assignInlineArray(options.asArrays(array), lastIndex, lineRest);\n            break;\n        case '`':\n            lineRest = assignInterpolationString(options.asStrings(array), lastIndex, lineRest);\n            break;\n        default:\n            let literal;\n            ({ 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throwSyntaxError(iterator.where()));\n            if (literal === 'true') {\n                options.asBooleans(array).push(true);\n            }\n            else if (literal === 'false') {\n                options.asBooleans(array).push(false);\n            }\n            else if (literal === 'inf' || literal === '+inf') {\n                options.asFloats(array).push(Infinity);\n            }\n            else if (literal === '-inf') {\n                options.asFloats(array).push(-Infinity);\n            }\n            else if (literal === 'nan' || literal === '+nan' || literal === '-nan') {\n                options.asFloats(array).push(NaN);\n            }\n            else if (literal.includes(':') || literal.indexOf('-') !== literal.lastIndexOf('-') && !literal.startsWith('-')) {\n                options.asDatetimes(array).push(new Datetime(literal));\n            }\n            else if (literal.includes('.') || (literal.includes('e') || literal.includes('E')) && !literal.startsWith('0x')) {\n                options.asFloats(array).push(Float(literal));\n            }\n            else if (options.enableNull && literal === 'null' || options.enableNil && literal === 'nil') {\n                options.asNulls(array).push(null);\n            }\n            else {\n                options.asIntegers(array).push(options.IntegerDepends(literal));\n            }\n            break;\n    }\n    if (custom) {\n        array[lastIndex] = construct(type, array[lastIndex]);\n    }\n    if (options.keepComment && lineRest.startsWith('#')) {\n        array[Symbol_for(lastIndex)] = lineRest.slice(1);\n        return '';\n    }\n    return lineRest;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
			"import version from './version?text';\nimport parse from './parser';\nconst TOML = {\n    parse,\n    version,\n    get default() { return this; }\n};\nexport default TOML;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxLQUFLLE1BQU0sVUFBVSxDQUFDO0FBRTdCLE1BQU0sSUFBSSxHQUFHO0lBQ1osS0FBSztJQUNMLE9BQU87SUFDUCxJQUFJLE9BQU8sS0FBTSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDL0IsQ0FBQztBQUVGLGVBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZlcnNpb24gZnJvbSAnLi92ZXJzaW9uP3RleHQnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2VyJztcblxuY29uc3QgVE9NTCA9IHtcblx0cGFyc2UsXG5cdHZlcnNpb24sXG5cdGdldCBkZWZhdWx0ICgpIHsgcmV0dXJuIHRoaXM7IH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRPTUw7XG4iXX0="
		]
}