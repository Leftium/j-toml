{
	"version":
		3,
	"names":
		["rest"],
	"file":
		"index.js",
	"sources":
		["src/semver.js","src/global.js","src/iterator.js","src/types.js","src/parser.js","src/default.js"],
	"mappings":
		"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",
	"sourcesContent":
		[
			"export default [0, 5, 23];",
			"export const { WeakSet, WeakMap, SyntaxError, RangeError, TypeError, Error, BigInt, Date, parseInt, Infinity, NaN, String: { fromCodePoint }, Number: { isFinite, isSafeInteger }, Object: { create, getOwnPropertyNames, defineProperty }, Reflect: { getPrototypeOf }, Array, Symbol: { for: Symbol_for }, Map, RegExp, JSON: { stringify } } = global;\nexport const { isArray } = Array;\n",
			"import { SyntaxError, RangeError, TypeError, Error } from './global.js';\n\nconst NONE = [];\nlet sourceLines = NONE;\nlet lastLineIndex = -1;\nlet lineIndex = -1;\n\nconst none = () => sourceLines===NONE;\nconst done = () => { sourceLines = NONE; };\nconst next = () => sourceLines[++lineIndex];\nconst rest = () => lineIndex!==lastLineIndex;\nconst mark = () => lineIndex;\nconst must = (message, startIndex) => {\n\tif ( lineIndex===lastLineIndex ) {\n\t\tconst error = new SyntaxError(message+' is not close until the end of the file, which started from lines['+startIndex+']: '+sourceLines[startIndex]);\n\t\terror.lineIndex = lineIndex;\n\t\tdone();\n\t\tthrow error;\n\t}\n\treturn sourceLines[++lineIndex];\n};\nconst from = array => {\n\tsourceLines = array;\n\tlastLineIndex = sourceLines.length-1;\n\tlineIndex = -1;\n};\n\nexport { from, next, rest, mark, must, done, none };\nexport const throwSyntaxError = message => throws(new SyntaxError(message));\nexport const throwRangeError = message => throws(new RangeError(message));\nexport const throwTypeError = message => throws(new TypeError(message));\nexport const throwError = message => throws(new Error(message));\nexport const where = () => 'lines['+lineIndex+']: '+sourceLines[lineIndex];\n\nfunction throws (error) {\n\tif ( sourceLines===NONE ) { throw error; }\n\terror.lineIndex = lineIndex;\n\tdone();\n\tthrow error;\n}\n",
			"import { RangeError, TypeError, BigInt, Date, parseInt, Infinity, NaN, isFinite, isSafeInteger, fromCodePoint, create } from './global.js';\nimport { throwSyntaxError, throwRangeError, none, where } from './iterator.js';\n\nconst ESCAPE_ALIAS = { b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\nconst ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"])|([btnfr])|u(.{4})|U(.{4})(.{4}))/g;\nexport const unEscapeSingleLine = ($0, $1, $2, $3, $4, $5) => $1 ? $1 : $2 ? ESCAPE_ALIAS[$2] : fromCodePoint(parseInt($3 || $4+$5, 16));\nexport const String = literal => literal.replace(ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\nString.isString = value => typeof value==='string';\n\nconst UNDERSCORES = /_/g;\n\nconst XOB_INTEGER = /^0x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*$/;\nconst INTEGER = /^[-+]?[1-9]\\d*(?:_\\d+)*$/;\nconst MAX64 = BigInt(2**63-1);\nconst MIN64 = ~MAX64;\nconst ZERO = BigInt(0);\nexport const Integer = (literal, useBigInt = true) => {\n\tif ( useBigInt ) {\n\t\tif ( literal==='0' || literal==='+0' || literal==='-0' ) { return ZERO; }\n\t\t( literal.charAt(0)==='0' ? XOB_INTEGER : INTEGER ).test(literal) || throwSyntaxError('Invalid Integer '+literal+( none() ? '' : ' at '+where() ));\n\t\tconst bitInt = BigInt(literal.replace(UNDERSCORES, ''));\n\t\tbitInt<=MAX64 && bitInt>=MIN64 || throwRangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes '+literal+( none() ? '' : ' meet at '+where() ));\n\t\treturn bitInt;\n\t}\n\telse {\n\t\tif ( literal==='0' || literal==='+0' || literal==='-0' ) { return 0; }\n\t\t( literal.charAt(0)==='0' ? XOB_INTEGER : INTEGER ).test(literal) || throwSyntaxError('Invalid Integer '+literal+( none() ? '' : ' at '+where() ));\n\t\tconst number = +literal.replace(UNDERSCORES, '');\n\t\tisSafeInteger(number) || throwRangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes '+literal+( none() ? '' : ' meet at '+where() ));\n\t\treturn number;\n\t}\n};\nInteger.isInteger = value => typeof value==='bigint';\n\nconst FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nconst FLOAT_NOT_INTEGER = /[.eE]/;\nexport const Float = literal => {\n\tif ( FLOAT.test(literal) && FLOAT_NOT_INTEGER.test(literal) ) {\n\t\tconst number = +literal.replace(UNDERSCORES, '');\n\t\tisFinite(number) || throwRangeError('Float can not be as big as Infinity, like '+literal+( none() ? '' : ' at '+where() ));\n\t\treturn number;\n\t}\n\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n\tif ( literal==='-inf' ) { return -Infinity; }\n\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n\tthrowSyntaxError('Invalid Float '+literal+( none() ? '' : ' at '+where() ));\n};\nFloat.isFloat = value => typeof value==='number';\n\nexport const Boolean = {\n\tisBoolean: value => value===true || value===false,\n};\n\nconst OFFSET_DATE_TIME = /^(?:0[1-9]|[1-9]\\d)\\d\\d-(?:0[1-9]|1[012])-(?:0[1-9]|[12]\\d|3[01])([T ])(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(Z|[+-](?:[01]\\d|2[0-3]):[0-5]\\d)$/;\nconst LOCAL_DATE_TIME = /^(?:0[1-9]|[1-9]\\d)\\d\\d-(?:0[1-9]|1[012])-(?:0[1-9]|[12]\\d|3[01])([T ])(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?$/;\nconst LOCAL_DATE = /^(?:0[1-9]|[1-9]\\d)\\d\\d-(?:0[1-9]|1[012])-(?:0[1-9]|[12]\\d|3[01])$/;\nconst LOCAL_TIME = /^(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d+)?$/;\nconst TIMEZONE_OFFSET = /^([+-])([01]\\d|2[0-3]):([0-5]\\d)$/;\nconst DATE = new Date;\nconst year = (date, utc) => {\n\tconst year = utc ? date.getUTCFullYear() : date.getFullYear();\n\tif ( year>=1000 && year<=9999 ) { return ''+year; }\n\tif ( year>=100 && year<=999 ) { return '0'+year; }\n\tthrow new RangeError('Datetime which year was set out of range 100 to 9999 can not be serialized toTOML.');\n};\nconst month = (datetime, utc) => ( ( utc ? datetime.getUTCMonth() : datetime.getMonth() )+1+'' ).padStart(2, '0');\nconst date = (datetime, utc) => ( ( utc ? datetime.getUTCDate() : datetime.getDate() )+'' ).padStart(2, '0');\nconst hours = (datetime, utc) => ( ( utc ? datetime.getUTCHours() : datetime.getHours() )+'' ).padStart(2, '0');\nconst minutes = (datetime, utc) => ( ( utc ? datetime.getUTCMinutes() : datetime.getMinutes() )+'' ).padStart(2, '0');\nconst seconds = datetime => ( datetime.getSeconds()+'' ).padStart(2, '0');\nconst milliseconds = datetime => {\n\tconst milliseconds = datetime.getMilliseconds();\n\treturn milliseconds===0 ? '' : '.'+( milliseconds+'' ).padStart(3, '0');\n};\n\nexport class Datetime extends Date {\n\t\n\tconstructor (literal) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( literal.includes('T') || literal.includes(' ') ) {\n\t\t\t\tif ( literal.includes('Z') || literal.includes('+') || literal.split('-').length===4 ) {\n\t\t\t\t\tconst $ = OFFSET_DATE_TIME.exec(literal) || throwSyntaxError('Invalid Offset Date-Time '+literal+( none() ? '' : ' at '+where() ));\n\t\t\t\t\tsuper(literal);\n\t\t\t\t\tthis.type = 'Offset Date-Time';\n\t\t\t\t\tthis.T = $[1];\n\t\t\t\t\tthis.Z = $[2];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst $ = LOCAL_DATE_TIME.exec(literal) || throwSyntaxError('Invalid Local Date-Time '+literal+( none() ? '' : ' at '+where() ));\n\t\t\t\t\tsuper(literal);\n\t\t\t\t\tthis.type = 'Local Date-Time';\n\t\t\t\t\tthis.T = $[1];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLOCAL_DATE.test(literal) || throwSyntaxError('Invalid Local Date '+literal+( none() ? '' : ' at '+where() ));\n\t\t\t\tsuper(literal);\n\t\t\t\tthis.type = 'Local Date';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tLOCAL_TIME.test(literal) || throwSyntaxError('Invalid Local Time '+literal+( none() ? '' : ' at '+where() ));\n\t\t\tsuper('1970-01-01 '+literal);\n\t\t\tthis.type = 'Local Time';\n\t\t}\n\t}\n\t\n\tstatic isDatetime (value) { return value instanceof Datetime; }\n\t\n\ttoTOML () {\n\t\tif ( !isSafeInteger(this.getTime()) ) { throw new RangeError('Datetime which time was set unsafe integer can not be serialized toTOML.'); }\n\t\tswitch ( this.type ) {\n\t\t\tcase 'Offset Date-Time':\n\t\t\t\tlet datetime;\n\t\t\t\tconst { Z } = this;\n\t\t\t\tif ( Z==='Z' || Z==='+00:00' || Z==='-00:00' ) { datetime = this; }\n\t\t\t\telse {\n\t\t\t\t\tconst $ = TIMEZONE_OFFSET.exec(Z);\n\t\t\t\t\tdatetime = DATE;\n\t\t\t\t\tdatetime.setTime(this.getTime()+( $[1]+'60000' )*( +$[3]+60*$[2] ));\n\t\t\t\t}\n\t\t\t\treturn year(datetime, true)+'-'+month(datetime, true)+'-'+date(datetime, true)+this.T+hours(datetime, true)+':'+minutes(datetime, true)+':'+seconds(datetime)+milliseconds(this)+Z;\n\t\t\tcase 'Local Date-Time':\n\t\t\t\treturn year(this)+'-'+month(this)+'-'+date(this)+this.T+hours(this)+':'+minutes(this)+':'+seconds(this)+milliseconds(this);\n\t\t\tcase 'Local Date':\n\t\t\t\treturn year(this)+'-'+month(this)+'-'+date(this);\n\t\t\tcase 'Local Time':\n\t\t\t\treturn hours(this)+':'+minutes(this)+':'+seconds(this)+milliseconds(this);\n\t\t}\n\t\tthrow new TypeError('Unknown type Datetime.');\n\t}\n\t\n}\n\nconst Null = function () { };\nNull.prototype = create(null);\n\nexport class Table extends Null {\n\t\n\tstatic isTable (value) { return value instanceof Table; }\n\t\n}\n",
			"import { WeakSet, WeakMap, Error, TypeError, Infinity, NaN, isArray, Symbol_for, Map, RegExp, getOwnPropertyNames, create, defineProperty, getPrototypeOf, stringify } from './global.js';\nimport { from, next, rest, done, mark, must, throwSyntaxError, throwTypeError, throwError, where } from './iterator.js';\nimport { unEscapeSingleLine, String, Integer, Float, Datetime, Table } from './types.js';\n\nconst BOM = /^\\uFEFF/;\nconst EOL = /\\r?\\n/;\nconst PRE_WHITESPACE = /^[ \\t]*/;\nconst TABLE_DEFINITION = /^\\[(\\[?)[ \\t]*((?:[\\w-]+|\"(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*\"|'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*')(?:[ \\t]*\\.[ \\t]*(?:[\\w-]+|\"(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*\"|'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'))*)[ \\t]*](]?)[ \\t]*(?:#[^]*)?$/;\nconst KEY_VALUE_PAIR = /^((?:[\\w-]+|\"(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*\"|'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*')(?:[ \\t]*\\.[ \\t]*(?:[\\w-]+|\"(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*\"|'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'))*)[ \\t]*=[ \\t]*(!!([\\w-]*)[ \\t]+)?([^ \\t#][^]*)$/;\nconst KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\nconst VALUE_REST = /^((?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?[\\w\\-+.:]+)[ \\t]*([^]*)$/;\nconst LITERAL_STRING = /^'([^'\\x00-\\x08\\x0B-\\x1F\\x7F]*)'[ \\t]*([^]*)/;\nconst MULTI_LINE_LITERAL_STRING_LONE = /^'''([^]*?)'''[ \\t]*([^]*)/;\nconst MULTI_LINE_LITERAL_STRING_REST = /^([^]*?)'''[ \\t]*([^]*)/;\nconst CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nconst BASIC_STRING = /^\"((?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*)\"[ \\t]*([^]*)/;\nconst MULTI_LINE_BASIC_STRING_LONE = /^\"\"\"((?:[^\\\\]+|\\\\[^])*?)\"\"\"[ \\t]*([^]*)/;\nconst MULTI_LINE_BASIC_STRING_REST = /^((?:[^\\\\]+|\\\\[^])*?)\"\"\"[ \\t]*([^]*)/;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER = /^(?:[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\ \\n]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))*$/;\nconst ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?:([ \\n]+)|([\\\\\"])|([btnfr])|u(.{4})|U(.{4})(.{4}))/g;\nconst SYM_WHITESPACE = /^[^][ \\t]*/;\n\nconst _VALUE_PAIR = /^!!([\\w-]*)[ \\t]+([^ \\t#][^]*)$/;\nconst DELIMITER_CHECK = /[^`]/;\nconst INTERPOLATIONS = /^(?:\\([ \\t]*(?:\\/(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]|\\\\[^])*]|\\\\[^])+\\/[a-z]*[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])[ \\t]*|(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*)\\)[ \\t]*)*[ \\t]*([^]*)$/;\nconst INTERPOLATION = /\\([ \\t]*(?:\\/(?:[^\\\\[/]+|\\[(?:[^\\\\\\]]|\\\\[^])*]|\\\\[^])+\\/[a-z]*[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])[ \\t]*|(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*)\\)/g;\nconst INTERPOLATION_TOKEN = /'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"/g;\nconst REGEXP_MODE = /^\\([ \\t]*\\//;\nconst PATTERN_FLAGS_REPLACER = /\\/((?:[^\\\\[/]+|\\[(?:[^\\\\\\]]|\\\\[^])*]|\\\\[^])+)\\/([a-z]*)[ \\t]*=[ \\t]*('[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\"|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}|\\[[ \\t]+(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*})[ \\t]*)+])/;\nconst WHOLE_AND_SUBS = /('[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*([^]*)/;\nconst SUB = /{[ \\t]*}|{[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*(?:,[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*=[ \\t]*(?:'[^']*'|\"(?:[^\\\\\"]+|\\\\[^])*\")[ \\t]*)*}/g;\nconst DOLLAR = /\\$(?:[1-9]\\d?|\\$)/g;\n\nconst { isTable } = Table;\nconst StaticObjects = new WeakSet;\nconst TypedArrays = new WeakMap;\nconst ArrayOfNulls = -1;\nconst ArrayOfStrings = 1;\nconst ArrayOfInlineTables = 2;\nconst ArrayOfInlineArrays = 3;\nconst ArrayOfBooleans = 4;\nconst ArrayOfFloats = 5;\nconst ArrayOfDatetimes = 6;\nconst ArrayOfIntegers = 7;\nconst reallyTypify = (array, type) => {\n\tif ( TypedArrays.has(array) ) {\n\t\tif ( TypedArrays.get(array)===type ) { return array; }\n\t\tthrowTypeError('Types in array must be same. Check '+where());\n\t}\n\tTypedArrays.set(array, type);\n\treturn array;\n};\nconst unlimitedType = array => array;\n\nlet useWhatToJoinMultiLineString = '';\nlet useBigInt = true;\nlet keepComment = false;\nlet enableNull = false;\nlet enableNil = false;\nlet allowInlineTableMultiLineAndTrailingCommaEvenNoComma = false;\nlet typify = reallyTypify;\nlet enableInterpolationString = false;\nlet customConstructors = null;\n\nexport default function parse (toml_source, toml_version, useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines, useBigInt_forInteger = true, extensionOptions) {\n\tif ( typeof toml_source!=='string' ) { throw new TypeError('TOML.parse(source)'); }\n\tif ( toml_version!==0.5 ) { throw new Error('TOML.parse(,version)'); }\n\tif ( typeof useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines!=='string' ) { throw new TypeError('TOML.parse(,,multiLineJoiner)'); }\n\tif ( typeof useBigInt_forInteger!=='boolean' ) { throw new TypeError('TOML.parse(,,,useBigInt)'); }\n\tuseWhatToJoinMultiLineString = useWhatToJoinMultiLineString_notUsingForSplitTheSourceLines;\n\tuseBigInt = useBigInt_forInteger;\n\txOptions:{\n\t\tkeepComment = !!( extensionOptions && extensionOptions.hash );\n\t\tenableNull = !!( extensionOptions && extensionOptions.null );\n\t\tenableNil = !!( extensionOptions && extensionOptions.nil );\n\t\tallowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!( extensionOptions && extensionOptions.multi );\n\t\ttypify = extensionOptions && extensionOptions.mix ? unlimitedType : reallyTypify;\n\t\tenableInterpolationString = !!( extensionOptions && extensionOptions.ins );\n\t\tcustomConstructors = extensionOptions && extensionOptions.new || null;\n\t\tif ( customConstructors!==null && typeof customConstructors!=='function' ) {\n\t\t\tif ( typeof customConstructors!=='object' ) { throw new TypeError('TOML.parse(,,,xOptions.new)'); }\n\t\t\tif ( getPrototypeOf(customConstructors)===null ) {\n\t\t\t\tfor ( const name of getOwnPropertyNames(customConstructors) ) {\n\t\t\t\t\tif ( typeof customConstructors[name]!=='function' ) {\n\t\t\t\t\t\tcustomConstructors = null;\n\t\t\t\t\t\tthrow new TypeError('TOML.parse(,,,xOptions.new['+stringify(name)+'])');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst origin = customConstructors;\n\t\t\t\tcustomConstructors = create(null);\n\t\t\t\tfor ( const name of getOwnPropertyNames(origin) ) {\n\t\t\t\t\tconst customConstructor = origin[name];\n\t\t\t\t\tif ( typeof customConstructor!=='function' ) {\n\t\t\t\t\t\tcustomConstructors = null;\n\t\t\t\t\t\tthrow new TypeError('TOML.parse(,,,xOptions.new['+stringify(name)+'])');\n\t\t\t\t\t}\n\t\t\t\t\tcustomConstructors[name] = customConstructor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tconst rootTable = new Table;\n\ttry {\n\t\tfrom(toml_source.replace(BOM, '').split(EOL));\n\t\tlet lastSectionTable = rootTable;\n\t\twhile ( rest() ) {\n\t\t\tconst line = next().replace(PRE_WHITESPACE, '');\n\t\t\tif ( line==='' || line.startsWith('#') ) { }\n\t\t\telse if ( line.startsWith('[') ) {\n\t\t\t\tconst { 1: $_asArrayItem$$, 2: keys, 3: $$asArrayItem$_, 4: hash = '' } = TABLE_DEFINITION.exec(line) || throwSyntaxError(where());\n\t\t\t\t( $_asArrayItem$$==='[' )===( $$asArrayItem$_===']' ) || throwSyntaxError('Square brackets of table define statement not match at '+where());\n\t\t\t\tlastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$==='[', hash);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst rest = assignInline(lastSectionTable, line);\n\t\t\t\trest==='' || rest.startsWith('#') || throwSyntaxError(where());\n\t\t\t}\n\t\t}\n\t}\n\tfinally {\n\t\tcustomConstructors = null;\n\t\tdone();\n\t}\n\treturn rootTable;\n};\n\nfunction appendTable (table, key_key, asArrayItem, hash) {\n\tconst leadingKeys = parseKeys(key_key);\n\tconst finalKey = leadingKeys.pop();\n\ttable = prepareTable(table, leadingKeys);\n\tconst lastTable = new Table;\n\tif ( asArrayItem ) {\n\t\tlet arrayOfTables;\n\t\tif ( finalKey in table ) { StaticObjects.has(arrayOfTables = table[finalKey]) && throwError('Trying to push Table to non-ArrayOfTables value at '+where()); }\n\t\telse { arrayOfTables = table[finalKey] = []; }\n\t\tarrayOfTables.push(lastTable);\n\t}\n\telse {\n\t\tfinalKey in table && throwError('Duplicate Table definition at '+where());\n\t\ttable[finalKey] = lastTable;\n\t}\n\tif ( keepComment && hash ) {\n\t\tdefineProperty(table, Symbol_for(finalKey), {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: hash,\n\t\t});\n\t}\n\treturn lastTable;\n}\n\nfunction parseKeys (key_key) {\n\tconst keys = key_key.match(KEYS);\n\tfor ( let index = keys.length; index--; ) {\n\t\tconst key = keys[index];\n\t\tif ( key.startsWith(\"'\") ) { keys[index] = keys.slice(1, -1); }\n\t\telse if ( key.startsWith('\"') ) {\n\t\t\tkeys[index] = String(keys.slice(1, -1));\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction prepareTable (table, keys) {\n\tconst { length } = keys;\n\tlet index = 0;\n\twhile ( index<length ) {\n\t\tconst key = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tif ( isTable(table) ) {\n\t\t\t\tStaticObjects.has(table) && throwError('Trying to define table through static Inline Object at '+where());\n\t\t\t}\n\t\t\telse if ( isArray(table) ) {\n\t\t\t\tStaticObjects.has(table) && throwError('Trying to append value to static Inline Array at '+where());\n\t\t\t\ttable = table[table.length-1];\n\t\t\t}\n\t\t\telse { throwError('Trying to define table through non-Table value at '+where()); }\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new Table;\n\t\t\twhile ( index<length ) { table = table[keys[index++]] = new Table; }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nfunction prepareInlineTable (table, keys) {\n\tconst { length } = keys;\n\tlet index = 0;\n\twhile ( index<length ) {\n\t\tconst key = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tisTable(table) || throwError('Trying to assign property through non-Table value at '+where());\n\t\t\tStaticObjects.has(table) && throwError('Trying to assign property through static Inline Object at '+where());\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new Table;\n\t\t\twhile ( index<length ) { table = table[keys[index++]] = new Table; }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nfunction assignInline (lastInlineTable, lineRest) {\n\tconst { 1: left, 2: custom, 3: name, 4: right } = KEY_VALUE_PAIR.exec(lineRest) || throwSyntaxError(where());\n\tcustom && ensureConstructor(name);\n\tconst leadingKeys = parseKeys(left);\n\tconst finalKey = leadingKeys.pop();\n\tconst table = prepareInlineTable(lastInlineTable, leadingKeys);\n\tfinalKey in table && throwError('Duplicate property definition at '+where());\n\tswitch ( right[0] ) {\n\t\tcase \"'\":\n\t\t\tlineRest = assignLiteralString(table, finalKey, right);\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(table, finalKey, right);\n\t\t\tbreak;\n\t\tcase '{':\n\t\t\tlineRest = assignInlineTable(table, finalKey, right);\n\t\t\tbreak;\n\t\tcase '[':\n\t\t\tlineRest = assignInlineArray(table, finalKey, right);\n\t\t\tbreak;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(table, finalKey, right);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tlet literal;\n\t\t\t( { 1: literal, 2: lineRest } = VALUE_REST.exec(right) || throwSyntaxError(where()) );\n\t\t\ttable[finalKey] =\n\t\t\t\tliteral==='true' ? true : literal==='false' ? false :\n\t\t\t\t\tliteral==='inf' || literal==='+inf' ? Infinity : literal==='-inf' ? -Infinity :\n\t\t\t\t\t\tliteral==='nan' || literal==='+nan' || literal==='-nan' ? NaN :\n\t\t\t\t\t\t\tliteral.includes(':') || literal.indexOf('-')!==literal.lastIndexOf('-') ? new Datetime(literal) :\n\t\t\t\t\t\t\t\tliteral.includes('.') || literal.includes('e') || literal.includes('E') ? Float(literal) :\n\t\t\t\t\t\t\t\t\tenableNull && literal==='null' || enableNil && literal==='nil' ? null :\n\t\t\t\t\t\t\t\t\t\tInteger(literal, useBigInt);\n\t\t\tbreak;\n\t}\n\tif ( custom ) { table[finalKey] = construct(name, table[finalKey]); }\n\tif ( keepComment && lineRest.startsWith('#') ) {\n\t\tdefineProperty(table, Symbol_for(finalKey), {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: lineRest,\n\t\t});\n\t\treturn '';\n\t}\n\treturn lineRest;\n}\n\nfunction assignLiteralString (table, finalKey, literal) {\n\tlet $;\n\tif ( literal.charAt(1)!==\"'\" || literal.charAt(2)!==\"'\" ) {\n\t\t$ = LITERAL_STRING.exec(literal) || throwSyntaxError(where());\n\t\ttable[finalKey] = $[1];\n\t\treturn $[2];\n\t}\n\t$ = MULTI_LINE_LITERAL_STRING_LONE.exec(literal);\n\tif ( $ ) {\n\t\tCONTROL_CHARACTER_EXCLUDE_TAB.test($[1]) && throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+where());\n\t\ttable[finalKey] = $[1];\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\tif ( literal ) {\n\t\tCONTROL_CHARACTER_EXCLUDE_TAB.test(literal) && throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+where());\n\t\tliteral += useWhatToJoinMultiLineString;\n\t}\n\tconst start = mark();\n\tfor ( ; ; ) {\n\t\tconst line = must('Literal String', start);\n\t\t$ = MULTI_LINE_LITERAL_STRING_REST.exec(line);\n\t\tif ( $ ) {\n\t\t\tCONTROL_CHARACTER_EXCLUDE_TAB.test($[1]) && throwSyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+where());\n\t\t\ttable[finalKey] = literal+$[1];\n\t\t\treturn $[2];\n\t\t}\n\t\tliteral += line+useWhatToJoinMultiLineString;\n\t}\n}\n\nfunction assignBasicString (table, finalKey, literal) {\n\tlet $;\n\tif ( literal.charAt(1)!=='\"' || literal.charAt(2)!=='\"' ) {\n\t\t$ = BASIC_STRING.exec(literal) || throwSyntaxError(where());\n\t\ttable[finalKey] = String($[1]);\n\t\treturn $[2];\n\t}\n\t$ = MULTI_LINE_BASIC_STRING_LONE.exec(literal);\n\tif ( $ ) {\n\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER.test($[1]) || throwSyntaxError(where());\n\t\ttable[finalKey] = String($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\tif ( literal ) {\n\t\tliteral += '\\n';\n\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER.test(literal) || throwSyntaxError(where());\n\t}\n\tconst start = mark();\n\tfor ( ; ; ) {\n\t\tlet line = must('Basic String', start);\n\t\t$ = MULTI_LINE_BASIC_STRING_REST.exec(line);\n\t\tif ( $ ) {\n\t\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER.test($[1]) || throwSyntaxError(where());\n\t\t\ttable[finalKey] = ( literal+$[1] ).replace(ESCAPED_IN_MULTI_LINE, ($0, $1, $2, $3, $4, $5, $6) => {\n\t\t\t\tif ( $0==='\\n' ) { return useWhatToJoinMultiLineString; }\n\t\t\t\tif ( $1 ) {\n\t\t\t\t\t$1.includes('\\n') || throwSyntaxError('Back slash leading whitespaces can only appear at the end of a line, but see '+where());\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\treturn unEscapeSingleLine('', $2, $3, $4, $5, $6);\n\t\t\t});\n\t\t\treturn $[2];\n\t\t}\n\t\tline += '\\n';\n\t\tESCAPED_EXCLUDE_CONTROL_CHARACTER.test(line) || throwSyntaxError(where());\n\t\tliteral += line;\n\t}\n}\n\nfunction assignInlineTable (table, finalKey, lineRest) {\n\tconst inlineTable = table[finalKey] = new Table;\n\tStaticObjects.add(inlineTable);\n\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\tif ( allowInlineTableMultiLineAndTrailingCommaEvenNoComma ) {\n\t\tconst start = mark();\n\t\tfor ( ; ; ) {\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = must('Inline Table', start).replace(PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t\tlineRest = assignInline(inlineTable, lineRest);\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = must('Inline Table', start).replace(PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t}\n\t}\n\telse {\n\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t( lineRest==='' || lineRest.startsWith('#') ) && throwSyntaxError('Inline Table is intended to appear on a single line, which broken at '+where());\n\t\tfor ( ; ; ) {\n\t\t\tlineRest = assignInline(inlineTable, lineRest);\n\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\t\t\t\tlineRest.startsWith('}') && throwSyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+where());\n\t\t\t}\n\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && throwSyntaxError('Inline Table is intended to appear on a single line, which broken at '+where());\n\t\t}\n\t}\n}\n\nfunction assignInlineArray (table, finalKey, lineRest) {\n\tconst inlineArray = table[finalKey] = [];\n\tStaticObjects.add(inlineArray);\n\tconst start = mark();\n\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\tlineRest = must('Inline Array', start).replace(PRE_WHITESPACE, '');\n\t}\n\tif ( lineRest.startsWith(']') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\tfor ( ; ; ) {\n\t\tlineRest = pushInline(inlineArray, lineRest);\n\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\tlineRest = must('Inline Array', start).replace(PRE_WHITESPACE, '');\n\t\t}\n\t\tif ( lineRest.startsWith(',') ) {\n\t\t\tlineRest = lineRest.replace(SYM_WHITESPACE, '');\n\t\t\tif ( keepComment && lineRest.startsWith('#') ) {\n\t\t\t\tdefineProperty(inlineArray, Symbol_for(inlineArray.length-1+''), {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: lineRest,\n\t\t\t\t});\n\t\t\t\tlineRest = '';\n\t\t\t}\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = must('Inline Array', start).replace(PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t}\n\t\telse {\n\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(SYM_WHITESPACE, ''); }\n\t\t\tthrowSyntaxError(where());\n\t\t}\n\t}\n}\n\nfunction pushInline (array, lineRest) {\n\tconst custom = lineRest.startsWith('!!');\n\tlet name;\n\tif ( custom ) {\n\t\ttypify===unlimitedType || throwSyntaxError('Only mixable arrays could contain custom type. Check '+where());\n\t\t( { 1: name, 2: lineRest } = _VALUE_PAIR.exec(lineRest) || throwSyntaxError(where()) );\n\t\tensureConstructor(name);\n\t}\n\tconst lastIndex = ''+array.length;\n\tswitch ( lineRest[0] ) {\n\t\tcase \"'\":\n\t\t\tlineRest = assignLiteralString(typify(array, ArrayOfStrings), lastIndex, lineRest);\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(typify(array, ArrayOfStrings), lastIndex, lineRest);\n\t\t\tbreak;\n\t\tcase '{':\n\t\t\tlineRest = assignInlineTable(typify(array, ArrayOfInlineTables), lastIndex, lineRest);\n\t\t\tbreak;\n\t\tcase '[':\n\t\t\tlineRest = assignInlineArray(typify(array, ArrayOfInlineArrays), lastIndex, lineRest);\n\t\t\tbreak;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(typify(array, ArrayOfStrings), lastIndex, lineRest);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tlet literal;\n\t\t\t( { 1: literal, 2: lineRest } = VALUE_REST.exec(lineRest) || throwSyntaxError(where()) );\n\t\t\tif ( literal==='true' ) { typify(array, ArrayOfBooleans).push(true); }\n\t\t\telse if ( literal==='false' ) { typify(array, ArrayOfBooleans).push(false); }\n\t\t\telse if ( literal==='inf' || literal==='+inf' ) { typify(array, ArrayOfFloats).push(Infinity); }\n\t\t\telse if ( literal==='-inf' ) { typify(array, ArrayOfFloats).push(-Infinity); }\n\t\t\telse if ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\t\ttypify(array, ArrayOfFloats).push(NaN);\n\t\t\t}\n\t\t\telse if ( literal.includes(':') || literal.indexOf('-')!==literal.lastIndexOf('-') ) {\n\t\t\t\ttypify(array, ArrayOfDatetimes).push(new Datetime(literal));\n\t\t\t}\n\t\t\telse if ( literal.includes('.') || literal.includes('e') || literal.includes('E') ) {\n\t\t\t\ttypify(array, ArrayOfFloats).push(Float(literal));\n\t\t\t}\n\t\t\telse if ( enableNull && literal==='null' || enableNil && literal==='nil' ) {\n\t\t\t\ttypify(array, ArrayOfNulls).push(null);\n\t\t\t}\n\t\t\telse { typify(array, ArrayOfIntegers).push(Integer(literal, useBigInt)); }\n\t\t\tbreak;\n\t}\n\tif ( custom ) { array[lastIndex] = construct(name, array[lastIndex]); }\n\tif ( keepComment && lineRest.startsWith('#') ) {\n\t\tdefineProperty(array, Symbol_for(lastIndex), {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: lineRest,\n\t\t});\n\t\treturn '';\n\t}\n\treturn lineRest;\n}\n\nfunction ensureConstructor (name) {\n\tcustomConstructors || throwSyntaxError(where());\n\ttypeof customConstructors==='function' || name in customConstructors || throwError(where());\n}\n\nfunction construct (name, value) {\n\treturn typeof customConstructors==='function' ? customConstructors(name, value) : customConstructors[name](value);\n}\n\nfunction assignInterpolationString (table, finalKey, lineRest) {\n\tenableInterpolationString || throwSyntaxError(where());\n\tDELIMITER_CHECK.test(lineRest) && throwSyntaxError('Interpolation String opening tag incorrect at '+where());\n\tconst literals = [];\n\tfor ( const start = mark(); ; ) {\n\t\tconst literal = must('Interpolation String', start);\n\t\tif ( literal.startsWith(lineRest) ) {\n\t\t\tlineRest = lineRest.slice(lineRest.length).replace(PRE_WHITESPACE, '');\n\t\t\tbreak;\n\t\t}\n\t\tliterals.push(literal);\n\t}\n\tlet string = literals.join('\\n');\n\tif ( lineRest.startsWith('(') ) {\n\t\tconst interpolations_rest = INTERPOLATIONS.exec(lineRest) || throwSyntaxError(where());\n\t\tlineRest = interpolations_rest[2];\n\t\tfor ( const interpolation of interpolations_rest[1].match(INTERPOLATION) ) {\n\t\t\tif ( REGEXP_MODE.test(interpolation) ) {\n\t\t\t\tconst { 1: pattern, 2: flags, 3: Replacer } = PATTERN_FLAGS_REPLACER.exec(interpolation);\n\t\t\t\tconst search = newRegExp(pattern, flags) || throwSyntaxError('Invalid regExp at '+where());\n\t\t\t\tlet replacer;\n\t\t\t\tswitch ( Replacer[0] ) {\n\t\t\t\t\tcase \"'\":\n\t\t\t\t\t\treplacer = Replacer.slice(1, -1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '\"':\n\t\t\t\t\t\treplacer = String(Replacer.slice(1, -1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '{':\n\t\t\t\t\t\tconst map = newMap(Replacer, true);\n\t\t\t\t\t\treplacer = $0 => map.has($0) ? map.get($0) : $0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '[':\n\t\t\t\t\t\tconst { 1: whole, 2: subs } = WHOLE_AND_SUBS.exec(Replacer);\n\t\t\t\t\t\tconst maps = [null];\n\t\t\t\t\t\tfor ( const sub of subs.match(SUB) ) { maps.push(newMap(sub, true)); }\n\t\t\t\t\t\treplacer = (...args) => whole.replace(DOLLAR, $n => {\n\t\t\t\t\t\t\tif ( $n==='$$' ) { return '$'; }\n\t\t\t\t\t\t\tconst n = $n.slice(1);\n\t\t\t\t\t\t\tconst map = maps[n];\n\t\t\t\t\t\t\tconst arg = args[n];\n\t\t\t\t\t\t\treturn map && map.has(arg) ? map.get(arg) : arg;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tstring = string.replace(search, replacer);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst map = newMap(interpolation, false);\n\t\t\t\tlet round = '';\n\t\t\t\touter: for ( let length = string.length, index = 0; index<length; ) {\n\t\t\t\t\tfor ( const { 0: search, 1: replacer } of map ) {\n\t\t\t\t\t\tif ( string.startsWith(search, index) ) {\n\t\t\t\t\t\t\tround += replacer;\n\t\t\t\t\t\t\tindex += search.length;\n\t\t\t\t\t\t\tcontinue outer;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tround += string[index];\n\t\t\t\t\t++index;\n\t\t\t\t}\n\t\t\t\tstring = round;\n\t\t\t}\n\t\t}\n\t}\n\ttable[finalKey] = string;\n\treturn lineRest;\n}\n\nfunction newMap (interpolation, usedForRegExp) {\n\tconst map = new Map;\n\tconst tokens = interpolation.match(INTERPOLATION_TOKEN);\n\tfor ( let length = tokens.length, index = 0; index<length; ) {\n\t\tlet search = tokens[index++];\n\t\tsearch = search[0]===\"'\" ? search.slice(1, -1) : String(search.slice(1, -1));\n\t\tusedForRegExp || search || throwSyntaxError('Characters to replace can not be empty, which was found at '+where());\n\t\tmap.has(search) && throwSyntaxError('Duplicate '+( usedForRegExp ? 'replacer' : 'characters to replace' )+' at '+where());\n\t\tlet replacer = tokens[index++];\n\t\treplacer = replacer[0]===\"'\" ? replacer.slice(1, -1) : String(replacer.slice(1, -1));\n\t\tmap.set(search, replacer);\n\t}\n\treturn map;\n}\n\nfunction newRegExp (pattern, flags) {\n\ttry { return new RegExp(pattern, flags); }\n\tcatch (error) { return null; }\n}\n",
			"import semver from './semver.js';\nimport { Array } from './global.js';\nimport { String, Integer, Float, Boolean, Datetime, Table } from './types.js';\nimport parse from './parser.js';\n\nconst TOML = {\n\tsemver,\n\tparse,\n\tString,\n\tInteger,\n\tFloat,\n\tBoolean,\n\tDatetime,\n\tArray,\n\tTable,\n};\n\nexport default TOML;\n"
		]
}