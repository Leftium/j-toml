{
	"version":
		3,
	"file":
		"index.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","share/iterator.ts","../../j-orderify/dist/ESM/j-orderify!meta.js","../../j-orderify/src/export.ts","../../j-orderify/dist/ESM/j-orderify!.js","types/Table.ts","types/Integer.ts","share/options.ts","../../j-regexp/dist/ESM/j-regexp!meta.js","../../j-regexp/src/export.ts","../../j-regexp/dist/ESM/j-regexp!.js","share/RE/nested -- readable.ts","share/RE/optimized -- avoid overflow or lost.ts","types/Datetime.ts","types/Float.ts","types/String.ts","parse/on-the-spot.ts","parse/x-feature.ts","parse/level-loop.ts","parse.ts","install.ts","default.ts"],
	"names":
		["options.xob","iterator.throws","iterator.where","options.allowLonger","options.IntegerMin","options.IntegerMax","iterator.done","options.ctrl7F","RE.SYM_WHITESPACE","RE.PRE_WHITESPACE","RE.TAG_REST","RE.KEY_VALUE_PAIR","RE.OFFSET_DATETIME","RE.OFFSET","RE.LOCAL_DATETIME","RE.LOCAL_DATE","RE.LOCAL_TIME","options.sFloat","options.useWhatToJoinMultiLineString","options.collect","options.TableDepends","options.openable","RE.KEYS","options.nonEmptyKey","RE.LITERAL_STRING","RE.MULTI_LINE_LITERAL_STRING","iterator.mark","iterator.must","RE.BASIC_STRING_exec","RE.MULTI_LINE_BASIC_STRING_exec_0","RE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test","options.enableInterpolationString","iterator.rest","iterator.next","RE.TABLE_DEFINITION_exec_groups","iterator.stacks_length","iterator.stacks_pop","RE.KEY_VALUE_PAIR_exec_groups","iterator.stacks_push","RE.VALUE_REST","options.moreDatetime","options.enableNull","options.IntegerDepends","RE._VALUE_PAIR","options.asStrings","options.asTables","options.asArrays","options.asFloats","options.asOffsetDateTimes","options.asLocalDateTimes","options.asLocalTimes","options.asLocalDates","options.asBooleans","options.asNulls","options.asIntegers","options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma","iterator.stacks_insertBeforeLast","iterator.could","options.use","iterator.todo","options.process","options.clear"],
	"mappings":
		"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",
	"sourcesContent":
		[
			"export default '0.5.78';",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\n//import * as options from './options';\n\n\nconst NONE           = [];\nlet sourceLines           = NONE;\nlet lastLineIndex         = -1;\nlet lineIndex         = -1;\n\nfunction noop (lineRest        )         { return ''; }\nnoop.previous = noop;\n\nexport let stacks_length = 0;\nlet last              = noop;\n\n\nexport function could ()       {\n\tif ( sourceLines!==NONE ) { throw Error('Inner error: parsing in parsing.'); }\n}\n\nconst EOL = /\\r?\\n/;\nexport function todo (source        )       {\n\tsourceLines = source.split(EOL);\n\tlastLineIndex = sourceLines.length-1;\n\tlineIndex = -1;\n\tstacks_length = 0;\n\tlast = noop;\n}\n\nexport const next = ()         => sourceLines[++lineIndex];\n\nexport const rest = ()          => lineIndex!==lastLineIndex;\n\nexport const mark = ()         => lineIndex;\n\nexport function must (message        , startIndex        )         {\n\tlineIndex===lastLineIndex\n\t&& throws(SyntaxError(message+' is not close until the end of the file, which started from line '+( startIndex+1 )+': '+sourceLines[startIndex]));\n\treturn sourceLines[++lineIndex];\n}\n\nexport const where = ()         => 'line '+( lineIndex+1 )+': '+sourceLines[lineIndex];\n\nexport function done ()       {\n\tsourceLines = NONE;\n\tlast = noop;\n}\n\n\nexport function stacks_pop ()              {\n\tconst item              = last;\n\tlast = last.previous;\n\t--stacks_length;\n\treturn item;\n}\n\nexport function stacks_push (item             )       {\n\titem.previous = last;\n\tlast = item;\n\t++stacks_length;\n}\n\nexport function stacks_insertBeforeLast (item             ) {\n\titem.previous = last.previous;\n\tlast.previous = item;\n\t++stacks_length;\n}\n\n\nexport function throws (error               )        {\n\tif ( sourceLines!==NONE ) {\n\t\terror.lineIndex = lineIndex;\n\t\terror.lineNumber = lineIndex+1;\n\t\t//done();\n\t\t//options.clear();\n\t}\n\tthrow error;\n}",
			"/*!\n * 模块名称：@ltd/j-orderify\n * 模块功能：返回一个能保证给定对象的属性按此后添加顺序排列的 proxy，即使键名是 symbol，或整数 string。\n   　　　　　Return a proxy for given object, which can guarantee own keys are in setting order, even if the key name is symbol or int string.\n * 模块版本：2.5.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-orderify/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-orderify/\n */",
			"import version from './version?text';\nexport { version };\n\nimport WeakMap from '.WeakMap';\nimport Object from '.Object';\nimport create from '.Object.create';\nimport Set from '.Set';\nimport Proxy from '.Proxy';\nimport defineProperty from '.Reflect.defineProperty';\nimport deleteProperty from '.Reflect.deleteProperty';\nimport ownKeys from '.Reflect.ownKeys';\n\nconst ownKeysKeepers = new WeakMap;\n\nconst handlers         = create(null, {\n\tdefineProperty: {\n\t\tvalue (target        , key                 , descriptor                    ) {\n\t\t\tif ( defineProperty(target, key, descriptor) ) {\n\t\t\t\townKeysKeepers.get(target).add(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\tdeleteProperty: {\n\t\tvalue (target        , key                 ) {\n\t\t\tif ( deleteProperty(target, key) ) {\n\t\t\t\townKeysKeepers.get(target).delete(key);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t},\n\townKeys: {\n\t\tvalue (target        )                        {\n\t\t\treturn [...ownKeysKeepers.get(target)];\n\t\t}\n\t},\n});\n\nexport const orderify = (object        )         => {\n\townKeysKeepers.set(object, new Set(ownKeys(object)));\n\treturn new Proxy(object, handlers);\n};\n\nexport class Orderified extends null {\n\tconstructor () {\n\t\tconst object             = create(prototype);\n\t\townKeysKeepers.set(object, new Set);\n\t\treturn new Proxy(object, handlers);\n\t}\n}\n\nconst prototype = /*#__PURE__*/ function () {\n\tdelete Orderified.prototype.constructor;\n\tObject.freeze(Orderified.prototype);\n\treturn Orderified.prototype;\n}();\n\nexport default {\n\tversion,\n\torderify,\n\tOrderified,\n\tget default () { return this; },\n};",
			"import './j-orderify!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-orderify */",
			"import { orderify } from '@ltd/j-orderify';\nimport create from '.Object.create';\n\nexport function Table ()       { }\nexport const OrderedTable = function Table (            )         { return orderify(this); };\n                                          OrderedTable \n\n            .prototype = Table.prototype = create(null);\n\nexport const isTable = (value     )          => value instanceof Table;",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport BigInt from '.BigInt';\n\nconst INTEGER = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)$/;\nconst XOB_INTEGER = /^\\+?0(?:x[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*|o[0-7]+(?:_[0-7]+)*|b[01]+(?:_[01]+)*)$/;\nconst UNDERSCORES_SIGN = /_|^[-+]/g;\n\nexport const NumberInteger = (literal        )         => {\n\tINTEGER.test(literal)\n\t|| options.xob && XOB_INTEGER.test(literal)\n\t|| iterator.throws(SyntaxError('Invalid Integer '+literal+' at '+iterator.where()));\n\tconst number = literal.startsWith('-')\n\t\t? -literal.replace(UNDERSCORES_SIGN, '')\n\t\t: +literal.replace(UNDERSCORES_SIGN, '');\n\toptions.allowLonger\n\t|| isSafeInteger(number)\n\t|| iterator.throws(RangeError('Integer did not use BitInt must be Number.isSafeInteger, not includes '+literal+' meet at '+iterator.where()));\n\treturn number;\n};\n\nexport const BigIntInteger = (literal        )         => {\n\tINTEGER.test(literal)\n\t|| options.xob && XOB_INTEGER.test(literal)\n\t|| iterator.throws(SyntaxError('Invalid Integer '+literal+' at '+iterator.where()));\n\tlet bigInt         = BigInt(literal.replace(UNDERSCORES_SIGN, ''));\n\tif ( literal.startsWith('-') ) { bigInt = -bigInt; }\n\toptions.allowLonger\n\t|| -9223372036854775808n<=bigInt && bigInt<=9223372036854775807n// ( min = -(2n**(64n-1n)) || ~max ) <= long <= ( max = 2n**(64n-1n)-1n || ~min )\n\t|| iterator.throws(RangeError('Integer expect 64 bit range (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), not includes '+literal+' meet at '+iterator.where()));\n\treturn bigInt;\n};\n\nexport const DependInteger = (literal        ) => {\n\tconst bigInt         = BigIntInteger(literal);\n\treturn options.IntegerMin<=bigInt && bigInt<=options.IntegerMax ? +( bigInt+'' ) : bigInt;\n};",
			"import SyntaxError from '.SyntaxError';\nimport RangeError from '.RangeError';\nimport TypeError from '.TypeError';\nimport Error from '.Error';\nimport isSafeInteger from '.Number.isSafeInteger';\nimport Proxy from '.Proxy';\nimport WeakMap from '.WeakMap';\nimport { Table, OrderedTable } from '../types/Table';\nimport { BigIntInteger, NumberInteger, DependInteger } from '../types/Integer';\nimport * as iterator from './iterator';\n\n/* options */\n\nexport let useWhatToJoinMultiLineString        ;\nexport let IntegerDepends          , IntegerMin        , IntegerMax        ;\n\n              \n\n                                  \n\nexport let moreDatetime         ;\nexport let ctrl7F         ;\nexport let nonEmptyKey         ;\nexport let xob         ;\nexport let sFloat         ;\nexport let TableDepends       ;\nexport let openable         ;\nexport let allowLonger         ;\nexport let enableNull         ;\nexport let allowInlineTableMultiLineAndTrailingCommaEvenNoComma         ;\nexport let enableInterpolationString         ;\nexport let asNulls    , asStrings    , asTables    , asArrays    , asBooleans    , asFloats    , asIntegers    ;\nexport let asOffsetDateTimes    , asLocalDateTimes    , asLocalDates    , asLocalTimes    ;\nlet processor                 ;\n\n/* xOptions.mix */\n\nexport const unType = (array       )        => array;\nexport const {\n\tasInlineArrayOfNulls,\n\tasInlineArrayOfStrings,\n\tasInlineArrayOfTables,\n\tasInlineArrayOfArrays,\n\tasInlineArrayOfBooleans,\n\tasInlineArrayOfFloats,\n\tasInlineArrayOfIntegers,\n\tasInlineArrayOfOffsetDateTimes,\n\tasInlineArrayOfLocalDateTimes,\n\tasInlineArrayOfLocalDates,\n\tasInlineArrayOfLocalTimes,\n} =                                 new Proxy(new WeakMap, {\n\tget: (arrayTypes) => function typify (array       )        {\n\t\tif ( arrayTypes.has(array) ) {\n\t\t\tarrayTypes.get(array)===typify\n\t\t\t|| iterator.throws(TypeError('Types in array must be same. Check '+iterator.where()));\n\t\t}\n\t\telse { arrayTypes.set(array, typify); }\n\t\treturn array;\n\t}\n});\n\n                  \n\n                                                                                                                                                                                     \nlet collection         = [];\nfunction collect_on (each      )       { collection.push(each); }\nfunction collect_off (each      )        { throw iterator.throws(SyntaxError(iterator.where())); }\nexport let collect                                         = collect_off;\nexport function process () {\n\tlet index = collection.length;\n\tif ( index ) {\n\t\titerator.done();\n\t\tconst process =           processor;\n\t\tconst queue = collection;\n\t\tprocessor = null;\n\t\tcollection = [];\n\t\twhile ( index-- ) { process(      queue.pop()); }\n\t}\n}\n\n/* use & clear */\n\nexport function clear ()       {\n\tprocessor = null;\n\tcollection.length = 0;\n}\n\nexport function use (specificationVersion, multiLineJoiner        , useBigInt                  , xOptions)       {\n\tif ( specificationVersion!==0.5 && specificationVersion!==0.4 ) { throw Error('TOML.parse(,specificationVersion)'); }\n\tif ( typeof          multiLineJoiner!=='string' ) { throw TypeError('TOML.parse(,,multiLineJoiner)'); }\n\tif ( useBigInt===true ) { IntegerDepends = BigIntInteger; }\n\telse if ( useBigInt===false ) { IntegerDepends = NumberInteger; }\n\telse {\n\t\tif ( typeof useBigInt!=='number' ) { throw TypeError('TOML.parse(,,,useBigInt)'); }\n\t\tif ( !isSafeInteger(useBigInt) ) { throw RangeError('TOML.parse(...useBigInt)'); }\n\t\tIntegerDepends = DependInteger;\n\t\tif ( useBigInt>=0 ) {\n\t\t\tIntegerMax = useBigInt;\n\t\t\tIntegerMin = -useBigInt;\n\t\t}\n\t\telse {\n\t\t\tIntegerMin = useBigInt;\n\t\t\tIntegerMax = -useBigInt-1;\n\t\t}\n\t}\n\tuseWhatToJoinMultiLineString = multiLineJoiner;\n\tmoreDatetime = ctrl7F = xob = sFloat = specificationVersion===0.5;\n\tnonEmptyKey = openable = specificationVersion===0.4;\n\tlet typify         ;\n\tif ( xOptions===null ) {\n\t\tTableDepends = Table;\n\t\tallowLonger = enableNull = allowInlineTableMultiLineAndTrailingCommaEvenNoComma = enableInterpolationString = false;\n\t\tprocessor = null;\n\t\ttypify = true;\n\t}\n\telse {\n\t\tTableDepends = xOptions.order ? OrderedTable : Table;\n\t\tallowLonger = !!xOptions.longer;\n\t\tenableNull = !!xOptions.null;\n\t\tallowInlineTableMultiLineAndTrailingCommaEvenNoComma = !!xOptions.multi;\n\t\tenableInterpolationString = !!xOptions.ins;\n\t\ttypify = !xOptions.mix;\n\t\tprocessor = xOptions.new || null;\n\t\tif ( processor ) {\n\t\t\tif ( typeof processor!=='function' ) { throw TypeError('TOML.parse(,,,,xOptions.tag)'); }\n\t\t\tif ( typify ) { throw Error('TOML.parse(,,,,xOptions) xOptions.tag needs xOptions.mix to be true'); }\n\t\t\tcollect = collect_on;\n\t\t}\n\t\telse { collect = collect_off; }\n\t}\n\tif ( typify ) {\n\t\tasNulls = asInlineArrayOfNulls;\n\t\tasStrings = asInlineArrayOfStrings;\n\t\tasTables = asInlineArrayOfTables;\n\t\tasArrays = asInlineArrayOfArrays;\n\t\tasBooleans = asInlineArrayOfBooleans;\n\t\tasFloats = asInlineArrayOfFloats;\n\t\tasIntegers = asInlineArrayOfIntegers;\n\t\tasOffsetDateTimes = asInlineArrayOfOffsetDateTimes;\n\t\tasLocalDateTimes = asInlineArrayOfLocalDateTimes;\n\t\tasLocalDates = asInlineArrayOfLocalDates;\n\t\tasLocalTimes = asInlineArrayOfLocalTimes;\n\t}\n\telse {\n\t\tasNulls = asStrings = asTables = asArrays = asBooleans = asFloats = asIntegers = asOffsetDateTimes = asLocalDateTimes = asLocalDates = asLocalTimes = unType;\n\t}\n}",
			"/*!\n * 模块名称：@ltd/j-regexp\n * 模块功能：可读性更好的正则表达式创建方式。\n   　　　　　More readable way for creating RegExp.\n * 模块版本：1.0.0\n * 许可条款：LGPL-3.0\n * 所属作者：龙腾道 <LongTengDao@LongTengDao.com> (www.LongTengDao.com)\n * 问题反馈：https://GitHub.com/LongTengDao/j-regexp/issues\n * 项目主页：https://GitHub.com/LongTengDao/j-regexp/\n */",
			"import version from './version?text';\nexport { version };\n\nimport RegExp from '.RegExp';\nimport slice from '.Array.prototype.slice';\n\nvar NT = /[\\n\\t]/g;\n\nfunction Source (raw, substitutions)         {\n\tvar source         = raw[0];\n\tfor ( var length         = substitutions.length, index         = 0; index<length; ) {\n\t\tvar substitution                  = substitutions[index];\n\t\tsource += ( typeof substitution==='string' ? substitution : substitution.source )+raw[++index];\n\t}\n\treturn source.replace(NT, '');\n}\n\nfunction newRegExp (template                                                            )            \n                                                            {\n\treturn RegExp(Source(template.raw, slice.call(arguments, 1)));\n}\nexport { newRegExp };\n\nexport function NewRegExp (flags        )                   {\n\treturn function newRegExp (template                      )         {\n\t\treturn RegExp(Source(template.raw, slice.call(arguments, 1)), flags);\n\t};\n}\n\nvar jRegExp = {\n\tnewRegExp: newRegExp,\n\tNewRegExp: NewRegExp,\n\tversion: version\n};\njRegExp['default'] = jRegExp;\nexport default jRegExp;",
			"import './j-regexp!meta.js';\nexport * from '../../src/export';\n/*¡ @ltd/j-regexp */",
			"import { newRegExp } from '@ltd/j-regexp';\n\n/* types */\n\nconst _29_ = /(?:0[1-9]|1\\d|2[0-9])/;\nconst _30_ = /(?:0[1-9]|[12]\\d|30)/;\nconst _31_ = /(?:0[1-9]|[12]\\d|3[01])/;\nconst _23_ = /(?:[01]\\d|2[0-3])/;\nconst _59_ = /[0-5]\\d/;\n\nconst YMD = newRegExp`\n\t\\d\\d\\d\\d-\n\t(?:\n\t\t(?:0[13578]|1[02])-${_31_}\n\t|\n\t\t(?:0[469]|11)-${_30_}\n\t|\n\t\t02-${_29_}\n\t)`;\n\nconst HMS_ = newRegExp`\n\t${_23_}:${_59_}:${_59_}(?:\\.\\d+)?`;\n\nexport const OFFSET = /(?:Z|[+-]\\d\\d:\\d\\d)$/;\n\nexport const OFFSET_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t${OFFSET}`;\n\nexport const LOCAL_DATETIME = newRegExp`\n\t^\n\t${YMD}\n\t[T ]\n\t${HMS_}\n\t$`;\n\nexport const LOCAL_DATE = newRegExp`\n\t^\n\t${YMD}\n\t$`;\n\nexport const LOCAL_TIME = newRegExp`\n\t^\n\t${HMS_}\n\t$`;\n\n/* parse */\n\nconst Whitespace = /[ \\t]/;\n\nexport const PRE_WHITESPACE = newRegExp`\n\t^${Whitespace}+`;\n\nexport const KEYS = /[\\w-]+|\"(?:[^\\\\\"]+|\\\\[^])*\"|'[^']*'/g;\n\nexport const VALUE_REST = newRegExp`\n\t^\n\t(\n\t\t(?:\\d\\d\\d\\d-\\d\\d-\\d\\d \\d)?\n\t\t[\\w\\-+.:]+\n\t)\n\t${Whitespace}*\n\t([^]*)\n\t$`;\n\nexport const LITERAL_STRING = newRegExp`\n\t^\n\t'([^']*)'\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const MULTI_LINE_LITERAL_STRING = newRegExp`\n\t^\n\t([^]*?)\n\t'''\n\t${Whitespace}*\n\t([^]*)`;\n\nexport const SYM_WHITESPACE = newRegExp`\n\t^\n\t[^]\n\t${Whitespace}*`;\n\n\nconst Tag = /[^()\\\\\"'`\\r\\n\\u2028\\u2029]+/;\n\nexport const KEY_VALUE_PAIR = newRegExp`\n\t^\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t=\n\t${Whitespace}*\n\t(?:\n\t\t\\((${Tag})\\)\n\t\t${Whitespace}*\n\t)?\n\t(\n\t\t[^ \\t#]\n\t\t[^]*\n\t)\n\t$`;\n\nexport const _VALUE_PAIR = newRegExp`\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^ \\t#][^]*)\n\t$`;\n\nexport const TAG_REST = newRegExp`\n\t^\n\t\\((${Tag})\\)\n\t${Whitespace}*\n\t([^]*)\n\t$`;",
			"import SyntaxError from '.SyntaxError';\nimport * as options from '../options';\nimport * as iterator from '../iterator';\nimport * as RE from './nested -- readable';\n\n/* parser */\n\nconst MULTI_LINE_BASIC_STRING         = /^(?:[^\\\\\"]+|\\\\[^]|\"\"?(?!\"))/;\nexport function MULTI_LINE_BASIC_STRING_exec_0 (_        )         {\n\tfor ( let _0         = ''; ; ) {\n\t\tif ( _==='' ) { return _0; }\n\t\tconst $                         = MULTI_LINE_BASIC_STRING.exec(_);\n\t\tif ( $===null ) { return _0; }\n\t\t_0 += $[0];\n\t\t_ = _.slice($[0].length);\n\t}\n}\n\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER         = /[^\\\\\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nconst ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER         = /[^\\\\\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]| *\\n[ \\n]*|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/g;\nexport function ESCAPED_EXCLUDE_CONTROL_CHARACTER_test (_        )          {\n\treturn _.replace(options.ctrl7F ? ESCAPED_EXCLUDE_CONTROL_CHARACTER : ESCAPED_EXCLUDE_CONTROL_CHARACTER_LESSER, '')==='';\n}\n\nconst BASIC_STRING         = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F\\x7F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nconst BASIC_STRING_LESSER         = /^(?:[^\\\\\"\\x00-\\x09\\x0B-\\x1F]+|\\\\(?:[btnfr\"\\\\]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8}))/;\nexport function BASIC_STRING_exec (_2        )  {                         \n\tconst basic_string = options.ctrl7F ? BASIC_STRING : BASIC_STRING_LESSER;\n\t_2 = _2.slice(1);\n\tfor ( let _1         = ''; ; ) {\n\t\tconst $                         = basic_string.exec(_2);\n\t\tif ( $===null ) {\n\t\t\t_2.startsWith('\"') || iterator.throws(SyntaxError(iterator.where()));\n\t\t\treturn { 1: _1, 2: _2.replace(RE.SYM_WHITESPACE, '') };\n\t\t}\n\t\t_1 += $[0];\n\t\t_2 = _2.slice($[0].length);\n\t}\n}\n\nconst BARE_KEY         = /^[\\w-]+/;\nconst LITERAL_KEY         = /^'[^'\\x00-\\x08\\x0B-\\x1F\\x7F]*'/;\nconst LITERAL_KEY_LESSER         = /^'[^'\\x00-\\x08\\x0B-\\x1F]*'/;\nconst DOT_KEY         = /^[ \\t]*\\.[ \\t]*/;\n\nexport function TABLE_DEFINITION_exec_groups (_        )  {                                                                                                         \n\tconst $_asArrayItem$$          = _.charAt(1)==='[';\n\t_ = _.slice($_asArrayItem$$ ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n\tconst keys         = getKeys(_);\n\t_ = _.slice(keys.length).replace(RE.PRE_WHITESPACE, '');\n\tlet tagInner         = '';\n\tif ( _.startsWith('(') ) { ( { 1: tagInner, 2: _ } = RE.TAG_REST.exec(_) || iterator.throws(SyntaxError(iterator.where())) ); }\n\t_.startsWith(']') || iterator.throws(SyntaxError(iterator.where()));\n\tconst $$asArrayItem$_          = _.charAt(1)===']';\n\t_ = _.slice($$asArrayItem$_ ? 2 : 1).replace(RE.PRE_WHITESPACE, '');\n\tlet tagOuter         = '';\n\tif ( _.startsWith('(') ) { ( { 1: tagOuter, 2: _ } = RE.TAG_REST.exec(_) || iterator.throws(SyntaxError(iterator.where())) ); }\n\t_==='' || _.startsWith('#') || iterator.throws(SyntaxError(iterator.where()));\n\treturn { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter };\n}\n\nexport function KEY_VALUE_PAIR_exec_groups (_        )  {                                                                   \n\tconst _1         = getKeys(_);\n\tconst $                  = RE.KEY_VALUE_PAIR.exec(_.slice(_1.length)) || iterator.throws(SyntaxError(iterator.where()));\n\treturn { left: _1, tagLeft: $[1] || '', tagRight: $[2] || '', right: $[3] };\n}\n\nfunction getKeys (_        )         {\n\tconst literal_key = options.ctrl7F ? LITERAL_KEY : LITERAL_KEY_LESSER;\n\tfor ( let keys         = ''; ; ) {\n\t\tif ( _.startsWith('\"') ) {\n\t\t\t_ = _.slice(1);\n\t\t\tfor ( let key         = '\"'; ; ) {\n\t\t\t\tconst $                         = BASIC_STRING.exec(_);\n\t\t\t\tif ( $===null ) {\n\t\t\t\t\t_.startsWith('\"') || iterator.throws(SyntaxError(iterator.where()));\n\t\t\t\t\t_ = _.slice(1);\n\t\t\t\t\tkeys += key+'\"';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_ = _.slice($[0].length);\n\t\t\t\tkey += $[0];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst key         = ( ( _.startsWith('\\'') ? literal_key : BARE_KEY ).exec(_) || iterator.throws(SyntaxError(iterator.where())) )[0];\n\t\t\t_ = _.slice(key.length);\n\t\t\tkeys += key;\n\t\t}\n\t\tconst $                         = DOT_KEY.exec(_);\n\t\tif ( $===null ) { return keys; }\n\t\t_ = _.slice($[0].length);\n\t\tkeys += $[0];\n\t}\n}",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport WeakMap from '.WeakMap';\nimport Date from '.Date';\nimport * as RE from '../share/RE';\nimport * as iterator from '../share/iterator';\n\nconst literal_cache = new WeakMap;\nconst value_cache = new WeakMap;\n\nclass Datetime extends Date {\n\tconstructor (expression        , literal        ) {\n\t\tsuper(expression);\n\t\tliteral_cache.set(this, literal);\n\t\tvalue_cache.set(this, this.getTime());\n\t}\n\t// Date.prototype.toJSON => toISOString\n\ttoISOString (              )         {\n\t\tif ( this.getTime()===value_cache.get(this) ) { return literal_cache.get(this); }\n\t\tthrow Error('Datetime value has been modified.');\n\t}\n}\n\nexport class OffsetDateTime extends Datetime {\n\tconstructor (literal        ) {\n\t\tRE.OFFSET_DATETIME.test(literal)\n\t\t|| iterator.throws(SyntaxError('Invalid Offset Date-Time '+literal+' at '+iterator.where()));\n\t\tsuper(literal.replace(' ', 'T'), literal);\n\t}\n\tget '.' () {\n\t\tconst index         = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index).replace(RE.OFFSET, '') : '';\n\t}\n}\n\nexport class LocalDateTime extends Datetime {\n\tconstructor (literal        ) {\n\t\tRE.LOCAL_DATETIME.test(literal)\n\t\t|| iterator.throws(SyntaxError('Invalid Local Date-Time '+literal+' at '+iterator.where()));\n\t\tsuper(literal.replace(' ', 'T')+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index         = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}\n\nexport class LocalDate extends Datetime {\n\tconstructor (literal        ) {\n\t\tRE.LOCAL_DATE.test(literal)\n\t\t|| iterator.throws(SyntaxError('Invalid Local Date '+literal+' at '+iterator.where()));\n\t\tsuper(literal+'T00:00:00.000Z', literal);\n\t}\n\tget '.' () { return ''; }\n}\n\nexport class LocalTime extends Datetime {\n\tconstructor (literal        ) {\n\t\tRE.LOCAL_TIME.test(literal)\n\t\t|| iterator.throws(SyntaxError('Invalid Local Time '+literal+' at '+iterator.where()));\n\t\tsuper('1970-01-01T'+literal+'Z', literal);\n\t}\n\tget '.' () {\n\t\tconst index         = literal_cache.get(this).indexOf('.')+1;\n\t\treturn index ? literal_cache.get(this).slice(index) : '';\n\t}\n}",
			"import SyntaxError from '.SyntaxError';\n//import Infinity, NaN from '.Infinity'+'.NaN';\nimport * as options from '../share/options';\nimport * as iterator from '../share/iterator';\n\nconst FLOAT = /^[-+]?(?:0|[1-9]\\d*(?:_\\d+)*)(?:\\.\\d+(?:_\\d+)*)?(?:[eE][-+]?\\d+(?:_\\d+)*)?$/;\nconst FLOAT_NOT_INTEGER = /[.eE]/;\nconst UNDERSCORES = /_/g;\n\nexport const Float = (literal        )         => {\n\tif ( FLOAT.test(literal) && FLOAT_NOT_INTEGER.test(literal) ) {\n\t\tif ( options.sFloat ) { return +literal.replace(UNDERSCORES, ''); }\n\t\telse {\n\t\t\tconst number = +literal.replace(UNDERSCORES, '');\n\t\t\tisFinite(number) || iterator.throws(RangeError('Float can not be as big as Infinity before TOML v0.5, like '+literal+' at '+iterator.where()));\n\t\t\treturn number;\n\t\t}\n\t}\n\t//if ( options.sFloat ) {\n\t//\tif ( literal==='inf' || literal==='+inf' ) { return Infinity; }\n\t//\tif ( literal==='-inf' ) { return -Infinity; }\n\t//\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) { return NaN; }\n\t//}\n\tthrow iterator.throws(SyntaxError('Invalid Float '+literal+' at '+iterator.where()));\n};",
			"import RangeError from '.RangeError';\nimport parseInt from '.parseInt';\nimport fromCodePoint from '.String.fromCodePoint';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\n\nconst ESCAPE_ALIAS = { '\\\\': '\\\\', '\"': '\"', b: '\\b', t: '\\t', n: '\\n', f: '\\f', r: '\\r' };\n\nconst ESCAPED_IN_SINGLE_LINE = /\\\\(?:([\\\\\"btnfr])|u(.{4})|U(.{8}))/g;\nconst ESCAPED_IN_MULTI_LINE = /\\n|\\\\(?: *(\\n)[ \\n]*|([\\\\\"btnfr])|u([^]{4})|U([^]{8}))/g;\n\n                                                                    \n\nconst unEscapeSingleLine = (match        , p1         , p2                    , p3                    )         => {\n\tif ( p1 ) { return ESCAPE_ALIAS[p1]; }\n\tconst codePoint         = parseInt(p2 ||         p3, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& iterator.throws(RangeError('Invalid Unicode Scalar '+( p2 ? '\\\\u'+p2 : '\\\\U'+p3 )+' at '+iterator.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nconst unEscapeMultiLine = (match        , p1                  , p2         , p3                    , p4                    )         => {\n\tif ( match==='\\n' ) { return options.useWhatToJoinMultiLineString; }\n\tif ( p1 ) { return ''; }\n\tif ( p2 ) { return ESCAPE_ALIAS[p2]; }\n\tconst codePoint         = parseInt(p3 ||         p4, 16);\n\t( 0xD7FF<codePoint && codePoint<0xE000 || 0x10FFFF<codePoint )\n\t&& iterator.throws(RangeError('Invalid Unicode Scalar '+( p3 ? '\\\\u'+p3 : '\\\\U'+p4 )+' at '+iterator.where()));\n\treturn fromCodePoint(codePoint);\n};\n\nexport const BasicString = (literal        )         => literal.replace(ESCAPED_IN_SINGLE_LINE, unEscapeSingleLine);\n\nexport const MultiLineBasicString = (literal        )         => literal.replace(ESCAPED_IN_MULTI_LINE, unEscapeMultiLine);",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport isArray from '.Array.isArray';\nimport WeakSet from '.WeakSet';\nimport * as iterator from '../share/iterator';\nimport { isTable } from '../types/Table';\nimport { BasicString, MultiLineBasicString } from '../types/String';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\n\nexport const sealedInline = new WeakSet;\nconst openTables = new WeakSet;\nconst openedTables = new WeakSet;\n\nexport function appendTable (table        , key_key        , asArrayItem         , tag        )         {\n\tconst leadingKeys           = parseKeys(key_key);\n\tconst finalKey         = leadingKeys.pop();\n\ttable = prepareTable(table, leadingKeys);\n\tlet lastTable        ;\n\tif ( asArrayItem ) {\n\t\tlet arrayOfTables          ;\n\t\tif ( finalKey in table ) { sealedInline.has(arrayOfTables = table[finalKey]) && iterator.throws(Error('Trying to push Table to non-ArrayOfTables value at '+iterator.where())); }\n\t\telse { arrayOfTables = table[finalKey] = []; }\n\t\ttag && options.collect({ table, key: finalKey, array: arrayOfTables, index: arrayOfTables.length, tag });\n\t\tarrayOfTables.push(lastTable = new options.TableDepends);\n\t}\n\telse {\n\t\tif ( finalKey in table ) {\n\t\t\toptions.openable && openTables.has(lastTable = table[finalKey]) && !openedTables.has(lastTable) || iterator.throws(Error('Duplicate Table definition at '+iterator.where()));\n\t\t\topenTables.delete(lastTable);\n\t\t}\n\t\telse {\n\t\t\ttable[finalKey] = lastTable = new options.TableDepends;\n\t\t\toptions.openable && openedTables.add(lastTable);\n\t\t}\n\t\ttag && options.collect({ table, key: finalKey, tag });\n\t}\n\treturn lastTable;\n}\n\nexport function parseKeys (key_key        )           {\n\tconst keys                   = key_key.match(RE.KEYS);\n\tfor ( let index         = keys.length; index--; ) {\n\t\tconst key         = keys[index];\n\t\tif ( key.startsWith('\\'') ) { keys[index] = key.slice(1, -1); }\n\t\telse if ( key.startsWith('\"') ) { keys[index] = BasicString(key.slice(1, -1)); }\n\t}\n\tif ( options.nonEmptyKey ) {\n\t\tfor ( let index         = keys.length; index--; ) {\n\t\t\tkeys[index] || iterator.throws(SyntaxError('Empty key is not allowed before TOML v0.4, which at '+iterator.where()));\n\t\t}\n\t}\n\treturn keys;\n}\n\nfunction prepareTable (table        , keys          )         {\n\tconst { length }           = keys;\n\tlet index         = 0;\n\twhile ( index<length ) {\n\t\tconst key         = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tif ( isTable(table) ) {\n\t\t\t\tsealedInline.has(table) && iterator.throws(Error('Trying to define table through static Inline Object at '+iterator.where()));\n\t\t\t}\n\t\t\telse if ( isArray(table) ) {\n\t\t\t\tsealedInline.has(table) && iterator.throws(Error('Trying to append value to static Inline Array at '+iterator.where()));\n\t\t\t\t// @ts-ignore\n\t\t\t\ttable = table[table.length-1];\n\t\t\t}\n\t\t\telse { iterator.throws(Error('Trying to define table through non-Table value at '+iterator.where())); }\n\t\t}\n\t\telse {\n\t\t\topenTables.add(table = table[key] = new options.TableDepends);\n\t\t\twhile ( index<length ) { openTables.add(table = table[keys[index++]] = new options.TableDepends); }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function prepareInlineTable (table        , keys          )         {\n\tconst { length }           = keys;\n\tlet index         = 0;\n\twhile ( index<length ) {\n\t\tconst key         = keys[index++];\n\t\tif ( key in table ) {\n\t\t\ttable = table[key];\n\t\t\tisTable(table) || iterator.throws(Error('Trying to assign property through non-Table value at '+iterator.where()));\n\t\t\tsealedInline.has(table) && iterator.throws(Error('Trying to assign property through static Inline Object at '+iterator.where()));\n\t\t}\n\t\telse {\n\t\t\ttable = table[key] = new options.TableDepends;\n\t\t\twhile ( index<length ) { table = table[keys[index++]] = new options.TableDepends; }\n\t\t\treturn table;\n\t\t}\n\t}\n\treturn table;\n}\n\nexport function assignLiteralString (table        , finalKey        , literal        )         {\n\tlet $                 ;\n\tif ( literal.charAt(1)!=='\\'' || literal.charAt(2)!=='\\'' ) {\n\t\t$ = RE.LITERAL_STRING.exec(literal) || iterator.throws(SyntaxError(iterator.where()));\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\t$ = RE.MULTI_LINE_LITERAL_STRING.exec(literal);\n\tif ( $ ) {\n\t\ttable[finalKey] = checkLiteralString($[1]);\n\t\treturn $[2];\n\t}\n\tif ( literal ) {\n\t\tcheckLiteralString(literal);\n\t\tliteral += options.useWhatToJoinMultiLineString;\n\t}\n\tconst start         = iterator.mark();\n\tfor ( ; ; ) {\n\t\tconst line         = iterator.must('Literal String', start);\n\t\t$ = RE.MULTI_LINE_LITERAL_STRING.exec(line);\n\t\tif ( $ ) {\n\t\t\ttable[finalKey] = literal+checkLiteralString($[1]);\n\t\t\treturn $[2];\n\t\t}\n\t\tliteral += line+options.useWhatToJoinMultiLineString;\n\t}\n}\n\nconst CONTROL_CHARACTER_EXCLUDE_TAB = /[\\x00-\\x08\\x0B-\\x1F\\x7F]/;\nconst CONTROL_CHARACTER_EXCLUDE_TAB_LESSER = /[\\x00-\\x08\\x0B-\\x1F]/;\nfunction checkLiteralString (literal        )         {\n\t( options.ctrl7F ? CONTROL_CHARACTER_EXCLUDE_TAB : CONTROL_CHARACTER_EXCLUDE_TAB_LESSER ).test(literal) && iterator.throws(SyntaxError('Control characters other than tab are not permitted in a Literal String, which was found at '+iterator.where()));\n\treturn literal;\n}\n\nexport function assignBasicString (table        , finalKey        , literal        )         {\n\tif ( literal.charAt(1)!=='\"' || literal.charAt(2)!=='\"' ) {\n\t\tconst $ = RE.BASIC_STRING_exec(literal);\n\t\ttable[finalKey] = BasicString($[1]);\n\t\treturn $[2];\n\t}\n\tliteral = literal.slice(3);\n\tconst $ = RE.MULTI_LINE_BASIC_STRING_exec_0(literal);\n\tif ( literal.startsWith('\"\"\"', $.length) ) {\n\t\tRE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throws(SyntaxError(iterator.where()));\n\t\ttable[finalKey] = MultiLineBasicString($);\n\t\treturn literal.slice($.length+3).replace(RE.PRE_WHITESPACE, '');\n\t}\n\tif ( literal ) {\n\t\tliteral += '\\n';\n\t\tRE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(literal) || iterator.throws(SyntaxError(iterator.where()));\n\t}\n\tconst start         = iterator.mark();\n\tfor ( ; ; ) {\n\t\tlet line         = iterator.must('Basic String', start);\n\t\tconst $ = RE.MULTI_LINE_BASIC_STRING_exec_0(line);\n\t\tif ( line.startsWith('\"\"\"', $.length) ) {\n\t\t\tRE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test($) || iterator.throws(SyntaxError(iterator.where()));\n\t\t\ttable[finalKey] = MultiLineBasicString(literal+$);\n\t\t\treturn line.slice($.length+3).replace(RE.PRE_WHITESPACE, '');\n\t\t}\n\t\tline += '\\n';\n\t\tRE.ESCAPED_EXCLUDE_CONTROL_CHARACTER_test(line) || iterator.throws(SyntaxError(iterator.where()));\n\t\tliteral += line;\n\t}\n}",
			"import SyntaxError from '.SyntaxError';\nimport * as iterator from '../share/iterator';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\n\nconst DELIMITER_CHECK = /[^`]/;\n\nexport function assignInterpolationString (table        , finalKey        , delimiter        )         {\n\toptions.enableInterpolationString || iterator.throws(SyntaxError(iterator.where()));\n\tDELIMITER_CHECK.test(delimiter) && iterator.throws(SyntaxError('Interpolation String opening tag incorrect at '+iterator.where()));\n\tlet string        ;\n\tlet lineRest        ;\n\t{\n\t\tconst literals           = [];\n\t\tfor ( const start         = iterator.mark(); ; ) {\n\t\t\tconst literal         = iterator.must('Interpolation String', start);\n\t\t\tif ( literal.startsWith(delimiter) ) {\n\t\t\t\tlineRest = literal.slice(delimiter.length).replace(RE.PRE_WHITESPACE, '');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tliterals.push(literal);\n\t\t}\n\t\tstring = literals.join('\\n');\n\t}\n\ttable[finalKey] = string;\n\treturn lineRest;\n}",
			"import SyntaxError from '.SyntaxError';\nimport Error from '.Error';\nimport Infinity from '.Infinity';\nimport NaN from '.NaN';\nimport * as iterator from '../share/iterator';\nimport { OffsetDateTime, LocalDateTime, LocalDate, LocalTime } from '../types/Datetime';\nimport { Float } from '../types/Float';\nimport * as options from '../share/options';\nimport * as RE from '../share/RE';\nimport { sealedInline, appendTable, parseKeys, prepareInlineTable, assignLiteralString, assignBasicString } from './on-the-spot';\nimport { assignInterpolationString } from './x-feature';\n\nexport default function Root () {\n\tconst rootTable         = new options.TableDepends;\n\tlet lastSectionTable         = rootTable;\n\twhile ( iterator.rest() ) {\n\t\tconst line         = iterator.next().replace(RE.PRE_WHITESPACE, '');\n\t\tif ( line==='' ) { }\n\t\telse if ( line.startsWith('#') ) { }\n\t\telse if ( line.startsWith('[') ) {\n\t\t\tconst { $_asArrayItem$$, keys, tagInner, $$asArrayItem$_, tagOuter } = RE.TABLE_DEFINITION_exec_groups(line);\n\t\t\t$_asArrayItem$$===$$asArrayItem$_ || iterator.throws(SyntaxError('Square brackets of table define statement not match at '+iterator.where()));\n\t\t\ttagInner && tagOuter && iterator.throws(SyntaxError('Tag for table define statement can not both in and out, which at '+iterator.where()));\n\t\t\tlastSectionTable = appendTable(rootTable, keys, $_asArrayItem$$, tagOuter || tagInner);\n\t\t}\n\t\telse {\n\t\t\tlet rest         = assign(lastSectionTable, line);\n\t\t\twhile ( iterator.stacks_length ) { rest = iterator.stacks_pop()(rest); }\n\t\t\trest==='' || rest.startsWith('#') || iterator.throws(SyntaxError(iterator.where()));\n\t\t}\n\t}\n\treturn rootTable;\n};\n\nfunction assign (lastInlineTable_array                , lineRest        )         {\n\tlet left        ;\n\tlet tagLeft        ;\n\tlet tagRight        ;\n\t( { left, tagLeft, tagRight, right: lineRest } = RE.KEY_VALUE_PAIR_exec_groups(lineRest) );\n\tconst leadingKeys           = parseKeys(left);\n\tconst finalKey         = leadingKeys.pop();\n\tconst table         = prepareInlineTable(lastInlineTable_array, leadingKeys);\n\tfinalKey in table && iterator.throws(Error('Duplicate property definition at '+iterator.where()));\n\ttagLeft && options.collect({ table, key: finalKey, tag: tagLeft });\n\ttagRight && options.collect({ table, key: finalKey, tag: tagRight });\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(table, finalKey, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\ttagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ table, key: finalKey, tag: tagRight });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\titerator.stacks_push(lineRest => equalInlineTable(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\titerator.stacks_push(lineRest => equalInlineArray(table, finalKey, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal        ;\n\t( { 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\tif ( lineRest.startsWith('(') ) {\n\t\ttagRight && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t( { 1: tagRight, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\toptions.collect({ table, key: finalKey, tag: tagRight });\n\t}\n\tif ( options.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\ttable[finalKey] = Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\ttable[finalKey] = -Infinity;\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\ttable[finalKey] = NaN;\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( RE.OFFSET.test(literal) ) {\n\t\t\t\ttable[finalKey] = new OffsetDateTime(literal);\n\t\t\t}\n\t\t\telse {\n\t\t\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\t\t\ttable[finalKey] = new LocalDateTime(literal);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\t\ttable[finalKey] = new LocalTime(literal);\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\ttable[finalKey] = new LocalDate(literal);\n\t\treturn lineRest;\n\t}\n\ttable[finalKey] =\n\t\tliteral==='true' ? true : literal==='false' ? false :\n\t\t\t\tliteral.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ? Float(literal) :\n\t\t\t\t\toptions.enableNull && literal==='null' ? null :\n\t\t\t\t\t\toptions.IntegerDepends(literal);\n\treturn lineRest;\n}\n\nfunction push (lastInlineTable_array                , lineRest        )         {\n\tlet alreadyBefore = lineRest.startsWith('(');\n\tlet tag        ;\n\tif ( alreadyBefore ) {\n\t\t( { 1: tag, 2: lineRest } = RE._VALUE_PAIR.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\toptions.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n\t}\n\tconst lastIndex         = ''+lastInlineTable_array.length;\n\tswitch ( lineRest[0] ) {\n\t\tcase '\\'':\n\t\t\tlineRest = assignLiteralString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '\"':\n\t\t\tlineRest = assignBasicString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '`':\n\t\t\tlineRest = assignInterpolationString(options.asStrings(lastInlineTable_array), lastIndex, lineRest);\n\t\t\tif ( lineRest.startsWith('(') ) {\n\t\t\t\talreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t\t\t( { 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\t\t\toptions.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length-1, tag });\n\t\t\t}\n\t\t\treturn lineRest;\n\t\tcase '{':\n\t\t\titerator.stacks_push(lineRest => equalInlineTable(options.asTables(lastInlineTable_array), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t\tcase '[':\n\t\t\titerator.stacks_push(lineRest => equalInlineArray(options.asArrays(lastInlineTable_array), lastIndex, lineRest));\n\t\t\treturn lineRest;\n\t}\n\tlet literal        ;\n\t( { 1: literal, 2: lineRest } = RE.VALUE_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\tif ( lineRest.startsWith('(') ) {\n\t\talreadyBefore && iterator.throws(SyntaxError('Tag can not be placed at both side of a value, which at '+iterator.where()));\n\t\t( { 1: tag, 2: lineRest } = RE.TAG_REST.exec(lineRest) || iterator.throws(SyntaxError(iterator.where())) );\n\t\toptions.collect({ array: lastInlineTable_array, index: lastInlineTable_array.length, tag });\n\t}\n\tif ( options.sFloat ) {\n\t\tif ( literal==='inf' || literal==='+inf' ) {\n\t\t\toptions.asFloats(lastInlineTable_array).push(Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='-inf' ) {\n\t\t\toptions.asFloats(lastInlineTable_array).push(-Infinity);\n\t\t\treturn lineRest;\n\t\t}\n\t\tif ( literal==='nan' || literal==='+nan' || literal==='-nan' ) {\n\t\t\toptions.asFloats(lastInlineTable_array).push(NaN);\n\t\t\treturn lineRest;\n\t\t}\n\t}\n\tif ( literal.includes(':') ) {\n\t\tif ( literal.includes('-') ) {\n\t\t\tif ( RE.OFFSET.test(literal) ) {\n\t\t\t\toptions.asOffsetDateTimes(lastInlineTable_array).push(new OffsetDateTime(literal));\n\t\t\t}\n\t\t\telse {\n\t\t\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\t\t\toptions.asLocalDateTimes(lastInlineTable_array).push(new LocalDateTime(literal));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\t\toptions.asLocalTimes(lastInlineTable_array).push(new LocalTime(literal));\n\t\t}\n\t\treturn lineRest;\n\t}\n\tif ( literal.indexOf('-')!==literal.lastIndexOf('-') && !literal.startsWith('-') ) {\n\t\toptions.moreDatetime || iterator.throws(SyntaxError(iterator.where()));\n\t\toptions.asLocalDates(lastInlineTable_array).push(new LocalDate(literal));\n\t\treturn lineRest;\n\t}\n\tif ( literal==='true' ) { options.asBooleans(lastInlineTable_array).push(true); }\n\telse if ( literal==='false' ) { options.asBooleans(lastInlineTable_array).push(false); }\n\telse if ( literal.includes('.') || ( literal.includes('e') || literal.includes('E') ) && !literal.startsWith('0x') ) {\n\t\toptions.asFloats(lastInlineTable_array).push(Float(literal));\n\t}\n\telse if ( options.enableNull && literal==='null' ) { options.asNulls(lastInlineTable_array).push(null); }\n\telse { options.asIntegers(lastInlineTable_array).push(options.IntegerDepends(literal)); }\n\treturn lineRest;\n}\n\nfunction equalInlineTable (table        , finalKey        , lineRest        )         {\n\tconst inlineTable         = table[finalKey] = new options.TableDepends;\n\tsealedInline.add(inlineTable);\n\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n\tif ( options.allowInlineTableMultiLineAndTrailingCommaEvenNoComma ) {\n\t\tconst start         = iterator.mark();\n\t\tconst length = iterator.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( iterator.stacks_length>length ) {\n\t\t\t\t\titerator.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator.must('Inline Table', start).replace(RE.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(',') ) { lineRest = lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t}(lineRest);\n\t}\n\telse {\n\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator.where()));\n\t\tconst length = iterator.stacks_length;\n\t\treturn function callee (lineRest) {\n\t\t\tfor ( ; ; ) {\n\t\t\t\tlineRest = assign(inlineTable, lineRest);\n\t\t\t\tif ( iterator.stacks_length>length ) {\n\t\t\t\t\titerator.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\t\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');//\n\t\t\t\t\t\t\tlineRest.startsWith('}') && iterator.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+iterator.where()));//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator.where()));//\n\t\t\t\t\t\t//\n\t\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t\t});\n\t\t\t\t\treturn lineRest;\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith('}') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\t\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n\t\t\t\t\tlineRest.startsWith('}') && iterator.throws(SyntaxError('The last property of an Inline Table can not have a trailing comma, which was found at '+iterator.where()));\n\t\t\t\t}\n\t\t\t\t( lineRest==='' || lineRest.startsWith('#') ) && iterator.throws(SyntaxError('Inline Table is intended to appear on a single line, which broken at '+iterator.where()));\n\t\t\t}\n\t\t}(lineRest);\n\t}\n}\n\nfunction equalInlineArray (table        , finalKey        , lineRest        )         {\n\tconst inlineArray        = table[finalKey] = [];\n\tsealedInline.add(inlineArray);\n\tconst start         = iterator.mark();\n\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\tlineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n\t}\n\tif ( lineRest.startsWith(']') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\tconst length = iterator.stacks_length;\n\treturn function callee (lineRest) {\n\t\tfor ( ; ; ) {\n\t\t\tlineRest = push(inlineArray, lineRest);\n\t\t\tif ( iterator.stacks_length>length ) {\n\t\t\t\titerator.stacks_insertBeforeLast(function inserted (lineRest) {\n\t\t\t\t\t//\n\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\tlineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');//\n\t\t\t\t\t}//\n\t\t\t\t\tif ( lineRest.startsWith(',') ) {//\n\t\t\t\t\t\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');//\n\t\t\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {//\n\t\t\t\t\t\t\tlineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');//\n\t\t\t\t\t\t}//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t}//\n\t\t\t\t\telse {//\n\t\t\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }//\n\t\t\t\t\t\titerator.throws(SyntaxError(iterator.where()));//\n\t\t\t\t\t}//\n\t\t\t\t\t//\n\t\t\t\t\treturn callee(lineRest);\n\t\t\t\t});\n\t\t\t\treturn lineRest;\n\t\t\t}\n\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\tlineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n\t\t\t}\n\t\t\tif ( lineRest.startsWith(',') ) {\n\t\t\t\tlineRest = lineRest.replace(RE.SYM_WHITESPACE, '');\n\t\t\t\twhile ( lineRest==='' || lineRest.startsWith('#') ) {\n\t\t\t\t\tlineRest = iterator.must('Inline Array', start).replace(RE.PRE_WHITESPACE, '');\n\t\t\t\t}\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( lineRest.startsWith(']') ) { return lineRest.replace(RE.SYM_WHITESPACE, ''); }\n\t\t\t\titerator.throws(SyntaxError(iterator.where()));\n\t\t\t}\n\t\t}\n\t}(lineRest);\n}",
			"import Error from '.Error';\nimport TypeError from '.TypeError';\nimport isBuffer from '.Buffer.isBuffer';\nimport from from '.Buffer.from';\nimport * as iterator from './share/iterator';\nimport * as options from './share/options';\nimport Root from './parse/level-loop';\n\nconst BOM = /^\\uFEFF/;\nconst NON_SCALAR = /[\\uD800-\\uDFFF]/u;// \\u{10FFFF}- > \\uFFFD\n\nexport default function parse (\n\tsourceContent                 ,\n\tspecificationVersion           ,\n\tmultiLineJoiner        ,\n\tuseBigInt                   = true,\n\txOptions                    = null\n)         {\n\titerator.could();\n\tif ( isBuffer(sourceContent) ) {\n\t\tconst buffer         = sourceContent;\n\t\tsourceContent = buffer.toString();\n\t\tif ( !from(buffer).equals(buffer) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any unknown code point.'); }\n\t\tsourceContent = sourceContent.replace(BOM, '');\n\t}\n\tif ( typeof sourceContent!=='string' ) { throw TypeError('TOML.parse(sourceContent)'); }\n\tif ( NON_SCALAR.test(sourceContent) ) { throw Error('A TOML doc must be a (ful-scalar) valid UTF-8 file, without any uncoupled UCS-4 character code.'); }\n\ttry {\n\t\toptions.use(specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t\titerator.todo(sourceContent);\n\t\ttry {\n\t\t\tconst rootTable = Root();\n\t\t\toptions.process();\n\t\t\treturn rootTable;\n\t\t}\n\t\tfinally { iterator.done(); }\n\t}\n\tfinally { options.clear(); }\n};",
			"import TypeError from '.TypeError';\nimport Promise from '.Promise';\nimport parse from './parse';\n\nexport default function install (\n\treadFile                                            ,\n\tspecificationVersion           ,\n\tmultiLineJoiner        ,\n\tuseBigInt                   = true,\n\txOptions                    = null\n) {\n\tif ( typeof readFile!=='function' ) { throw TypeError('TOML.install(readFile)'); }\n\tparse('', specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\trequire.extensions['.toml'] = function require_toml (module, filename        )       {\n\t\tconst sourceContent = readFile(filename);\n\t\tmodule.exports = sourceContent instanceof Promise\n\t\t\t? sourceContent.then(onFulfilled)\n\t\t\t: parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t};\n\tfunction onFulfilled (sourceContent        )         {\n\t\treturn parse(sourceContent, specificationVersion, multiLineJoiner, useBigInt, xOptions);\n\t}\n};",
			"import version from './version?text';\nimport parse from './parse';\nimport install from './install';\n\nconst TOML = {\n\tparse,\n\tinstall,\n\tversion,\n\tget default () { return this; }\n};\n\nexport default TOML;"
		]
}